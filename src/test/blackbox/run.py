import subprocess
import os

EMPTY_STRING = ""
NOTHING = ""
NEW_LINE = "\n"
ENCODING = "utf-8"
SEPARATOR = os.path.sep
EXIT_CODE_OK = 0
EXIT_CODE_RUNTIME_ERROR = 1
EXIT_CODE_SYNTAX_ERROR = 2
EXIT_CODE_CMD_ERROR = 3
TRUE = "1"
FALSE = "0"
NAN = "NaN"
NEVER = "never"
NO_PERIOD = "no period"

os.environ['PYTHONIOENCODING'] = ENCODING

def make_process(code):
  return subprocess.Popen(['perun2', '-d', 'res', '-c', code], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

def run_test_case(code, expectedOutput):
  p = make_process(code)
  output = p.communicate()[0].decode(ENCODING)
  output = output.replace('\r\n', NEW_LINE).replace('\r', NEW_LINE)[:-1]
  if p.returncode != EXIT_CODE_OK:
    print("Test failed at running code: " + code)
    print("  Received exit code:" + NEW_LINE + str(p.returncode))
    print("  Received output:" + NEW_LINE + output)
    print("  Expected output:" + NEW_LINE + expectedOutput)
  elif output != expectedOutput:
    print("Test failed at running code: " + code)
    print("  Received output:" + NEW_LINE + output)
    print("  Expected output:" + NEW_LINE + expectedOutput)
    
def expect_exit_code(code, exitCode, errorName):
  p = make_process(code)
  p.communicate()
  if p.returncode != exitCode:
    print("Test failed at expecting " + errorName + " from code: " + code)
    print("  Received exit code:" + NEW_LINE + str(p.returncode))

def expect_syntax_error(code):
  expect_exit_code(code, EXIT_CODE_SYNTAX_ERROR, "syntax error")
    
def expect_runtime_error(code):
  expect_exit_code(code, EXIT_CODE_RUNTIME_ERROR, "runtime error")

def lines(*args):
  return NEW_LINE.join(args)

def path(*args):
  return SEPARATOR.join(args)
  
  
if __name__ == '__main__':
  print ("BLACK-BOX TESTS START")
  
  run_test_case("print 'hello world'", "hello world")
  run_test_case(" 'hello world'   ", "hello world")
  run_test_case("print 'hello' + ' ' + 'worlds'", "hello worlds")
  run_test_case("print 'tą żółć'   ", "tą żółć")
  run_test_case("print 2 +2*2", "6")
  run_test_case("print 2 + '5' ", "25")
  run_test_case("print ((((3))+(((2)))*2)) ", "7")
  run_test_case("print (((((3))+(((2))))*2)) ", "10")
  run_test_case("a =2,32,1; print a[a[a[0]]] ", "32")
  run_test_case("a =2,34,4; print a[a[a[0]]-a[0]] ", "4")
  run_test_case("a =2,34,4; print a[((a[(a[0])]-a[0]))]", "4")
  run_test_case("print '2' + 75 ", "275")
  run_test_case("print '2' + 75 + 5 ", "280")
  run_test_case("print '2' + 75 days + 5 ", "275 days5")
  run_test_case("print '2' + 75 days + 2 days + 5 ", "277 days5")
  run_test_case("print '2' + 3 august 2010 + 2 ", "23 August 20102")
  run_test_case("print '2' + 3 august 2010 + 2 + 5 ", "23 August 20107")
  run_test_case("print '2' + 3 august 2010 + 2 days ", "25 August 2010")
  run_test_case("print '2' + 3 august 2010 + 2 days + 1 day ", "26 August 2010")
  run_test_case("print '2' + 3 august 2010 + 2 days + 1 day + 16 ", "26 August 201016")
  run_test_case("print 2, 5", lines("2", "5"))
  run_test_case("print 2, 2*25, 1", lines("2", "50", "1"))
  run_test_case("if true {   43} ", "43")
  run_test_case("if true {   43 } else {21 }", "43")
  run_test_case("if false {   43 } else if false{4} else {21 } ", "21")
  run_test_case("if false {   43 } else if false{} else {21 } ", "21")
  run_test_case("if false {   43 } else if true{5} else {21 } ", "5")
  run_test_case("if true and false {43 } else {  21}", "21")
  run_test_case("if false {   43} 5 ", "5")
  run_test_case("if true { 43 ; 2; 1} else { 3} 5 ", lines("43", "2", "1", "5"))
  run_test_case("3 times {if true {3;2} else {} 1}", lines("3", "2", "1", "3", "2", "1", "3", "2", "1"))
  run_test_case(" 'ta', 'ha', 'na' {if true {3;this} else {7} this }", lines("3", "ta", "ta", "3", "ha", "ha", "3", "na", "na"))
  run_test_case("if true {if false {4} else {2}1} else {if true {3} else {5}}", lines("2", "1"))
  run_test_case("a = 6; if false {if false {a--} else {a--}a+= 1500} else {if true {a+= 100} else {5}} a", "106")
  run_test_case("print 3; // print 4", "3")
  run_test_case("print 3; /* print 4 */ print 5", lines("3", "5"))
  run_test_case("print 3; /* \n print 4 \n */ print 5", lines("3", "5"))
  run_test_case("print 3; // \n print 4 ;\n  print 5", lines("3", "4", "5"))
  run_test_case("print 3; // print 4 \n  print 5", lines("3", "5"))
  run_test_case("//print 3; \n print 4", "4")
  run_test_case("print true and true xor false", TRUE)
  run_test_case("print true and true xor not false", FALSE)
  run_test_case("print true or true xor true", FALSE)
  run_test_case("print not false and true xor false", TRUE)
  run_test_case("print not false or not true xor true", FALSE)
  run_test_case("print (2*4)+(6*8)", "56")
  run_test_case("print -((2*4)+(6*8))+156", "100")
  run_test_case("print 2*2+-3*3", "-5")
  run_test_case("print 2<3", TRUE)
  run_test_case("print 2 < 2 or 3 != 34", TRUE)
  run_test_case("print 2*2<3; 14 = 2*7", lines(FALSE, TRUE))
  run_test_case("print 2<=2; 2<2; 1>=3;10 > 16", lines(TRUE, FALSE, FALSE, FALSE))
  run_test_case("print 2+2 = 4", TRUE)
  run_test_case("print 2+2 = 4.00003", FALSE)
  run_test_case("print 2+2 = 3.5 + 0.5", TRUE)
  run_test_case("print 2+2 < 4 - 0.0", FALSE)
  run_test_case("print 2+2 = 4 - 0.0", TRUE)
  run_test_case("print 2+2 = 4 - 0.0", TRUE)
  run_test_case("print 2+2 < 4 - 0.0", FALSE)
  run_test_case("print 'abc' = 'abc' ", TRUE)
  run_test_case("print 'abc' = 'abd' ", FALSE)
  run_test_case("print 'abc' < 'abc' ", FALSE)
  run_test_case("print 'abc' <= 'abc' ", TRUE)
  run_test_case("print 'abc' < 'abd' ", TRUE)
  run_test_case("print 'abc' <= 'abd' ", TRUE)
  run_test_case("print 'abc' = 'ab' + 'c' ", TRUE)
  run_test_case("print 'abc' != 'abc' ", FALSE)
  run_test_case("print 'abc' != 'abd' ", TRUE)
  run_test_case("print 'Abc' != 'abc' ", TRUE)
  run_test_case("print 'Abc' = 'abc' ", FALSE)
  run_test_case("print 'a' = 'abc' ", FALSE)
  run_test_case("print 'a' != 'abc' ", TRUE)
  run_test_case("print 'a' > 'abc' ", FALSE)
  run_test_case("print 'a' >= 'abc' ", FALSE)
  run_test_case("print 'a' < 'abc' ", TRUE)
  run_test_case("print 'a' <= 'abc' ", TRUE)
  run_test_case("print (2, 3) = (2, 3)", TRUE)
  run_test_case("print (2, 3) = (3, 2)", FALSE)
  run_test_case("print (2, 3) <= (2, 3)", TRUE)
  run_test_case("print (3, 2) <= (2, 3)", TRUE)
  run_test_case("print (3, 2) <= (2, 3, 1)", TRUE)
  run_test_case("print (3, 2) < (2, 3, 1)", TRUE)
  run_test_case("print (3, 2) = (2, 3, 1)", FALSE)
  run_test_case("print (3, 2) != (2, 3, 1)", TRUE)
  run_test_case("print (3, 2) != (2, 3, 1)", TRUE)
  run_test_case("print (3, 2) >= (2, 3, 1)", FALSE)
  run_test_case("print (3, 2) > (2, 3, 1)", FALSE)
  run_test_case("print (1, 2, 3) > (2, 3, 1)", FALSE)
  run_test_case("print (1, 2, 3) >= (2, 3, 1)", TRUE)
  run_test_case("print (1, 2, 3) <= (2, 3, 1)", TRUE)
  run_test_case("print (1, 2, 3) != (2, 3, 1)", TRUE)
  run_test_case("print (1, 2, 3) = (1, 2, 3)", TRUE)
  run_test_case("print (1, 2, 3) = (1, 2, '3')", TRUE)
  run_test_case("print ('1', 2, 3) = (1, 2, '3')", TRUE)
  run_test_case("print (1, 2, 3) = (2, 3, 1)", FALSE)
  run_test_case("print 'a' + 'b'", "ab")
  run_test_case("print 'a' + 'b' + 'c'", "abc")
  run_test_case("print 'a' + 'b' + 'c' + 'd'", "abcd")
  run_test_case("print 'a' + 'b' + 'c' + 'd' + 'e'", "abcde")
  run_test_case("print 'a' + 'b' + 2 + 'd' + 'e'", "ab2de")
  run_test_case("print 'a' + 'b' + 2 + 1 + 'e'", "ab3e")
  run_test_case("print 'a' + 'b' + 'c' + 'd' + 'e'+ 'f'", "abcdef")
  run_test_case("print 'a' + 'b' + 'c' + 'd' + 'e'+ 'f'+'g'", "abcdefg")
  run_test_case("print 'a' + 'b' + 'c' + 'd' + 'e'+ 'f'+'g'+'h'", "abcdefgh")
  run_test_case("3-2 times { x='b'; print 'a' + x }" , "ab")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c'}", "abc")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c' + 'd'}", "abcd")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c' + 'd' + 'e'}", "abcde")
  run_test_case("3-2 times { x='b'; print 'a' + x + 2 + 'd' + 'e'}", "ab2de")
  run_test_case("3-2 times { x='b'; print 'a' + x + 2 + 1 + 'e'}", "ab3e")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c' + 'd' + 'e'+ 'f'}", "abcdef")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c' + 'd' + 'e'+ 'f'+'g'}", "abcdefg")
  run_test_case("3-2 times { x='b'; print 'a' + x + 'c' + 'd' + 'e'+ 'f'+'g'+'h'}", "abcdefgh")
  run_test_case("a = 5; print a", "5")
  run_test_case("a = 5; b = 3; print a", "5")
  run_test_case("a = 5; b = 3; print a * b", "15")
  run_test_case("a = 2,3,4; print a", lines("2", "3", "4"))
  run_test_case("a = 2,3,4; a { print index }", lines("0", "1", "2"))
  run_test_case("a = 2,3,4; print a, a", lines("2", "3", "4", "2", "3", "4"))
  run_test_case("a = 2,3,4; b = '4','123'; print a, 5, a", lines("2", "3", "4", "5","2", "3", "4"))
  run_test_case("a = 5; print a + 2", "7")
  run_test_case("a = '5'; print a + 2", "52")
  run_test_case("A = 5; a = 3; print A", "3")
  run_test_case("A = 5; a = true; print A", "1")
  run_test_case("a = true; a = a xor true; print a", FALSE)
  run_test_case("a = 'true'; a = 'tu'; print a", "tu")
  run_test_case("a = 'true'; a[1] = 't'; print a", "ttue")
  run_test_case("a = 'true'; a[1] = ''; print a", "tue")
  run_test_case("a = 'true'; a[1] = '234'; print a", "t234ue")
  run_test_case("a = 'true'; a += 'tu'; print a", "truetu")
  run_test_case("a = 1,2,3,4,5,6,7,8; print a limit 3", lines("1", "2", "3"))
  run_test_case("a = 1,2,3,4,5,6,7,8; print a skip 1 every 2 limit 3", lines("2", "4", "6"))
  run_test_case("a = 0,1,2,3,4,5,6,7,8; print a where this > 5", lines("6", "7", "8"))
  run_test_case("a = 3,4,5; print a where this != 4", lines("3", "5"))
  run_test_case("a = 3,4,5; print a where this = 4", "4")
  run_test_case("a = 5; b = a; print a; print b", lines("5", "5"))
  run_test_case("a = 3 DAys; print a", "3 days")
  run_test_case("a = 3 DAys; print a + a", "6 days")
  run_test_case("a = 3 DAys; print a - a", "no period")
  run_test_case("a = 3 june 2010; print A", "3 June 2010")
  run_test_case("a = 13; a++; print a", "14")
  run_test_case("a = 13; a--; print a", "12")
  run_test_case("a = -13; a++; print a", "-12")
  run_test_case("a = -13; a--; print a", "-14")
  run_test_case("a = 10.2; a++; print a", "11.2")
  run_test_case("a = 10.3; a--; print a", "9.3")
  run_test_case("a = -13.4; a++; print a", "-12.4")
  run_test_case("a = -108.24; a--; print a", "-109.24")
  run_test_case("a = 12 june 2004; a.day++; print a", "13 June 2004")
  run_test_case("a = 12 june 2004; a.day--; print a", "11 June 2004")
  run_test_case("a = 30 june 2004; a.day++; print a", "1 July 2004")
  run_test_case("a = 30 june 2004; a.day--; print a", "29 June 2004")
  run_test_case("a = 12 juNe 2004; a.year++; print a", "12 June 2005")
  run_test_case("a = 12 june 2004; a.year--; print a", "12 June 2003")
  run_test_case("a = 2,3,4; a{print }", lines("2", "3", "4"))
  run_test_case("a = 2,3,4; a{this }", lines("2", "3", "4"))
  run_test_case("a = 2,3,4; a{1 + number(this) * 2 }", lines("5", "7", "9"))
  run_test_case("2,3,4{3 + number(this) * 2 }", lines("7", "9", "11"))
  run_test_case("2,'3',4{3 + this }", lines("32", "33", "34"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by number(this) asc", lines("-2", "1", "3", "6", "23.3", "30"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by number(this) asc limit 5", lines("-2", "1", "3", "6", "23.3"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by number(this) desc skip 2", lines("6", "3", "1", "-2"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by number(this) desc", lines("30", "23.3", "6", "3", "1", "-2"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by number(this) asc limit 3", lines("-2", "1", "3"))
  run_test_case("g = 30, -2, 6, 3,23.3,1; g order by absolute(number(this)) asc", lines("1", "-2", "3", "6", "23.3", "30"))
  run_test_case("print 30, -2, 6, 3,23.3,1 order by absolute(number(this)) asc", lines("1", "-2", "3", "6", "23.3", "30"))
  run_test_case("3 times { print 'hello' }", lines("hello", "hello", "hello"))
  run_test_case("print 'g'; 3 times { print 'hello' } print 'h' ", lines("g", "hello", "hello", "hello", "h"))
  run_test_case("a = 'per', 'un2'; print  'per' in a ", TRUE)
  run_test_case("a = 'Per', 'un2'; print  'per' in a ", FALSE)
  run_test_case("a = 'un2', 'Per'; print  'per' in a ", FALSE)
  run_test_case("a = 'un2', 'per'; print  'per' in a ", TRUE)
  run_test_case("a = 'u', 'per', 'ho'; print  'per' in a ", TRUE)
  run_test_case("a = 'u', 'per', 'ho'; print  'Per' in a ", FALSE)
  run_test_case("a = 'u', 'per', 'Per', 'ho'; print  'Per' in a ", TRUE)
  run_test_case("a = 'u' where false; print  'Per' in a ", FALSE)
  run_test_case("a = 'u' where false; print  '' in a ", FALSE)
  run_test_case("a = 'ag', 'ha'; print  'a' in a ", FALSE)
  run_test_case("a = 'ag', 'ha'; print  'ag' in a ", TRUE)
  run_test_case("a = 1, 2, 36; print  8 in a ", FALSE)
  run_test_case("a = 1, 2, 36; print 36 in a ", TRUE)
  run_test_case("a = 1, 2, 36; print 4-2 in a ", TRUE)
  run_test_case("a = 1, 2, 36; print 4-2.0003 in a ", FALSE)
  run_test_case("a = 1.5, 2.1, 36.8, 6.43; print 3 * 2 + 0.43 in a ", TRUE)
  run_test_case("a = 1.5, 2.1, 36.8, 6.43; print 3 * 2 + 0.44 in a ", FALSE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -36.8 in a ", TRUE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -1.5 in a ", TRUE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -1.6 in a ", FALSE)
  run_test_case("a = 'per', 'un2'; print  'per' not in a ", FALSE)
  run_test_case("a = 'Per', 'un2'; print  'per' not in a ", TRUE)
  run_test_case("a = 'un2', 'Per'; print  'per' not in a ", TRUE)
  run_test_case("a = 'un2', 'per'; print  'per' not in a ", FALSE)
  run_test_case("a = 'u', 'per', 'ho'; print  'per' not in a ", FALSE)
  run_test_case("a = 'u', 'per', 'ho'; print  'Per' not in a ", TRUE)
  run_test_case("a = 'u', 'per', 'Per', 'ho'; print  'Per' not in a ", FALSE)
  run_test_case("a = 'u' where TRUE; print  'Per' not in a ", TRUE)
  run_test_case("a = 'u' where TRUE; print  '' not in a ", TRUE)
  run_test_case("a = 'ag', 'ha'; print  'a' not in a ", TRUE)
  run_test_case("a = 'ag', 'ha'; print  'ag' not in a ", FALSE)
  run_test_case("a = 1, 2, 36; print  8 not in a ", TRUE)
  run_test_case("a = 1, 2, 36; print 36 not in a ", FALSE)
  run_test_case("a = 1, 2, 36; print 4-2 not in a ", FALSE)
  run_test_case("a = 1, 2, 36; print 4-2.0003 not in a ", TRUE)
  run_test_case("a = 1.5, 2.1, 36.8, 6.43; print 3 * 2 + 0.43 not in a ", FALSE)
  run_test_case("a = 1.5, 2.1, 36.8, 6.43; print 3 * 2 + 0.44 not in a ", TRUE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -36.8 not in a ", FALSE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -1.5 not in a ", FALSE)
  run_test_case("a = -1.5, 2.1, -36.8, 6.43; print -1.6 not in a ", TRUE)
  run_test_case("'a'", "a")
  run_test_case("'g' + 't'", "gt")
  run_test_case("''", NOTHING)
  run_test_case("'Perun2'", "Perun2")
  run_test_case("'kąty'", "kąty")
  run_test_case("'Перýн'", "Перýн")
  run_test_case("7", "7")
  run_test_case("27", "27")
  run_test_case(" -7", "-7")
  run_test_case(" -7.7", "-7.7")
  run_test_case("true", TRUE)
  run_test_case("false", FALSE)
  run_test_case("3 days", "3 days")
  run_test_case("12 april 2014", "12 April 2014")
  run_test_case("'pe', 'ru', 'n2'", lines("pe", "ru", "n2"))
  run_test_case("3, 40, 7", lines("3", "40", "7"))
  run_test_case("12 april 2014, 17 june 2014", lines("12 April 2014", "17 June 2014"))
  run_test_case("7 years, 17 months + 1 month", lines("7 years", "18 months"))
  run_test_case("'a' = 'a'", TRUE)
  run_test_case("'' = ''", TRUE)
  run_test_case("'Perun2' = 'Perun2'", TRUE)
  run_test_case("'kąty' = 'kąty'", TRUE)
  run_test_case("'Перýн' = 'Перýн'", TRUE)
  run_test_case("7 = 5 + 2", TRUE)
  run_test_case("27 =30 -3", TRUE)
  run_test_case(" -7 = -(7)", TRUE)
  run_test_case(" -7.7 = -7.7", TRUE)
  run_test_case("true = true", TRUE)
  run_test_case("false = false", TRUE)
  run_test_case("3 days = 3 days", TRUE)
  run_test_case("12 april 2014 = 12 april 2014", TRUE)
  run_test_case("(3, 40, 7) = (3, 40, 7)", TRUE)
  run_test_case("(12 april 2014, 17 june 2014) = (12 april 2014, 17 June 2014)", TRUE)
  run_test_case("(7 years, 17 months + 1 month) = (7 years, 16 months + 2 months)",  TRUE)
  run_test_case("'a' == 'a'", TRUE)
  run_test_case("'' == ''", TRUE)
  run_test_case("'Perun2' == 'Perun2'", TRUE)
  run_test_case("'kąty' == 'kąty'", TRUE)
  run_test_case("'Перýн' == 'Перýн'", TRUE)
  run_test_case("7 == 5 + 2", TRUE)
  run_test_case("27 ==30 -3", TRUE)
  run_test_case(" -7 == -(7)", TRUE)
  run_test_case(" -7.7 == -7.7", TRUE)
  run_test_case("true == true", TRUE)
  run_test_case("false == false", TRUE)
  run_test_case("3 days == 3 days", TRUE)
  run_test_case("12 april 2014 == 12 april 2014", TRUE)
  run_test_case("(3, 40, 7) == (3, 40, 7)", TRUE)
  run_test_case("(12 april 2014, 17 june 2014) == (12 april 2014, 17 June 2014)", TRUE)
  run_test_case("(7 years, 17 months + 1 month) == (7 years, 16 months + 2 months)",  TRUE)
  run_test_case("'a' != 'a'", FALSE)
  run_test_case("'' != ''", FALSE)
  run_test_case("'Perun2' != 'Perun2'", FALSE)
  run_test_case("'kąty' != 'kąty'", FALSE)
  run_test_case("'Перýн' != 'Перýн'", FALSE)
  run_test_case("7 != 5 + 2", FALSE)
  run_test_case("27 !=30 -3", FALSE)
  run_test_case(" -7 != -(7)", FALSE)
  run_test_case(" -7.7 != -7.7", FALSE)
  run_test_case("true != true", FALSE)
  run_test_case("false != false", FALSE)
  run_test_case("3 days != 3 days", FALSE)
  run_test_case("12 april 2014 != 12 april 2014", FALSE)
  run_test_case("(3, 40, 7) != (3, 40, 7)", FALSE)
  run_test_case("(12 april 2014, 17 june 2014) != (12 april 2014, 17 June 2014)", FALSE)
  run_test_case("(7 years, 17 months + 1 month) != (7 years, 16 months + 2 months)",  FALSE)
  run_test_case("'a' < 'a'", FALSE)
  run_test_case("'' < ''", FALSE)
  run_test_case("'Perun2' < 'Perun2'", FALSE)
  run_test_case("'kąty' < 'kąty'", FALSE)
  run_test_case("'Перýн' < 'Перýн'", FALSE)
  run_test_case("7 < 5 + 2", FALSE)
  run_test_case("27 <30 -3", FALSE)
  run_test_case(" -7 < -(7)", FALSE)
  run_test_case(" -7.7 < -7.7", FALSE)
  run_test_case("true < true", FALSE)
  run_test_case("false < false", FALSE)
  run_test_case("3 days < 3 days", FALSE)
  run_test_case("12 april 2014 < 12 april 2014", FALSE)
  run_test_case("(3, 40, 7) < (3, 40, 7)", FALSE)
  run_test_case("(12 april 2014, 17 june 2014) < (12 april 2014, 17 June 2014)", FALSE)
  run_test_case("(7 years, 17 months + 1 month) < (7 years, 16 months + 2 months)",  FALSE)
  run_test_case("'a' > 'a'", FALSE)
  run_test_case("'' > ''", FALSE)
  run_test_case("'Perun2' > 'Perun2'", FALSE)
  run_test_case("'kąty' > 'kąty'", FALSE)
  run_test_case("'Перýн' > 'Перýн'", FALSE)
  run_test_case("7 > 5 + 2", FALSE)
  run_test_case("27 >30 -3", FALSE)
  run_test_case(" -7 > -(7)", FALSE)
  run_test_case(" -7.7 > -7.7", FALSE)
  run_test_case("true > true", FALSE)
  run_test_case("false > false", FALSE)
  run_test_case("3 days > 3 days", FALSE)
  run_test_case("12 april 2014 > 12 april 2014", FALSE)
  run_test_case("(3, 40, 7) > (3, 40, 7)", FALSE)
  run_test_case("(12 april 2014, 17 june 2014) > (12 april 2014, 17 June 2014)", FALSE)
  run_test_case("(7 years, 17 months + 1 month) > (7 years, 16 months + 2 months)",  FALSE)
  run_test_case("('pe', 'ru', 'n2') = ('pe', 'ru', 'n2')", TRUE)
  run_test_case("('pe', 'ru', 'n2') >= ('pe', 'ru', 'n2')", TRUE)
  run_test_case("('pe', 'ru', 'n2') <= ('pe', 'ru', 'n2')", TRUE)
  run_test_case("('pe', 'ru', 'n2') > ('pe', 'ru', 'n2')", FALSE)
  run_test_case("('pe', 'ru', 'n2') < ('pe', 'ru', 'n2')", FALSE)
  run_test_case("('pe', 'ru', 'n2') != ('pe', 'ru', 'n2')", FALSE)
  run_test_case("'a' >= 'a'", TRUE)
  run_test_case("'' >= ''", TRUE)
  run_test_case("'Perun2' >= 'Perun2'", TRUE)
  run_test_case("'kąty' >= 'kąty'", TRUE)
  run_test_case("'Перýн' >= 'Перýн'", TRUE)
  run_test_case("7 >= 5 + 2", TRUE)
  run_test_case("27 >=30 -3", TRUE)
  run_test_case(" -7 >= -(7)", TRUE)
  run_test_case(" -7.7 >= -7.7", TRUE)
  run_test_case("true >= true", TRUE)
  run_test_case("false >= false", TRUE)
  run_test_case("3 days >= 3 days", TRUE)
  run_test_case("12 april 2014 >= 12 april 2014", TRUE)
  run_test_case("(3, 40, 7) >= (3, 40, 7)", TRUE)
  run_test_case("(12 april 2014, 17 june 2014) >= (12 april 2014, 17 June 2014)", TRUE)
  run_test_case("(7 years, 17 months + 1 month) >= (7 years, 16 months + 2 months)", TRUE)
  run_test_case("'a' <= 'a'", TRUE)
  run_test_case("'' <= ''", TRUE)
  run_test_case("'Perun2' <= 'Perun2'", TRUE)
  run_test_case("'kąty' <= 'kąty'", TRUE)
  run_test_case("'Перýн' <= 'Перýн'", TRUE)
  run_test_case("7 <= 5 + 2", TRUE)
  run_test_case("27 <=30 -3", TRUE)
  run_test_case(" -7 <= -(7)", TRUE)
  run_test_case(" -7.7 <= -7.7", TRUE)
  run_test_case("true <= TRUE", TRUE)
  run_test_case("false <= false", TRUE)
  run_test_case("3 days <= 3 days", TRUE)
  run_test_case("12 april 2014 <= 12 april 2014", TRUE)
  run_test_case("(3, 40, 7) <= (3, 40, 7)", TRUE)
  run_test_case("(12 april 2014, 17 june 2014) <= (12 april 2014, 17 June 2014)", TRUE)
  run_test_case("(7 years, 17 months + 1 month) <= (7 years, 16 months + 2 months)", TRUE)
  run_test_case("2 + 3", "5")
  run_test_case("2.5 + 3", "5.5")
  run_test_case("2 + 3.75", "5.75")
  run_test_case("2.5 + 3.75", "6.25")
  run_test_case("-2 + 3", "1")
  run_test_case("-2.5 + 3", "0.5")
  run_test_case("-2 + 3.75", "1.75")
  run_test_case("-2.5 + 3.75", "1.25")
  run_test_case("2 + -3", "-1")
  run_test_case("2.5 + -3", "-0.5")
  run_test_case("2 + -3.75", "-1.75")
  run_test_case("2.5 + -3.75", "-1.25")
  run_test_case("-2 + -3", "-5")
  run_test_case("-2.5 + -3", "-5.5")
  run_test_case("-2 + -3.75", "-5.75")
  run_test_case("-2.5 + -3.75", "-6.25")
  run_test_case("2 - 3", "-1")
  run_test_case("2.5 - 3", "-0.5")
  run_test_case("2 - 3.75", "-1.75")
  run_test_case("2.5 - 3.75", "-1.25")
  run_test_case("-2 - 3", "-5")
  run_test_case("-2.5 - 3", "-5.5")
  run_test_case("-2 - 3.75", "-5.75")
  run_test_case("-2.5 - 3.75", "-6.25")
  run_test_case("2 * 3", "6")
  run_test_case("2.5 * 3", "7.5")
  run_test_case("2 * 3.75", "7.5")
  run_test_case("2.5 * 3.75", "9.375")
  run_test_case("-2 * 3", "-6")
  run_test_case("-2.5 * 3", "-7.5")
  run_test_case("-2 * 3.75", "-7.5")
  run_test_case("-2.5 * 3.75", "-9.375")
  run_test_case("2 * -3", "-6")
  run_test_case("2.5 * -3", "-7.5")
  run_test_case("2 * -3.75", "-7.5")
  run_test_case("2.5 * -3.75", "-9.375")
  run_test_case("-2 * -3", "6")
  run_test_case("-2.5 * -3", "7.5")
  run_test_case("-2 * -3.75", "7.5")
  run_test_case("-2.5 * -3.75", "9.375")
  run_test_case("2 / 5", "0.4")
  run_test_case("2.5 / 5", "0.5")
  run_test_case("2 / 2.5", "0.8")
  run_test_case("4.5 / 2.5", "1.8")
  run_test_case("20 / 5", "4")
  run_test_case("25 / 5", "5")
  run_test_case("20 / 2.5", "8")
  run_test_case("45 / 2.5", "18")
  run_test_case("6.9 / 2.3", "3")
  run_test_case("0.0069 / 0.0023", "3")
  run_test_case("-2 / 5", "-0.4")
  run_test_case("-2.5 / 5", "-0.5")
  run_test_case("-2 / 2.5", "-0.8")
  run_test_case("-4.5 / 2.5", "-1.8")
  run_test_case("-20 / 5", "-4")
  run_test_case("-25 / 5", "-5")
  run_test_case("-20 / 2.5", "-8")
  run_test_case("-45 / 2.5", "-18")
  run_test_case("-6.9 / 2.3", "-3")
  run_test_case("-0.0069 / 0.0023", "-3")
  run_test_case("2 / -5", "-0.4")
  run_test_case("2.5 / -5", "-0.5")
  run_test_case("2 / -2.5", "-0.8")
  run_test_case("4.5 / -2.5", "-1.8")
  run_test_case("20 / -5", "-4")
  run_test_case("25 / -5", "-5")
  run_test_case("20 / -2.5", "-8")
  run_test_case("45 / -2.5", "-18")
  run_test_case("6.9 / -2.3", "-3")
  run_test_case("0.0069 / -0.0023", "-3")
  run_test_case("-2 / -5", "0.4")
  run_test_case("-2.5 / -5", "0.5")
  run_test_case("-2 / -2.5", "0.8")
  run_test_case("-4.5 / -2.5", "1.8")
  run_test_case("-20 / -5", "4")
  run_test_case("-25 / -5", "5")
  run_test_case("-20 / -2.5", "8")
  run_test_case("-45 / -2.5", "18")
  run_test_case("-6.9 / -2.3", "3")
  run_test_case("-0.0069 / -0.0023", "3")
  run_test_case("2 % 3", "2")
  run_test_case("13 % 3", "1")
  run_test_case("15 % 5", "0")
  run_test_case("13 % 3.5", "2.5")
  run_test_case("14 % 3.5", "0")
  run_test_case("14.5 % 3.5", "0.5")
  run_test_case("13.23 % 3", "1.23")
  run_test_case("2 % -3", "2")
  run_test_case("13 % -3", "1")
  run_test_case("15 % -5", "0")
  run_test_case("13 % -3.5", "2.5")
  run_test_case("14 % -3.5", "0")
  run_test_case("14.5 % -3.5", "0.5")
  run_test_case("13.23 % -3", "1.23")
  run_test_case("-2 % 3", "-2")
  run_test_case("-13 % 3", "-1")
  run_test_case("-15 % 5", "0")
  run_test_case("-13 % 3.5", "-2.5")
  run_test_case("-14 % 3.5", "0")
  run_test_case("-14.5 % 3.5", "-0.5")
  run_test_case("-13.23 % 3", "-1.23")
  run_test_case("-2 % -3", "-2")
  run_test_case("-13 % -3", "-1")
  run_test_case("-15 % -5", "0")
  run_test_case("-13 % -3.5", "-2.5")
  run_test_case("-14 % -3.5", "0")
  run_test_case("-14.5 % -3.5", "-0.5")
  run_test_case("-13.23 % -3", "-1.23")
  run_test_case("5 / 1", "5")
  run_test_case("5.23 / 1", "5.23")
  run_test_case("5 / 0", NAN)
  run_test_case("5.23 / 0", NAN)
  run_test_case("5 / -0", NAN)
  run_test_case("5.23 / -0", NAN)
  run_test_case("-5 / 1", "-5")
  run_test_case("-5.23 / 1", "-5.23")
  run_test_case("-5 / 0", NAN)
  run_test_case("-5.23 / 0", NAN)
  run_test_case("-5 / -0", NAN)
  run_test_case("-5.23 / -0", NAN)
  run_test_case("5 % 1", "0")
  run_test_case("5.23 % 1", "0.23")
  run_test_case("5 % 0", NAN)
  run_test_case("5.23 % 0", NAN)
  run_test_case("5 % -0", NAN)
  run_test_case("5.23 % -0", NAN)
  run_test_case("-5 % 1", "0")
  run_test_case("-5.23 % 1", "-0.23")
  run_test_case("-5 % 0", NAN)
  run_test_case("-5.23 % 0", NAN)
  run_test_case("-5 % -0", NAN)
  run_test_case("-5.23 % -0", NAN)
  run_test_case("2 + nan", NAN)
  run_test_case("2.5 + nan", NAN)
  run_test_case("2 + -nan", NAN)
  run_test_case("2.5 + -nan", NAN)
  run_test_case("nan + 3", NAN)
  run_test_case("-nan + 3", NAN)
  run_test_case("nan + 3.23", NAN)
  run_test_case("-nan + 3.23", NAN)
  run_test_case("nan + nan", NAN)
  run_test_case("nan + -nan", NAN)
  run_test_case("-nan + -nan", NAN)
  run_test_case("-nan + nan", NAN)
  run_test_case("2 - nan", NAN)
  run_test_case("2.5 - nan", NAN)
  run_test_case("2 -nan", NAN)
  run_test_case("2.5 - nan", NAN)
  run_test_case("nan - 3", NAN)
  run_test_case("-nan - 3", NAN)
  run_test_case("nan - 3.23", NAN)
  run_test_case("-nan - 3.23", NAN)
  run_test_case("nan -(- nan)", NAN)
  run_test_case("-nan - nan", NAN)
  run_test_case("2 * nan", NAN)
  run_test_case("2.5 * nan", NAN)
  run_test_case("2 * nan", NAN)
  run_test_case("2.5 * nan", NAN)
  run_test_case("nan * 3", NAN)
  run_test_case("-nan * 3", NAN)
  run_test_case("nan * 3.23", NAN)
  run_test_case("-nan * 3.23", NAN)
  run_test_case("nan * nan", NAN)
  run_test_case("nan * -nan", NAN)
  run_test_case("-nan * -nan", NAN)
  run_test_case("-nan * nan", NAN)
  run_test_case("2 / nan", NAN)
  run_test_case("2.5 / nan", NAN)
  run_test_case("2 / nan", NAN)
  run_test_case("2.5 / nan", NAN)
  run_test_case("nan / 3", NAN)
  run_test_case("nan / 0", NAN)
  run_test_case("nan / -12312434", NAN)
  run_test_case("-nan / 3", NAN)
  run_test_case("nan / 3.23", NAN)
  run_test_case("-nan / 3.23", NAN)
  run_test_case("nan / nan", NAN)
  run_test_case("nan / -nan", NAN)
  run_test_case("-nan / -nan", NAN)
  run_test_case("-nan / nan", NAN)
  run_test_case("2 % nan", NAN)
  run_test_case("2.5 % nan", NAN)
  run_test_case("2 % nan", NAN)
  run_test_case("2.5 % nan", NAN)
  run_test_case("nan % 3", NAN)
  run_test_case("-nan % 3", NAN)
  run_test_case("nan % 3.23", NAN)
  run_test_case("-nan % 3.23", NAN)
  run_test_case("nan % nan", NAN)
  run_test_case("nan % -nan", NAN)
  run_test_case("-nan % -nan", NAN)
  run_test_case("-nan % nan", NAN)
  run_test_case("n = 2; n += 3; n", "5")
  run_test_case("n = 2; n += 3.2; n", "5.2")
  run_test_case("n = 2.25; n += 3; n", "5.25")
  run_test_case("n = 2.25; n += 3.05; n", "5.3")
  run_test_case("n = -2; n += 3; n", "1")
  run_test_case("n = -2; n += 3.2; n", "1.2")
  run_test_case("n = -2.25; n += 3; n", "0.75")
  run_test_case("n = -2.25; n += 3.05; n", "0.8")
  run_test_case("n = 2; n += -3; n", "-1")
  run_test_case("n = 2; n += -3.2; n", "-1.2")
  run_test_case("n = 2.25; n += -3; n", "-0.75")
  run_test_case("n = 2.25; n += -3.05; n", "-0.8")
  run_test_case("n = -2; n += -3; n", "-5")
  run_test_case("n = -2; n += -3.2; n", "-5.2")
  run_test_case("n = -2.25; n += -3; n", "-5.25")
  run_test_case("n = -2.25; n += -3.05; n", "-5.3")
  run_test_case("n = 2; n -= 3; n", "-1")
  run_test_case("n = 2; n -= 3.2; n", "-1.2")
  run_test_case("n = 2.25; n -= 3; n", "-0.75")
  run_test_case("n = 2.25; n -= 3.05; n", "-0.8")
  run_test_case("n = -2; n -= 3; n", "-5")
  run_test_case("n = -2; n -= 3.2; n", "-5.2")
  run_test_case("n = -2.25; n -= 3; n", "-5.25")
  run_test_case("n = -2.25; n -= 3.05; n", "-5.3")
  run_test_case("n = 2; n -= -3; n", "5")
  run_test_case("n = 2; n -= -3.2; n", "5.2")
  run_test_case("n = 2.25; n -= -3; n", "5.25")
  run_test_case("n = 2.25; n -= -3.05; n", "5.3")
  run_test_case("n = -2; n -= -3; n", "1")
  run_test_case("n = -2; n -= -3.2; n", "1.2")
  run_test_case("n = -2.25; n -= -3; n", "0.75")
  run_test_case("n = -2.25; n -= -3.05; n", "0.8")
  run_test_case("n = 2; n *= 3; n", "6")
  run_test_case("n = 2; n *= -3; n", "-6")
  run_test_case("n = -2; n *= 3; n", "-6")
  run_test_case("n = -2; n *= -3; n", "6")
  run_test_case("n = 2; n *= 3.5; n", "7")
  run_test_case("n = 2; n *= -3.5; n", "-7")
  run_test_case("n = -2; n *= 3.5; n", "-7")
  run_test_case("n = -2; n *= -3.5; n", "7")
  run_test_case("n = 2.5; n *= 3.5; n", "8.75")
  run_test_case("n = 2.5; n *= -3.5; n", "-8.75")
  run_test_case("n = -2.5; n *= 3.5; n", "-8.75")
  run_test_case("n = -2.5; n *= -3.5; n", "8.75")
  run_test_case("n = 2; n *= 0; n", "0")
  run_test_case("n = 2.5; n *= 0; n", "0")
  run_test_case("n = 2; n *= -0; n", "0")
  run_test_case("n = -2.5; n *= -0; n", "0")
  run_test_case("n = 5; n /= 2; n", "2.5")
  run_test_case("n = -5; n /= 2; n", "-2.5")
  run_test_case("n = 5; n /= -2; n", "-2.5")
  run_test_case("n = -5; n /= -2; n", "2.5")
  run_test_case("n = 5; n /= 2.5; n", "2")
  run_test_case("n = -5; n /= 2.5; n", "-2")
  run_test_case("n = 5; n /= -2.5; n", "-2")
  run_test_case("n = -5; n /= -2.5; n", "2")
  run_test_case("n = 7.5; n /= 2.5; n", "3")
  run_test_case("n = -7.5; n /= 2.5; n", "-3")
  run_test_case("n = 7.5; n /= -2.5; n", "-3")
  run_test_case("n = -7.5; n /= -2.5; n", "3")
  run_test_case("n = 50; n /= 2; n", "25")
  run_test_case("n = -50; n /= 2; n", "-25")
  run_test_case("n = 50; n /= -2; n", "-25")
  run_test_case("n = -50; n /= -2; n", "25")
  run_test_case("n = 5; n /= 0; n, n", lines(NAN, NAN))
  run_test_case("n = 5.2; n /= 0; n, n", lines(NAN, NAN))
  run_test_case("n = -5; n /= 0; n, n", lines(NAN, NAN))
  run_test_case("n = -5.2; n /= 0; n, n", lines(NAN, NAN))
  run_test_case("n = 5; n %= 2; n", "1")
  run_test_case("n = -5; n %= 2; n", "-1")
  run_test_case("n = 5; n %= -2; n", "1")
  run_test_case("n = -5; n %= -2; n", "-1")
  run_test_case("n = 5; n %= 2.7; n", "2.3")
  run_test_case("n = -5; n %= 2.7; n", "-2.3")
  run_test_case("n = 5; n %= -2.7; n", "2.3")
  run_test_case("n = -5; n %= -2.7; n", "-2.3")
  run_test_case("n = 5.1; n %= 2; n", "1.1")
  run_test_case("n = -5.1; n %= 2; n", "-1.1")
  run_test_case("n = 5.1; n %= -2; n", "1.1")
  run_test_case("n = -5.1; n %= -2; n", "-1.1")
  run_test_case("n = 5.1; n %= 2.3; n", "0.5")
  run_test_case("n = -5.1; n %= 2.3; n", "-0.5")
  run_test_case("n = 5.1; n %= -2.3; n", "0.5")
  run_test_case("n = -5.1; n %= -2.3; n", "-0.5")
  run_test_case("n = 0; n %= 2; n", "0")
  run_test_case("n = 0; n %= -2; n", "0")
  run_test_case("n = 0; n %= 2.3; n", "0")
  run_test_case("n = 0; n %= -2.3; n", "0")
  run_test_case("n = -0; n %= 2; n", "0")
  run_test_case("n = -0; n %= -2; n", "0")
  run_test_case("n = -0; n %= 2.3; n", "0")
  run_test_case("n = -0; n %= -2.3; n", "0")
  run_test_case("n = 0; n %= 0; n", NAN)
  run_test_case("n = 2; n %= 0; n", NAN)
  run_test_case("n = 2.3; n %= 0; n", NAN)
  run_test_case("n = -2; n %= 0; n", NAN)
  run_test_case("n = -2.3; n %= 0; n", NAN)
  run_test_case("n = 0; n %= -0; n", NAN)
  run_test_case("n = 2; n %= -0; n", NAN)
  run_test_case("n = 2.3; n %= -0; n", NAN)
  run_test_case("n = -2; n %= -0; n", NAN)
  run_test_case("n = -2.3; n %= -0; n", NAN)
  run_test_case("n = nan; n += 3; n", NAN)
  run_test_case("n = 2; n += nan; n", NAN)
  run_test_case("n = nan; n += nan; n", NAN)
  run_test_case("n = nan; n += 3.2; n", NAN)
  run_test_case("n = 2; n += nan; n", NAN)
  run_test_case("n = nan; n += nan; n", NAN)
  run_test_case("n = nan; n += 3; n", NAN)
  run_test_case("n = 2.25; n += nan; n", NAN)
  run_test_case("n = nan; n += nan; n", NAN)
  run_test_case("n = nan; n += 3.05; n", NAN)
  run_test_case("n = 2.25; n += nan; n", NAN)
  run_test_case("n = nan; n += nan; n", NAN)
  run_test_case("n = -nan; n += 3; n", NAN)
  run_test_case("n = -2; n += nan; n", NAN)
  run_test_case("n = -nan; n += nan; n", NAN)
  run_test_case("n = -nan; n += 3.2; n", NAN)
  run_test_case("n = -2; n += nan; n", NAN)
  run_test_case("n = -nan; n += nan; n", NAN)
  run_test_case("n = -nan; n += 3; n", NAN)
  run_test_case("n = -2.25; n += nan; n", NAN)
  run_test_case("n = -nan; n += nan; n", NAN)
  run_test_case("n = -nan; n += 3.05; n", NAN)
  run_test_case("n = -2.25; n += nan; n", NAN)
  run_test_case("n = -nan; n += nan; n", NAN)
  run_test_case("n = nan; n += -3; n", NAN)
  run_test_case("n = 2; n += -nan; n", NAN)
  run_test_case("n = nan; n += -nan; n", NAN)
  run_test_case("n = nan; n += -3.2; n", NAN)
  run_test_case("n = 2; n += -nan; n", NAN)
  run_test_case("n = nan; n += -nan; n", NAN)
  run_test_case("n = nan; n += -3; n", NAN)
  run_test_case("n = 2.25; n += -nan; n", NAN)
  run_test_case("n = nan; n += -nan; n", NAN)
  run_test_case("n = nan; n += -3.05; n", NAN)
  run_test_case("n = 2.25; n += -nan; n", NAN)
  run_test_case("n = nan; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -3; n", NAN)
  run_test_case("n = -2; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -3.2; n", NAN)
  run_test_case("n = -2; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -3; n", NAN)
  run_test_case("n = -2.25; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -3.05; n", NAN)
  run_test_case("n = -2.25; n += -nan; n", NAN)
  run_test_case("n = -nan; n += -nan; n", NAN)
  run_test_case("n = nan; n -= 3; n", NAN)
  run_test_case("n = 2; n -= nan; n", NAN)
  run_test_case("n = nan; n -= nan; n", NAN)
  run_test_case("n = nan; n -= 3.2; n", NAN)
  run_test_case("n = 2; n -= nan; n", NAN)
  run_test_case("n = nan; n -= nan; n", NAN)
  run_test_case("n = nan; n -= 3; n", NAN)
  run_test_case("n = 2.25; n -= nan; n", NAN)
  run_test_case("n = nan; n -= nan; n", NAN)
  run_test_case("n = nan; n -= 3.05; n", NAN)
  run_test_case("n = 2.25; n -= nan; n", NAN)
  run_test_case("n = nan; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= 3; n", NAN)
  run_test_case("n = -2; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= 3.2; n", NAN)
  run_test_case("n = -2; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= 3; n", NAN)
  run_test_case("n = -2.25; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= 3.05; n", NAN)
  run_test_case("n = -2.25; n -= nan; n", NAN)
  run_test_case("n = -nan; n -= nan; n", NAN)
  run_test_case("n = nan; n -= -3; n", NAN)
  run_test_case("n = 2; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -3.2; n", NAN)
  run_test_case("n = 2; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -3; n", NAN)
  run_test_case("n = 2.25; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -3.05; n", NAN)
  run_test_case("n = 2.25; n -= -nan; n", NAN)
  run_test_case("n = nan; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -3; n", NAN)
  run_test_case("n = -2; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -3.2; n", NAN)
  run_test_case("n = -2; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -3; n", NAN)
  run_test_case("n = -2.25; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -3.05; n", NAN)
  run_test_case("n = -2.25; n -= -nan; n", NAN)
  run_test_case("n = -nan; n -= -nan; n", NAN)
  run_test_case("n = nan; n *= 3; n", NAN)
  run_test_case("n = 2; n *= nan; n", NAN)
  run_test_case("n = nan; n *= nan; n", NAN)
  run_test_case("n = nan; n *= 3.2; n", NAN)
  run_test_case("n = 2; n *= nan; n", NAN)
  run_test_case("n = nan; n *= nan; n", NAN)
  run_test_case("n = nan; n *= 3; n", NAN)
  run_test_case("n = 2.25; n *= nan; n", NAN)
  run_test_case("n = nan; n *= nan; n", NAN)
  run_test_case("n = nan; n *= 3.05; n", NAN)
  run_test_case("n = 2.25; n *= nan; n", NAN)
  run_test_case("n = nan; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= 3; n", NAN)
  run_test_case("n = -2; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= 3.2; n", NAN)
  run_test_case("n = -2; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= 3; n", NAN)
  run_test_case("n = -2.25; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= 3.05; n", NAN)
  run_test_case("n = -2.25; n *= nan; n", NAN)
  run_test_case("n = -nan; n *= nan; n", NAN)
  run_test_case("n = nan; n *= -3; n", NAN)
  run_test_case("n = 2; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -3.2; n", NAN)
  run_test_case("n = 2; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -3; n", NAN)
  run_test_case("n = 2.25; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -3.05; n", NAN)
  run_test_case("n = 2.25; n *= -nan; n", NAN)
  run_test_case("n = nan; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -3; n", NAN)
  run_test_case("n = -2; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -3.2; n", NAN)
  run_test_case("n = -2; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -3; n", NAN)
  run_test_case("n = -2.25; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -3.05; n", NAN)
  run_test_case("n = -2.25; n *= -nan; n", NAN)
  run_test_case("n = -nan; n *= -nan; n", NAN)
  run_test_case("n = nan; n /= 3; n", NAN)
  run_test_case("n = 2; n /= nan; n", NAN)
  run_test_case("n = nan; n /= nan; n", NAN)
  run_test_case("n = nan; n /= 3.2; n", NAN)
  run_test_case("n = 2; n /= nan; n", NAN)
  run_test_case("n = nan; n /= nan; n", NAN)
  run_test_case("n = nan; n /= 3; n", NAN)
  run_test_case("n = 2.25; n /= nan; n", NAN)
  run_test_case("n = nan; n /= nan; n", NAN)
  run_test_case("n = nan; n /= 3.05; n", NAN)
  run_test_case("n = 2.25; n /= nan; n", NAN)
  run_test_case("n = nan; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= 3; n", NAN)
  run_test_case("n = -2; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= 3.2; n", NAN)
  run_test_case("n = -2; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= 3; n", NAN)
  run_test_case("n = -2.25; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= 3.05; n", NAN)
  run_test_case("n = -2.25; n /= nan; n", NAN)
  run_test_case("n = -nan; n /= nan; n", NAN)
  run_test_case("n = nan; n /= -3; n", NAN)
  run_test_case("n = 2; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -3.2; n", NAN)
  run_test_case("n = 2; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -3; n", NAN)
  run_test_case("n = 2.25; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -3.05; n", NAN)
  run_test_case("n = 2.25; n /= -nan; n", NAN)
  run_test_case("n = nan; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -3; n", NAN)
  run_test_case("n = -2; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -3.2; n", NAN)
  run_test_case("n = -2; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -3; n", NAN)
  run_test_case("n = -2.25; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -3.05; n", NAN)
  run_test_case("n = -2.25; n /= -nan; n", NAN)
  run_test_case("n = -nan; n /= -nan; n", NAN)
  run_test_case("n = nan; n %= 3; n", NAN)
  run_test_case("n = 2; n %= nan; n", NAN)
  run_test_case("n = nan; n %= nan; n", NAN)
  run_test_case("n = nan; n %= 3.2; n", NAN)
  run_test_case("n = 2; n %= nan; n", NAN)
  run_test_case("n = nan; n %= nan; n", NAN)
  run_test_case("n = nan; n %= 3; n", NAN)
  run_test_case("n = 2.25; n %= nan; n", NAN)
  run_test_case("n = nan; n %= nan; n", NAN)
  run_test_case("n = nan; n %= 3.05; n", NAN)
  run_test_case("n = 2.25; n %= nan; n", NAN)
  run_test_case("n = nan; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= 3; n", NAN)
  run_test_case("n = -2; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= 3.2; n", NAN)
  run_test_case("n = -2; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= 3; n", NAN)
  run_test_case("n = -2.25; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= 3.05; n", NAN)
  run_test_case("n = -2.25; n %= nan; n", NAN)
  run_test_case("n = -nan; n %= nan; n", NAN)
  run_test_case("n = nan; n %= -3; n", NAN)
  run_test_case("n = 2; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -3.2; n", NAN)
  run_test_case("n = 2; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -3; n", NAN)
  run_test_case("n = 2.25; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -3.05; n", NAN)
  run_test_case("n = 2.25; n %= -nan; n", NAN)
  run_test_case("n = nan; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -3; n", NAN)
  run_test_case("n = -2; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -3.2; n", NAN)
  run_test_case("n = -2; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -3; n", NAN)
  run_test_case("n = -2.25; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -3.05; n", NAN)
  run_test_case("n = -2.25; n %= -nan; n", NAN)
  run_test_case("n = -nan; n %= -nan; n", NAN)
  run_test_case("print 2 = -20", FALSE)
  run_test_case("print 2 = 0", FALSE)
  run_test_case("print 2 = 1", FALSE)
  run_test_case("print 2 = 2", TRUE)
  run_test_case("print 2 = 3", FALSE)
  run_test_case("print 2 = -20.34", FALSE)
  run_test_case("print 2 = 1.3", FALSE)
  run_test_case("print 2 = 2.45", FALSE)
  run_test_case("print 2 = 3.67", FALSE)
  run_test_case("print 2.34 = -20", FALSE)
  run_test_case("print 2.34 = 0", FALSE)
  run_test_case("print 2.34 = 1", FALSE)
  run_test_case("print 2.34 = 2", FALSE)
  run_test_case("print 2.34 = 3", FALSE)
  run_test_case("print 2.34 = -20.34", FALSE)
  run_test_case("print 2.34 = 0", FALSE)
  run_test_case("print 2.34 = 1.34", FALSE)
  run_test_case("print 2.34 = 2.34", TRUE)
  run_test_case("print 2.34 = 3.34", FALSE)
  run_test_case("print 2 != -20", TRUE)
  run_test_case("print 2 != 0", TRUE)
  run_test_case("print 2 != 1", TRUE)
  run_test_case("print 2 != 2", FALSE)
  run_test_case("print 2 != 3", TRUE)
  run_test_case("print 2 != -20.34", TRUE)
  run_test_case("print 2 != 1.3", TRUE)
  run_test_case("print 2 != 2.45", TRUE)
  run_test_case("print 2 != 3.67", TRUE)
  run_test_case("print 2.34 != -20", TRUE)
  run_test_case("print 2.34 != 0", TRUE)
  run_test_case("print 2.34 != 1", TRUE)
  run_test_case("print 2.34 != 2", TRUE)
  run_test_case("print 2.34 != 3", TRUE)
  run_test_case("print 2.34 != -20.34", TRUE)
  run_test_case("print 2.34 != 0", TRUE)
  run_test_case("print 2.34 != 1.34", TRUE)
  run_test_case("print 2.34 != 2.34", FALSE)
  run_test_case("print 2.34 != 3.34", TRUE)
  run_test_case("print 2 >= -20", TRUE)
  run_test_case("print 2 >= 0", TRUE)
  run_test_case("print 2 >= 1", TRUE)
  run_test_case("print 2 >= 2", TRUE)
  run_test_case("print 2 >= 3", FALSE)
  run_test_case("print 2 >= -20.34", TRUE)
  run_test_case("print 2 >= 1.3", TRUE)
  run_test_case("print 2 >= 2.45", FALSE)
  run_test_case("print 2 >= 3.67", FALSE)
  run_test_case("print 2.34 >= -20", TRUE)
  run_test_case("print 2.34 >= 0", TRUE)
  run_test_case("print 2.34 >= 1", TRUE)
  run_test_case("print 2.34 >= 2", TRUE)
  run_test_case("print 2.34 >= 3", FALSE)
  run_test_case("print 2.34 >= -20.34", TRUE)
  run_test_case("print 2.34 >= 0", TRUE)
  run_test_case("print 2.34 >= 1.34", TRUE)
  run_test_case("print 2.34 >= 2.34", TRUE)
  run_test_case("print 2.34 >= 3.34", FALSE)
  run_test_case("print 2 > -20", TRUE)
  run_test_case("print 2 > 0", TRUE)
  run_test_case("print 2 > 1", TRUE)
  run_test_case("print 2 > 2", FALSE)
  run_test_case("print 2 > 3", FALSE)
  run_test_case("print 2 > -20.34", TRUE)
  run_test_case("print 2 > 1.3", TRUE)
  run_test_case("print 2 > 2.45", FALSE)
  run_test_case("print 2 > 3.67", FALSE)
  run_test_case("print 2.34 > -20", TRUE)
  run_test_case("print 2.34 > 0", TRUE)
  run_test_case("print 2.34 > 1", TRUE)
  run_test_case("print 2.34 > 2", TRUE)
  run_test_case("print 2.34 > 3", FALSE)
  run_test_case("print 2.34 > -20.34", TRUE)
  run_test_case("print 2.34 > 0", TRUE)
  run_test_case("print 2.34 > 1.34", TRUE)
  run_test_case("print 2.34 > 2.34", FALSE)
  run_test_case("print 2.34 > 3.34", FALSE)
  run_test_case("print 2 < -20", FALSE)
  run_test_case("print 2 < 0", FALSE)
  run_test_case("print 2 < 1", FALSE)
  run_test_case("print 2 < 2", FALSE)
  run_test_case("print 2 < 3", TRUE)
  run_test_case("print 2 < -20.34", FALSE)
  run_test_case("print 2 < 1.3", FALSE)
  run_test_case("print 2 < 2.45", TRUE)
  run_test_case("print 2 < 3.67", TRUE)
  run_test_case("print 2.34 < -20", FALSE)
  run_test_case("print 2.34 < 0", FALSE)
  run_test_case("print 2.34 < 1", FALSE)
  run_test_case("print 2.34 < 2", FALSE)
  run_test_case("print 2.34 < 3", TRUE)
  run_test_case("print 2.34 < -20.34", FALSE)
  run_test_case("print 2.34 < 0", FALSE)
  run_test_case("print 2.34 < 1.34", FALSE)
  run_test_case("print 2.34 < 2.34", FALSE)
  run_test_case("print 2.34 < 3.34", TRUE)
  run_test_case("print 2 <= -20", FALSE)
  run_test_case("print 2 <= 0", FALSE)
  run_test_case("print 2 <= 1", FALSE)
  run_test_case("print 2 <= 2", TRUE)
  run_test_case("print 2 <= 3", TRUE)
  run_test_case("print 2 <= -20.34", FALSE)
  run_test_case("print 2 <= 1.3", FALSE)
  run_test_case("print 2 <= 2.45", TRUE)
  run_test_case("print 2 <= 3.67", TRUE)
  run_test_case("print 2.34 <= -20", FALSE)
  run_test_case("print 2.34 <= 0", FALSE)
  run_test_case("print 2.34 <= 1", FALSE)
  run_test_case("print 2.34 <= 2", FALSE)
  run_test_case("print 2.34 <= 3", TRUE)
  run_test_case("print 2.34 <= -20.34", FALSE)
  run_test_case("print 2.34 <= 0", FALSE)
  run_test_case("print 2.34 <= 1.34", FALSE)
  run_test_case("print 2.34 <= 2.34", TRUE)
  run_test_case("print 2.34 <= 3.34", TRUE)
  run_test_case("print nan = -20", FALSE)
  run_test_case("print nan = 0", FALSE)
  run_test_case("print nan = 1", FALSE)
  run_test_case("print nan = 2", FALSE)
  run_test_case("print nan = 3", FALSE)
  run_test_case("print nan = -20.34", FALSE)
  run_test_case("print nan = 1.3", FALSE)
  run_test_case("print nan = 2.45", FALSE)
  run_test_case("print nan = 3.67", FALSE)
  run_test_case("print nan = -20", FALSE)
  run_test_case("print nan = 0", FALSE)
  run_test_case("print nan = 1", FALSE)
  run_test_case("print nan = 2", FALSE)
  run_test_case("print nan = 3", FALSE)
  run_test_case("print nan = -20.34", FALSE)
  run_test_case("print nan = 0", FALSE)
  run_test_case("print nan = 1.34", FALSE)
  run_test_case("print nan = 2.34", FALSE)
  run_test_case("print nan = 3.34", FALSE)
  run_test_case("print nan != -20", FALSE)
  run_test_case("print nan != 0", FALSE)
  run_test_case("print nan != 1", FALSE)
  run_test_case("print nan != 2", FALSE)
  run_test_case("print nan != 3", FALSE)
  run_test_case("print nan != -20.34", FALSE)
  run_test_case("print nan != 1.3", FALSE)
  run_test_case("print nan != 2.45", FALSE)
  run_test_case("print nan != 3.67", FALSE)
  run_test_case("print nan != -20", FALSE)
  run_test_case("print nan != 0", FALSE)
  run_test_case("print nan != 1", FALSE)
  run_test_case("print nan != 2", FALSE)
  run_test_case("print nan != 3", FALSE)
  run_test_case("print nan != -20.34", FALSE)
  run_test_case("print nan != 0", FALSE)
  run_test_case("print nan != 1.34", FALSE)
  run_test_case("print nan != 2.34", FALSE)
  run_test_case("print nan != 3.34", FALSE)
  run_test_case("print nan >= -20", FALSE)
  run_test_case("print nan >= 0", FALSE)
  run_test_case("print nan >= 1", FALSE)
  run_test_case("print nan >= 2", FALSE)
  run_test_case("print nan >= 3", FALSE)
  run_test_case("print nan >= -20.34", FALSE)
  run_test_case("print nan >= 1.3", FALSE)
  run_test_case("print nan >= 2.45", FALSE)
  run_test_case("print nan >= 3.67", FALSE)
  run_test_case("print nan >= -20", FALSE)
  run_test_case("print nan >= 0", FALSE)
  run_test_case("print nan >= 1", FALSE)
  run_test_case("print nan >= 2", FALSE)
  run_test_case("print nan >= 3", FALSE)
  run_test_case("print nan >= -20.34", FALSE)
  run_test_case("print nan >= 0", FALSE)
  run_test_case("print nan >= 1.34", FALSE)
  run_test_case("print nan >= 2.34", FALSE)
  run_test_case("print nan >= 3.34", FALSE)
  run_test_case("print nan > -20", FALSE)
  run_test_case("print nan > 0", FALSE)
  run_test_case("print nan > 1", FALSE)
  run_test_case("print nan > 2", FALSE)
  run_test_case("print nan > 3", FALSE)
  run_test_case("print nan > -20.34", FALSE)
  run_test_case("print nan > 1.3", FALSE)
  run_test_case("print nan > 2.45", FALSE)
  run_test_case("print nan > 3.67", FALSE)
  run_test_case("print nan > -20", FALSE)
  run_test_case("print nan > 0", FALSE)
  run_test_case("print nan > 1", FALSE)
  run_test_case("print nan > 2", FALSE)
  run_test_case("print nan > 3", FALSE)
  run_test_case("print nan > -20.34", FALSE)
  run_test_case("print nan > 0", FALSE)
  run_test_case("print nan > 1.34", FALSE)
  run_test_case("print nan > 2.34", FALSE)
  run_test_case("print nan > 3.34", FALSE)
  run_test_case("print nan < -20", FALSE)
  run_test_case("print nan < 0", FALSE)
  run_test_case("print nan < 1", FALSE)
  run_test_case("print nan < 2", FALSE)
  run_test_case("print nan < 3", FALSE)
  run_test_case("print nan < -20.34", FALSE)
  run_test_case("print nan < 1.3", FALSE)
  run_test_case("print nan < 2.45", FALSE)
  run_test_case("print nan < 3.67", FALSE)
  run_test_case("print nan < -20", FALSE)
  run_test_case("print nan < 0", FALSE)
  run_test_case("print nan < 1", FALSE)
  run_test_case("print nan < 2", FALSE)
  run_test_case("print nan < 3", FALSE)
  run_test_case("print nan < -20.34", FALSE)
  run_test_case("print nan < 0", FALSE)
  run_test_case("print nan < 1.34", FALSE)
  run_test_case("print nan < 2.34", FALSE)
  run_test_case("print nan < 3.34", FALSE)
  run_test_case("print nan <= -20", FALSE)
  run_test_case("print nan <= 0", FALSE)
  run_test_case("print nan <= 1", FALSE)
  run_test_case("print nan <= 2", FALSE)
  run_test_case("print nan <= 3", FALSE)
  run_test_case("print nan <= -20.34", FALSE)
  run_test_case("print nan <= 1.3", FALSE)
  run_test_case("print nan <= 2.45", FALSE)
  run_test_case("print nan <= 3.67", FALSE)
  run_test_case("print nan <= -20", FALSE)
  run_test_case("print nan <= 0", FALSE)
  run_test_case("print nan <= 1", FALSE)
  run_test_case("print nan <= 2", FALSE)
  run_test_case("print nan <= 3", FALSE)
  run_test_case("print nan <= -20.34", FALSE)
  run_test_case("print nan <= 0", FALSE)
  run_test_case("print nan <= 1.34", FALSE)
  run_test_case("print nan <= 2.34", FALSE)
  run_test_case("print nan <= 3.34", FALSE)
  run_test_case("print 2 = nan", FALSE)
  run_test_case("print 2.45 = nan", FALSE)
  run_test_case("print nan = 0", FALSE)
  run_test_case("print nan = 0.12", FALSE)
  run_test_case("print nan = nan", FALSE)
  run_test_case("print -2 = nan", FALSE)
  run_test_case("print -2.45 = nan", FALSE)
  run_test_case("print -nan = 0", FALSE)
  run_test_case("print -nan = 0.12", FALSE)
  run_test_case("print -nan = nan", FALSE)
  run_test_case("print 2 = -nan", FALSE)
  run_test_case("print 2.45 = -nan", FALSE)
  run_test_case("print nan = -0.12", FALSE)
  run_test_case("print nan = -nan", FALSE)
  run_test_case("print -2 = -nan", FALSE)
  run_test_case("print -2.45 = -nan", FALSE)
  run_test_case("print -nan = -0.12", FALSE)
  run_test_case("print -nan = -nan", FALSE)
  run_test_case("print 2 == nan", FALSE)
  run_test_case("print 2.45 == nan", FALSE)
  run_test_case("print nan == 0", FALSE)
  run_test_case("print nan == 0.12", FALSE)
  run_test_case("print nan == nan", FALSE)
  run_test_case("print -2 == nan", FALSE)
  run_test_case("print -2.45 == nan", FALSE)
  run_test_case("print -nan == 0", FALSE)
  run_test_case("print -nan == 0.12", FALSE)
  run_test_case("print -nan == nan", FALSE)
  run_test_case("print 2 == -nan", FALSE)
  run_test_case("print 2.45 == -nan", FALSE)
  run_test_case("print nan == -0.12", FALSE)
  run_test_case("print nan == -nan", FALSE)
  run_test_case("print -2 == -nan", FALSE)
  run_test_case("print -2.45 == -nan", FALSE)
  run_test_case("print -nan == -0.12", FALSE)
  run_test_case("print -nan == -nan", FALSE)
  run_test_case("print 2 != nan", FALSE)
  run_test_case("print 2.45 != nan", FALSE)
  run_test_case("print nan != 0", FALSE)
  run_test_case("print nan != 0.12", FALSE)
  run_test_case("print nan != nan", FALSE)
  run_test_case("print -2 != nan", FALSE)
  run_test_case("print -2.45 != nan", FALSE)
  run_test_case("print -nan != 0", FALSE)
  run_test_case("print -nan != 0.12", FALSE)
  run_test_case("print -nan != nan", FALSE)
  run_test_case("print 2 != -nan", FALSE)
  run_test_case("print 2.45 != -nan", FALSE)
  run_test_case("print nan != -0.12", FALSE)
  run_test_case("print nan != -nan", FALSE)
  run_test_case("print -2 != -nan", FALSE)
  run_test_case("print -2.45 != -nan", FALSE)
  run_test_case("print -nan != -0.12", FALSE)
  run_test_case("print -nan != -nan", FALSE)
  run_test_case("print 2 < nan", FALSE)
  run_test_case("print 2.45 < nan", FALSE)
  run_test_case("print nan < 0", FALSE)
  run_test_case("print nan < 0.12", FALSE)
  run_test_case("print nan < nan", FALSE)
  run_test_case("print -2 < nan", FALSE)
  run_test_case("print -2.45 < nan", FALSE)
  run_test_case("print -nan < 0", FALSE)
  run_test_case("print -nan < 0.12", FALSE)
  run_test_case("print -nan < nan", FALSE)
  run_test_case("print 2 < -nan", FALSE)
  run_test_case("print 2.45 < -nan", FALSE)
  run_test_case("print nan < -0.12", FALSE)
  run_test_case("print nan < -nan", FALSE)
  run_test_case("print -2 < -nan", FALSE)
  run_test_case("print -2.45 < -nan", FALSE)
  run_test_case("print -nan < -0.12", FALSE)
  run_test_case("print -nan < -nan", FALSE)
  run_test_case("print 2 <= nan", FALSE)
  run_test_case("print 2.45 <= nan", FALSE)
  run_test_case("print nan <= 0", FALSE)
  run_test_case("print nan <= 0.12", FALSE)
  run_test_case("print nan <= nan", FALSE)
  run_test_case("print -2 <= nan", FALSE)
  run_test_case("print -2.45 <= nan", FALSE)
  run_test_case("print -nan <= 0", FALSE)
  run_test_case("print -nan <= 0.12", FALSE)
  run_test_case("print -nan <= nan", FALSE)
  run_test_case("print 2 <= -nan", FALSE)
  run_test_case("print 2.45 <= -nan", FALSE)
  run_test_case("print nan <= -0.12", FALSE)
  run_test_case("print nan <= -nan", FALSE)
  run_test_case("print -2 <= -nan", FALSE)
  run_test_case("print -2.45 <= -nan", FALSE)
  run_test_case("print -nan <= -0.12", FALSE)
  run_test_case("print -nan <= -nan", FALSE)
  run_test_case("print 2 > nan", FALSE)
  run_test_case("print 2.45 > nan", FALSE)
  run_test_case("print nan > 0", FALSE)
  run_test_case("print nan > 0.12", FALSE)
  run_test_case("print nan > nan", FALSE)
  run_test_case("print -2 > nan", FALSE)
  run_test_case("print -2.45 > nan", FALSE)
  run_test_case("print -nan > 0", FALSE)
  run_test_case("print -nan > 0.12", FALSE)
  run_test_case("print -nan > nan", FALSE)
  run_test_case("print 2 > -nan", FALSE)
  run_test_case("print 2.45 > -nan", FALSE)
  run_test_case("print nan > -0.12", FALSE)
  run_test_case("print nan > -nan", FALSE)
  run_test_case("print -2 > -nan", FALSE)
  run_test_case("print -2.45 > -nan", FALSE)
  run_test_case("print -nan > -0.12", FALSE)
  run_test_case("print -nan > -nan", FALSE)
  run_test_case("print 2 >= nan", FALSE)
  run_test_case("print 2.45 >= nan", FALSE)
  run_test_case("print nan >= 0", FALSE)
  run_test_case("print nan >= 0.12", FALSE)
  run_test_case("print nan >= nan", FALSE)
  run_test_case("print -2 >= nan", FALSE)
  run_test_case("print -2.45 >= nan", FALSE)
  run_test_case("print -nan >= 0", FALSE)
  run_test_case("print -nan >= 0.12", FALSE)
  run_test_case("print -nan >= nan", FALSE)
  run_test_case("print 2 >= -nan", FALSE)
  run_test_case("print 2.45 >= -nan", FALSE)
  run_test_case("print nan >= -0.12", FALSE)
  run_test_case("print nan >= -nan", FALSE)
  run_test_case("print -2 >= -nan", FALSE)
  run_test_case("print -2.45 >= -nan", FALSE)
  run_test_case("print -nan >= -0.12", FALSE)
  run_test_case("print -nan >= -nan", FALSE)
  run_test_case("print never", NEVER)
  run_test_case("print never.year", NAN)
  run_test_case("print never.month", NAN)
  run_test_case("print never.weekday", NAN)
  run_test_case("print never.day", NAN)
  run_test_case("print never.hour", NAN)
  run_test_case("print never.minute", NAN)
  run_test_case("print never.second", NAN)
  run_test_case("print -never.year * (10/0)", NAN)
  run_test_case("print -never.month * (10/0)", NAN)
  run_test_case("print -never.weekday * (10/0)", NAN)
  run_test_case("print -never.day * (10/0)", NAN)
  run_test_case("print -never.hour * (10/0)", NAN)
  run_test_case("print -never.minute * (10/0)", NAN)
  run_test_case("print -never.second * (10/0)", NAN)
  run_test_case("print -never.year * 10k", NAN)
  run_test_case("print -never.month * 10k", NAN)
  run_test_case("print -never.weekday * 10k", NAN)
  run_test_case("print -never.day * 10k", NAN)
  run_test_case("print -never.hour * 10k", NAN)
  run_test_case("print -never.minute * 10k", NAN)
  run_test_case("print -never.second * 10k", NAN)
  run_test_case("2 seconds + 1 second", "3 seconds")
  run_test_case("2 seconds + -1 second", "1 second")
  run_test_case("2 seconds + -2 seconds", "no period")
  run_test_case("2 seconds + -3 seconds", "-1 second")
  run_test_case("2 seconds + -5 seconds", "-3 seconds")
  run_test_case("2 minutes + 1 minute", "3 minutes")
  run_test_case("2 minutes + -1 minute", "1 minute")
  run_test_case("2 minutes + -2 minutes", "no period")
  run_test_case("2 minutes + -3 minutes", "-1 minute")
  run_test_case("2 minutes + -5 minutes", "-3 minutes")
  run_test_case("2 hours + 1 hour", "3 hours")
  run_test_case("2 hours + -1 hour", "1 hour")
  run_test_case("2 hours + -2 hours", "no period")
  run_test_case("2 hours + -3 hours", "-1 hour")
  run_test_case("2 hours + -5 hours", "-3 hours")
  run_test_case("2 days + 1 day", "3 days")
  run_test_case("2 days + -1 day", "1 day")
  run_test_case("2 days + -2 days", "no period")
  run_test_case("2 days + -3 days", "-1 day")
  run_test_case("2 days + -5 days", "-3 days")
  run_test_case("2 weeks + 1 week", "3 weeks")
  run_test_case("2 weeks + -1 week", "1 week")
  run_test_case("2 weeks + -2 weeks", "no period")
  run_test_case("2 weeks + -3 weeks", "-1 week")
  run_test_case("2 weeks + -5 weeks", "-3 weeks")
  run_test_case("2 months + 1 month", "3 months")
  run_test_case("2 months + -1 month", "1 month")
  run_test_case("2 months + -2 months", "no period")
  run_test_case("2 months + -3 months", "-1 month")
  run_test_case("2 months + -5 months", "-3 months")
  run_test_case("2 years + 1 year", "3 years")
  run_test_case("2 years + -1 year", "1 year")
  run_test_case("2 years + -2 years", "no period")
  run_test_case("2 years + -3 years", "-1 year")
  run_test_case("2 years + -5 years", "-3 years")
  run_test_case("2 seconds +  nan seconds", "2 seconds")
  run_test_case("2 seconds +- nan seconds", "2 seconds")
  run_test_case("2 seconds -  nan seconds", "2 seconds")
  run_test_case("2 minutes + nan minutes", "2 minutes")
  run_test_case("2 minutes + nan minutes", "2 minutes")
  run_test_case("2 minutes - nan minutes", "2 minutes")
  run_test_case("2 hours + nan hours", "2 hours")
  run_test_case("2 hours + nan hours", "2 hours")
  run_test_case("2 hours - nan hours", "2 hours")
  run_test_case("2 days + nan days", "2 days")
  run_test_case("2 days + nan days", "2 days")
  run_test_case("2 days - nan days", "2 days")
  run_test_case("2 weeks + nan weeks", "2 weeks")
  run_test_case("2 weeks + nan weeks", "2 weeks")
  run_test_case("2 weeks - nan weeks", "2 weeks")
  run_test_case("2 months + nan months", "2 months")
  run_test_case("2 months + nan months", "2 months")
  run_test_case("2 months - nan months", "2 months")
  run_test_case("2 years + nan years", "2 years")
  run_test_case("2 years + nan years", "2 years")
  run_test_case("2 years - nan years", "2 years")
  run_test_case("nan seconds +  nan seconds", "no period")
  run_test_case("nan seconds +- nan seconds", "no period")
  run_test_case("nan seconds -  nan seconds", "no period")
  run_test_case("nan minutes + nan minutes", "no period")
  run_test_case("nan minutes + nan minutes", "no period")
  run_test_case("nan minutes - nan minutes", "no period")
  run_test_case("nan hours + nan hours", "no period")
  run_test_case("nan hours + nan hours", "no period")
  run_test_case("nan hours - nan hours", "no period")
  run_test_case("nan days + nan days", "no period")
  run_test_case("nan days + nan days", "no period")
  run_test_case("nan days - nan days", "no period")
  run_test_case("nan weeks + nan weeks", "no period")
  run_test_case("nan weeks + nan weeks", "no period")
  run_test_case("nan weeks - nan weeks", "no period")
  run_test_case("nan months + nan months", "no period")
  run_test_case("nan months + nan months", "no period")
  run_test_case("nan months - nan months", "no period")
  run_test_case("nan years + nan years", "no period")
  run_test_case("nan years + nan years", "no period")
  run_test_case("nan years - nan years", "no period")
  run_test_case("3 june 2020 + 1 day", "4 June 2020")
  run_test_case("3 june 2020 + 10 days", "13 June 2020")
  run_test_case("3 june 2020 + nan days", "3 June 2020")
  run_test_case("3 june 2020 + nan seconds", "3 June 2020")
  run_test_case("a = june 2020; a.year", "2020")
  run_test_case("a = june 2020; a.month", "6")
  run_test_case("a = june 2020; a.day", NAN)
  run_test_case("a = june 2020; a.hour", NAN)
  run_test_case("a = june 2020; a.minute", NAN)
  run_test_case("a = june 2020; a.second", NAN)
  run_test_case("a = 12 june 2020; a.year", "2020")
  run_test_case("a = 12 june 2020; a.month", "6")
  run_test_case("a = 12 june 2020; a.day", "12")
  run_test_case("a = 12 june 2020; a.hour", NAN)
  run_test_case("a = 12 june 2020; a.minute", NAN)
  run_test_case("a = 12 june 2020; a.second", NAN)
  run_test_case("a = 12 june 2020, 13:34; a.year", "2020")
  run_test_case("a = 12 june 2020, 13:34; a.month", "6")
  run_test_case("a = 12 june 2020, 13:34; a.day", "12")
  run_test_case("a = 12 june 2020, 13:34; a.hour", "13")
  run_test_case("a = 12 june 2020, 13:34; a.minute", "34")
  run_test_case("a = 12 june 2020, 13:34; a.second", NAN)
  run_test_case("a = 12 june 2020, 13:34:45; a.year", "2020")
  run_test_case("a = 12 june 2020, 13:34:45; a.month", "6")
  run_test_case("a = 12 june 2020, 13:34:45; a.day", "12")
  run_test_case("a = 12 june 2020, 13:34:45; a.hour", "13")
  run_test_case("a = 12 june 2020, 13:34:45; a.minute", "34")
  run_test_case("a = 12 june 2020, 13:34:45; a.second", "45")
  run_test_case("a = june 2020; a.year = 2021   ; a", "June 2021")
  run_test_case("a = june 2020; a.year += 10    ; a", "June 2030")
  run_test_case("a = june 2020; a.year = nan    ; a", "never")
  run_test_case("a = june 2020; a.year += nan   ; a", "never")
  run_test_case("a = june 2020; a.year -= nan   ; a", "never")
  run_test_case("a = june 2020; a.year++        ; a", "June 2021")
  run_test_case("a = june 2020; a.year--        ; a", "June 2019")
  run_test_case("a = june 2020; a.month = 4     ; a", "April 2020")
  run_test_case("a = june 2020; a.month = nan   ; a", "never")
  run_test_case("a = june 2020; a.month = 13    ; a", "never")
  run_test_case("a = june 2020; a.month = 0     ; a", "never")
  run_test_case("a = june 2020; a.month += 2    ; a", "August 2020")
  run_test_case("a = june 2020; a.month -= 2    ; a", "April 2020")
  run_test_case("a = june 2020; a.month += nan  ; a", "never")
  run_test_case("a = june 2020; a.month++       ; a", "July 2020")
  run_test_case("a = june 2020; a.month--       ; a", "May 2020")
  run_test_case("a = june 2020; a.day = 4     ; a", "4 June 2020")
  run_test_case("a = june 2020; a.day = nan   ; a", "never")
  run_test_case("a = june 2020; a.day = 34    ; a", "never")
  run_test_case("a = june 2020; a.day = 0     ; a", "never")
  run_test_case("a = june 2020; a.day += 2    ; a", "2 July 2020")
  run_test_case("a = june 2020; a.day -= 2    ; a", "30 May 2020")
  run_test_case("a = june 2020; a.day += nan  ; a", "never")
  run_test_case("a = june 2020; a.day++       ; a", "1 July 2020")
  run_test_case("a = june 2020; a.day--       ; a", "31 May 2020")
  run_test_case("a = june 2020; a.hour = 4     ; a", "1 June 2020, 04:00")
  run_test_case("a = june 2020; a.hour = nan   ; a", "never")
  run_test_case("a = june 2020; a.hour = 34    ; a", "never")
  run_test_case("a = june 2020; a.hour = -1    ; a", "never")
  run_test_case("a = june 2020; a.hour += 2    ; a", "1 July 2020, 02:00")
  run_test_case("a = june 2020; a.hour -= 2    ; a", "31 May 2020, 22:00")
  run_test_case("a = june 2020; a.hour += nan  ; a", "never")
  run_test_case("a = june 2020; a.hour++       ; a", "1 July 2020, 01:00")
  run_test_case("a = june 2020; a.hour--       ; a", "31 May 2020, 23:00")
  run_test_case("a = june 2020; a.minute = 4     ; a", "1 June 2020, 00:04")
  run_test_case("a = june 2020; a.minute = nan   ; a", "never")
  run_test_case("a = june 2020; a.minute = 334   ; a", "never")
  run_test_case("a = june 2020; a.minute = -34   ; a", "never")
  run_test_case("a = june 2020; a.minute += 2    ; a", "1 July 2020, 00:02")
  run_test_case("a = june 2020; a.minute -= 2    ; a", "31 May 2020, 23:58")
  run_test_case("a = june 2020; a.minute += nan  ; a", "never")
  run_test_case("a = june 2020; a.minute++       ; a", "1 July 2020, 00:01")
  run_test_case("a = june 2020; a.minute--       ; a", "31 May 2020, 23:59")
  run_test_case("a = june 2020; a.second = 4     ; a", "1 June 2020, 00:00:04")
  run_test_case("a = june 2020; a.second = nan   ; a", "never")
  run_test_case("a = june 2020; a.second = 64    ; a", "never")
  run_test_case("a = june 2020; a.second = -2    ; a", "never")
  run_test_case("a = june 2020; a.second += 2    ; a", "1 July 2020, 00:00:02")
  run_test_case("a = june 2020; a.second -= 2    ; a", "31 May 2020, 23:59:58")
  run_test_case("a = june 2020; a.second += nan  ; a", "never")
  run_test_case("a = june 2020; a.second++       ; a", "1 July 2020, 00:00:01")
  run_test_case("a = june 2020; a.second--       ; a", "31 May 2020, 23:59:59")
  run_test_case("a = 3 june 2020; a.year = 2021   ; a", "3 June 2021")
  run_test_case("a = 3 june 2020; a.year += 10    ; a", "3 June 2030")
  run_test_case("a = 3 june 2020; a.year = nan    ; a", "never")
  run_test_case("a = 3 june 2020; a.year += nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.year -= nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.year++        ; a", "3 June 2021")
  run_test_case("a = 3 june 2020; a.year--        ; a", "3 June 2019")
  run_test_case("a = 3 june 2020; a.month = 4     ; a", "3 April 2020")
  run_test_case("a = 3 june 2020; a.month = nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.month = 13    ; a", "never")
  run_test_case("a = 3 june 2020; a.month = 0     ; a", "never")
  run_test_case("a = 3 june 2020; a.month += 2    ; a", "3 August 2020")
  run_test_case("a = 3 june 2020; a.month -= 2    ; a", "3 April 2020")
  run_test_case("a = 3 june 2020; a.month += nan  ; a", "never")
  run_test_case("a = 3 june 2020; a.month++       ; a", "3 July 2020")
  run_test_case("a = 3 june 2020; a.month--       ; a", "3 May 2020")
  run_test_case("a = 3 june 2020; a.day = 4     ; a", "4 June 2020")
  run_test_case("a = 3 june 2020; a.day = nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.day = 34    ; a", "never")
  run_test_case("a = 3 june 2020; a.day = 0     ; a", "never")
  run_test_case("a = 3 june 2020; a.day += 2    ; a", "5 June 2020")
  run_test_case("a = 3 june 2020; a.day -= 2    ; a", "1 June 2020")
  run_test_case("a = 3 june 2020; a.day -= 3    ; a", "31 May 2020")
  run_test_case("a = 3 june 2020; a.day += nan  ; a", "never")
  run_test_case("a = 3 june 2020; a.day++       ; a", "4 June 2020")
  run_test_case("a = 3 june 2020; a.day--       ; a", "2 June 2020")
  run_test_case("a = 3 june 2020; a.hour = 4     ; a", "3 June 2020, 04:00")
  run_test_case("a = 3 june 2020; a.hour = nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.hour = 34    ; a", "never")
  run_test_case("a = 3 june 2020; a.hour = -1    ; a", "never")
  run_test_case("a = 3 june 2020; a.hour += 2    ; a", "4 June 2020, 02:00")
  run_test_case("a = 3 june 2020; a.hour -= 2    ; a", "2 June 2020, 22:00")
  run_test_case("a = 3 june 2020; a.hour += nan  ; a", "never")
  run_test_case("a = 3 june 2020; a.hour++       ; a", "4 June 2020, 01:00")
  run_test_case("a = 3 june 2020; a.hour--       ; a", "2 June 2020, 23:00")
  run_test_case("a = 3 june 2020; a.minute = 4     ; a", "3 June 2020, 00:04")
  run_test_case("a = 3 june 2020; a.minute = nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.minute = 340   ; a", "never")
  run_test_case("a = 3 june 2020; a.minute = -5    ; a", "never")
  run_test_case("a = 3 june 2020; a.minute += 2    ; a", "4 June 2020, 00:02")
  run_test_case("a = 3 june 2020; a.minute -= 2    ; a", "2 June 2020, 23:58")
  run_test_case("a = 3 june 2020; a.minute += nan  ; a", "never")
  run_test_case("a = 3 june 2020; a.minute++       ; a", "4 June 2020, 00:01")
  run_test_case("a = 3 june 2020; a.minute--       ; a", "2 June 2020, 23:59")
  run_test_case("a = 3 june 2020; a.second = 4     ; a", "3 June 2020, 00:00:04")
  run_test_case("a = 3 june 2020; a.second = nan   ; a", "never")
  run_test_case("a = 3 june 2020; a.second = 340   ; a", "never")
  run_test_case("a = 3 june 2020; a.second = -6    ; a", "never")
  run_test_case("a = 3 june 2020; a.second += 2    ; a", "4 June 2020, 00:00:02")
  run_test_case("a = 3 june 2020; a.second -= 2    ; a", "2 June 2020, 23:59:58")
  run_test_case("a = 3 june 2020; a.second += nan  ; a", "never")
  run_test_case("a = 3 june 2020; a.second++       ; a", "4 June 2020, 00:00:01")
  run_test_case("a = 3 june 2020; a.second--       ; a", "2 June 2020, 23:59:59")
  run_test_case("a = 3 june 2020, 12:34; a.year = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.year += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.month = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.month += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.day = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.day += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.hour = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.hour += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.minute = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.minute += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.second = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 12:34; a.second += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.year = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.year += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.month = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.month += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.day = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.day += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.hour = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.hour += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.minute = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.minute += nan   ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.second = nan    ; a", "never")
  run_test_case("a = 3 june 2020, 16:12:34; a.second += nan   ; a", "never")
  run_test_case("print 1kb", "1024")
  run_test_case("print -2kb", "-2048")
  run_test_case("print 11kb", "11264")
  run_test_case("print 10mb", "10485760")
  run_test_case("print 5GB", "5368709120")
  run_test_case("print 3tB", "3298534883328")
  run_test_case("print 6pb", "6755399441055744")
  run_test_case("print 0.5kb", "512")
  run_test_case("print -0.25kb", "-256")
  run_test_case("print -0.25mb", "-262144")
  run_test_case("print 6k", "6000")
  run_test_case("print 126k", "126000")
  run_test_case("print 126.2k", "126200")
  run_test_case("print 126.2345k", "126234.5")
  run_test_case("print 6m", "6000000")
  run_test_case("print 127m", "127000000")
  run_test_case("print 126.2m", "126200000")
  run_test_case("print 126.2345m", "126234500")
  run_test_case("print 12M", "12000000")
  run_test_case("print 3K", "3000")
  run_test_case("print 3K0", "3000")
  run_test_case("print 3K00", "3000")
  run_test_case("print 3K000", "3000")
  run_test_case("print 2K20", "2020")
  run_test_case("print 2k21", "2021")
  run_test_case("print 2k213", "2213")
  run_test_case("print 25k213", "25213")
  run_test_case("print 25k3", "25003")
  run_test_case("print 6625k3", "6625003")
  run_test_case("print 6625k321", "6625321")
  run_test_case("print 996625K21", "996625021")
  run_test_case("print nothing", NOTHING)
  run_test_case("print nothing, nothing", NOTHING)
  run_test_case("print 4, nothing, nothing, 3, nothing", lines("4", "3"))
  run_test_case("print never", "never")
  run_test_case("print never + 4 days", "never")
  run_test_case("print never - 43 years", "never")
  run_test_case("a = never; a - 43 years", "never")
  run_test_case("a = never; a -= 43 years; a,a", lines("never", "never"))
  run_test_case("a = never; a.year += 43; a,a", lines("never", "never"))
  run_test_case("print now == never ", FALSE)
  run_test_case("print today == never ", FALSE)
  run_test_case("print now.year == -1 and now.month == -1 and now.weekday == -1 and now.day == -1 ", FALSE)
  run_test_case("print now.hour == -1 and now.minute == -1 and now.second == -1 ", FALSE)
  run_test_case("print today.year == -1 and today.month == -1 and today.weekday == -1 and today.day == -1 ", FALSE)
  run_test_case("print today.hour == -1 and today.minute == -1 and today.second == -1 ", FALSE)
  run_test_case("print 12:24 ", "12:24")
  run_test_case("print 2:24 ", "02:24")
  run_test_case("print 21:4 ", "21:04")
  run_test_case("print 2:4 ", "02:04")
  run_test_case("print 2:40 ", "02:40")
  run_test_case("print 21:04 ", "21:04")
  run_test_case("print 01:04 ", "01:04")
  run_test_case("print 010:004 ", "10:04")
  run_test_case("print 12:24:23 ", "12:24:23")
  run_test_case("print 2:24:23 ", "02:24:23")
  run_test_case("print 21:4:23 ", "21:04:23")
  run_test_case("print 2:4:23 ", "02:04:23")
  run_test_case("print 2:40:23 ", "02:40:23")
  run_test_case("print 21:04:23 ", "21:04:23")
  run_test_case("print 01:04:23 ", "01:04:23")
  run_test_case("print 010:004:23 ", "10:04:23")
  run_test_case("print 12:24:09 ", "12:24:09")
  run_test_case("print 2:24:09 ", "02:24:09")
  run_test_case("print 21:4:09 ", "21:04:09")
  run_test_case("print 2:4:09 ", "02:04:09")
  run_test_case("print 2:40:09 ", "02:40:09")
  run_test_case("print 21:04:09 ", "21:04:09")
  run_test_case("print 01:04:09 ", "01:04:09")
  run_test_case("print 010:004:09 ", "10:04:09")
  run_test_case("print 12:24:9 ", "12:24:09")
  run_test_case("print 2:24:9 ", "02:24:09")
  run_test_case("print 21:4:9 ", "21:04:09")
  run_test_case("print 2:4:9 ", "02:04:09")
  run_test_case("print 2:40:9 ", "02:40:09")
  run_test_case("print 21:04:9 ", "21:04:09")
  run_test_case("print 01:04:9 ", "01:04:09")
  run_test_case("print 010:004:9 ", "10:04:09")
  run_test_case("a = 21:04; print a.year", NAN)
  run_test_case("a = 21:04; print a.month", NAN)
  run_test_case("a = 21:04; print a.day", NAN)
  run_test_case("a = 21:04; print a.weekday", NAN)
  run_test_case("a = 21:04; print a.hour", "21")
  run_test_case("a = 21:04; print a.minute", "4")
  run_test_case("a = 21:04; print a.second", NAN)
  run_test_case("a = 21:04:45; print a.year", NAN)
  run_test_case("a = 21:04:45; print a.month", NAN)
  run_test_case("a = 21:04:45; print a.day", NAN)
  run_test_case("a = 21:04:45; print a.weekday", NAN)
  run_test_case("a = 21:04:45; print a.hour", "21")
  run_test_case("a = 21:04:45; print a.minute", "4")
  run_test_case("a = 21:04:45; print a.second", "45")
  run_test_case("print 21:04 + 43 years", "21:04")
  run_test_case("print 21:04 - 42 years", "21:04")
  run_test_case("print 21:04 + 41 months", "21:04")
  run_test_case("print 21:04 - 40 months", "21:04")
  run_test_case("print 21:04 + 141 weeks", "21:04")
  run_test_case("print 21:04 - 140 weeks", "21:04")
  run_test_case("print 21:04 + 141 days", "21:04")
  run_test_case("print 21:04 - 140 days", "21:04")
  run_test_case("print 21:04:16 + 43 years", "21:04:16")
  run_test_case("print 21:04:16 - 42 years", "21:04:16")
  run_test_case("print 21:04:16 + 41 months", "21:04:16")
  run_test_case("print 21:04:16 - 40 months", "21:04:16")
  run_test_case("print 21:04:16 + 141 weeks", "21:04:16")
  run_test_case("print 21:04:16 - 140 weeks", "21:04:16")
  run_test_case("print 21:04:16 + 141 days", "21:04:16")
  run_test_case("print 21:04:16 - 140 days", "21:04:16")
  run_test_case("print 21:14 + 1 hour", "22:14")
  run_test_case("print 21:14 + 3 hours", "00:14")
  run_test_case("print 21:14 + 13 hours", "10:14")
  run_test_case("print 21:14 + 16 hours", "13:14")
  run_test_case("print 21:14 + 2416 hours", "13:14")
  run_test_case("print 21:14 - 1 hour", "20:14")
  run_test_case("print 21:14 - 3 hours", "18:14")
  run_test_case("print 21:14 - 21 hours", "00:14")
  run_test_case("print 21:14 - 23 hours", "22:14")
  run_test_case("print 21:14 - 2423 hours", "22:14")
  run_test_case("print 21:14:45 + 1 hour", "22:14:45")
  run_test_case("print 21:14:45 + 3 hours", "00:14:45")
  run_test_case("print 21:14:45 + 13 hours", "10:14:45")
  run_test_case("print 21:14:45 + 16 hours", "13:14:45")
  run_test_case("print 21:14:45 + 2416 hours", "13:14:45")
  run_test_case("print 21:14:45 - 1 hour", "20:14:45")
  run_test_case("print 21:14:45 - 3 hours", "18:14:45")
  run_test_case("print 21:14:45 - 21 hours", "00:14:45")
  run_test_case("print 21:14:45 - 23 hours", "22:14:45")
  run_test_case("print 21:14:45 - 2423 hours", "22:14:45")
  run_test_case("print 21:14:45 + 2 minutes", "21:16:45")
  run_test_case("print 21:14:45 - 63 minutes", "20:11:45")
  run_test_case("print 21:14 + 2 minutes", "21:16")
  run_test_case("print 21:14 - 63 minutes", "20:11")
  run_test_case("print 21:14:45 + 2 seconds", "21:14:47")
  run_test_case("print 21:14:45 - 63 seconds", "21:13:42")
  run_test_case("print 21:14 + 2 seconds", "21:14:02")
  run_test_case("print 21:14 - 63 seconds", "21:12:57")
  run_test_case("print 21:14 = 21:14", TRUE)
  run_test_case("print 21:14 = 21:13", FALSE)
  run_test_case("print 21:14 = 21:15", FALSE)
  run_test_case("print 23:14 = 21:14", FALSE)
  run_test_case("print  3:14 = 21:14", FALSE)
  run_test_case("print 21:14 = 21:14:03", TRUE)
  run_test_case("print 21:14 = 21:13:03", FALSE)
  run_test_case("print 21:14 = 21:15:03", FALSE)
  run_test_case("print 23:14 = 21:14:03", FALSE)
  run_test_case("print  3:14 = 21:14:03", FALSE)
  run_test_case("print 21:14:18 = 21:14", TRUE)
  run_test_case("print 21:14:18 = 21:13", FALSE)
  run_test_case("print 21:14:18 = 21:15", FALSE)
  run_test_case("print 23:14:18 = 21:14", FALSE)
  run_test_case("print  3:14:18 = 21:14", FALSE)
  run_test_case("print 21:14:18 = 21:14:18", TRUE)
  run_test_case("print 21:14:18 = 21:14:17", FALSE)
  run_test_case("print 21:14:18 = 21:13:18", FALSE)
  run_test_case("print 21:14:18 = 21:15:18", FALSE)
  run_test_case("print 23:14:18 = 21:14:18", FALSE)
  run_test_case("print  3:14:18 = 21:14:18", FALSE)
  run_test_case("print 21:14 != 21:14", FALSE)
  run_test_case("print 21:14 != 21:13", TRUE)
  run_test_case("print 21:14 != 21:15", TRUE)
  run_test_case("print 23:14 != 21:14", TRUE)
  run_test_case("print  3:14 != 21:14", TRUE)
  run_test_case("print 21:14 != 21:14:03", FALSE)
  run_test_case("print 21:14 != 21:13:03", TRUE)
  run_test_case("print 21:14 != 21:15:03", TRUE)
  run_test_case("print 23:14 != 21:14:03", TRUE)
  run_test_case("print  3:14 != 21:14:03", TRUE)
  run_test_case("print 21:14:18 != 21:14", FALSE)
  run_test_case("print 21:14:18 != 21:13", TRUE)
  run_test_case("print 21:14:18 != 21:15", TRUE)
  run_test_case("print 23:14:18 != 21:14", TRUE)
  run_test_case("print  3:14:18 != 21:14", TRUE)
  run_test_case("print 21:14:18 != 21:14:18", FALSE)
  run_test_case("print 21:14:18 != 21:14:17", TRUE)
  run_test_case("print 21:14:18 != 21:13:18", TRUE)
  run_test_case("print 21:14:18 != 21:15:18", TRUE)
  run_test_case("print 23:14:18 != 21:14:18", TRUE)
  run_test_case("print  3:14:18 != 21:14:18", TRUE)
  run_test_case("print 21:14 < 21:14", FALSE)
  run_test_case("print 21:14 < 21:13", FALSE)
  run_test_case("print 21:14 < 21:15", TRUE)
  run_test_case("print 23:14 < 21:14", FALSE)
  run_test_case("print  3:14 < 21:14", TRUE)
  run_test_case("print 21:14 < 21:14:03", FALSE)
  run_test_case("print 21:14 < 21:13:03", FALSE)
  run_test_case("print 21:14 < 21:15:03", TRUE)
  run_test_case("print 23:14 < 21:14:03", FALSE)
  run_test_case("print  3:14 < 21:14:03", TRUE)
  run_test_case("print 21:14:18 < 21:14", FALSE)
  run_test_case("print 21:14:18 < 21:13", FALSE)
  run_test_case("print 21:14:18 < 21:15", TRUE)
  run_test_case("print 23:14:18 < 21:14", FALSE)
  run_test_case("print  3:14:18 < 21:14", TRUE)
  run_test_case("print 21:14:18 < 21:14:18", FALSE)
  run_test_case("print 21:14:18 < 21:14:17", FALSE)
  run_test_case("print 21:14:18 < 21:13:18", FALSE)
  run_test_case("print 21:14:18 < 21:15:18", TRUE)
  run_test_case("print 23:14:18 < 21:14:18", FALSE)
  run_test_case("print  3:14:18 < 21:14:18", TRUE)
  run_test_case("print 21:14 <= 21:14", TRUE)
  run_test_case("print 21:14 <= 21:13", FALSE)
  run_test_case("print 21:14 <= 21:15", TRUE)
  run_test_case("print 23:14 <= 21:14", FALSE)
  run_test_case("print  3:14 <= 21:14", TRUE)
  run_test_case("print 21:14 <= 21:14:03", TRUE)
  run_test_case("print 21:14 <= 21:13:03", FALSE)
  run_test_case("print 21:14 <= 21:15:03", TRUE)
  run_test_case("print 23:14 <= 21:14:03", FALSE)
  run_test_case("print  3:14 <= 21:14:03", TRUE)
  run_test_case("print 21:14:18 <= 21:14", TRUE)
  run_test_case("print 21:14:18 <= 21:13", FALSE)
  run_test_case("print 21:14:18 <= 21:15", TRUE)
  run_test_case("print 23:14:18 <= 21:14", FALSE)
  run_test_case("print  3:14:18 <= 21:14", TRUE)
  run_test_case("print 21:14:18 <= 21:14:18", TRUE)
  run_test_case("print 21:14:18 <= 21:14:17", FALSE)
  run_test_case("print 21:14:18 <= 21:13:18", FALSE)
  run_test_case("print 21:14:18 <= 21:15:18", TRUE)
  run_test_case("print 23:14:18 <= 21:14:18", FALSE)
  run_test_case("print  3:14:18 <= 21:14:18", TRUE)
  run_test_case("print 21:14 > 21:14", FALSE)
  run_test_case("print 21:14 > 21:13", TRUE)
  run_test_case("print 21:14 > 21:15", FALSE)
  run_test_case("print 23:14 > 21:14", TRUE)
  run_test_case("print  3:14 > 21:14", FALSE)
  run_test_case("print 21:14 > 21:14:03", FALSE)
  run_test_case("print 21:14 > 21:13:03", TRUE)
  run_test_case("print 21:14 > 21:15:03", FALSE)
  run_test_case("print 23:14 > 21:14:03", TRUE)
  run_test_case("print  3:14 > 21:14:03", FALSE)
  run_test_case("print 21:14:18 > 21:14", FALSE)
  run_test_case("print 21:14:18 > 21:13", TRUE)
  run_test_case("print 21:14:18 > 21:15", FALSE)
  run_test_case("print 23:14:18 > 21:14", TRUE)
  run_test_case("print  3:14:18 > 21:14", FALSE)
  run_test_case("print 21:14:18 > 21:14:18", FALSE)
  run_test_case("print 21:14:18 > 21:14:17", TRUE)
  run_test_case("print 21:14:18 > 21:13:18", TRUE)
  run_test_case("print 21:14:18 > 21:15:18", FALSE)
  run_test_case("print 23:14:18 > 21:14:18", TRUE)
  run_test_case("print  3:14:18 > 21:14:18", FALSE)
  run_test_case("print 21:14 >= 21:14", TRUE)
  run_test_case("print 21:14 >= 21:13", TRUE)
  run_test_case("print 21:14 >= 21:15", FALSE)
  run_test_case("print 23:14 >= 21:14", TRUE)
  run_test_case("print  3:14 >= 21:14", FALSE)
  run_test_case("print 21:14 >= 21:14:03", TRUE)
  run_test_case("print 21:14 >= 21:13:03", TRUE)
  run_test_case("print 21:14 >= 21:15:03", FALSE)
  run_test_case("print 23:14 >= 21:14:03", TRUE)
  run_test_case("print  3:14 >= 21:14:03", FALSE)
  run_test_case("print 21:14:18 >= 21:14", TRUE)
  run_test_case("print 21:14:18 >= 21:13", TRUE)
  run_test_case("print 21:14:18 >= 21:15", FALSE)
  run_test_case("print 23:14:18 >= 21:14", TRUE)
  run_test_case("print  3:14:18 >= 21:14", FALSE)
  run_test_case("print 21:14:18 >= 21:14:18", TRUE)
  run_test_case("print 21:14:18 >= 21:14:17", TRUE)
  run_test_case("print 21:14:18 >= 21:13:18", TRUE)
  run_test_case("print 21:14:18 >= 21:15:18", FALSE)
  run_test_case("print 23:14:18 >= 21:14:18", TRUE)
  run_test_case("print  3:14:18 >= 21:14:18", FALSE)
  run_test_case("print 21:14 = june 2005", FALSE)
  run_test_case("print 21:14 = 3 june 2005", FALSE)
  run_test_case("print 21:14 != june 2005", FALSE)
  run_test_case("print 21:14 != 3 june 2005", FALSE)
  run_test_case("print 21:14 < june 2005", FALSE)
  run_test_case("print 21:14 < 3 june 2005", FALSE)
  run_test_case("print 21:14 <= june 2005", FALSE)
  run_test_case("print 21:14 <= 3 june 2005", FALSE)
  run_test_case("print 21:14 > june 2005", FALSE)
  run_test_case("print 21:14 > 3 june 2005", FALSE)
  run_test_case("print 21:14 >= june 2005", FALSE)
  run_test_case("print 21:14 >= 3 june 2005", FALSE)
  run_test_case("print 21:14:15 = june 2005", FALSE)
  run_test_case("print 21:14:15 = 3 june 2005", FALSE)
  run_test_case("print 21:14:15 != june 2005", FALSE)
  run_test_case("print 21:14:15 != 3 june 2005", FALSE)
  run_test_case("print 21:14:15 < june 2005", FALSE)
  run_test_case("print 21:14:15 < 3 june 2005", FALSE)
  run_test_case("print 21:14:15 <= june 2005", FALSE)
  run_test_case("print 21:14:15 <= 3 june 2005", FALSE)
  run_test_case("print 21:14:15 > june 2005", FALSE)
  run_test_case("print 21:14:15 > 3 june 2005", FALSE)
  run_test_case("print 21:14:15 >= june 2005", FALSE)
  run_test_case("print 21:14:15 >= 3 june 2005", FALSE)
  run_test_case("print june 2005 = 12:54", FALSE)
  run_test_case("print 3 june 2005 = 12:54", FALSE)
  run_test_case("print june 2005 != 12:54", FALSE)
  run_test_case("print 3 june 2005 != 12:54", FALSE)
  run_test_case("print june 2005 < 14:56", FALSE)
  run_test_case("print 3 june 2005 < 14:56", FALSE)
  run_test_case("print june 2005 <= 14:56", FALSE)
  run_test_case("print 3 june 2005  <= 14:56", FALSE)
  run_test_case("print june 2005 > 15:23", FALSE)
  run_test_case("print 3 june 2005 > 15:23", FALSE)
  run_test_case("print june 2005 >= 15:23", FALSE)
  run_test_case("print 3 june 2005 >= 15:23", FALSE)
  run_test_case("print june 2005 = 12:54:34", FALSE)
  run_test_case("print 3 june 2005 = 12:54:34", FALSE)
  run_test_case("print june 2005 != 12:54:34", FALSE)
  run_test_case("print 3 june 2005 != 12:54:34", FALSE)
  run_test_case("print june 2005 < 14:56:34", FALSE)
  run_test_case("print 3 june 2005 < 14:56:34", FALSE)
  run_test_case("print june 2005 <= 14:56:34", FALSE)
  run_test_case("print 3 june 2005  <= 14:56:34", FALSE)
  run_test_case("print june 2005 > 15:23:34", FALSE)
  run_test_case("print 3 june 2005 > 15:23:34", FALSE)
  run_test_case("print june 2005 >= 15:23:34", FALSE)
  run_test_case("print 3 june 2005 >= 15:23:34", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 = 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 = 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 21:14:18", FALSE)
  run_test_case("print 21:14 = 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 = 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14 = 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14 = 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14 = 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 = 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14 = 28 november 2000, 21:13:03", FALSE)
  run_test_case("print 21:14 = 28 november 2000, 21:15:03", FALSE)
  run_test_case("print 23:14 = 28 november 2000, 21:14:03", FALSE)
  run_test_case("print  3:14 = 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14:18 = 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14:18 = 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:14:17", FALSE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:13:18", FALSE)
  run_test_case("print 21:14:18 = 28 november 2000, 21:15:18", FALSE)
  run_test_case("print 23:14:18 = 28 november 2000, 21:14:18", FALSE)
  run_test_case("print  3:14:18 = 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 21:14 != 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 != 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14 != 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14 != 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14 != 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 != 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14 != 28 november 2000, 21:13:03", TRUE)
  run_test_case("print 21:14 != 28 november 2000, 21:15:03", TRUE)
  run_test_case("print 23:14 != 28 november 2000, 21:14:03", TRUE)
  run_test_case("print  3:14 != 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14:18 != 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14:18 != 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:14:17", TRUE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:13:18", TRUE)
  run_test_case("print 21:14:18 != 28 november 2000, 21:15:18", TRUE)
  run_test_case("print 23:14:18 != 28 november 2000, 21:14:18", TRUE)
  run_test_case("print  3:14:18 != 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14 < 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 < 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14 < 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14 < 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14 < 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 < 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14 < 28 november 2000, 21:13:03", FALSE)
  run_test_case("print 21:14 < 28 november 2000, 21:15:03", TRUE)
  run_test_case("print 23:14 < 28 november 2000, 21:14:03", FALSE)
  run_test_case("print  3:14 < 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14:18 < 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14:18 < 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:14:17", FALSE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:13:18", FALSE)
  run_test_case("print 21:14:18 < 28 november 2000, 21:15:18", TRUE)
  run_test_case("print 23:14:18 < 28 november 2000, 21:14:18", FALSE)
  run_test_case("print  3:14:18 < 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14 <= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 <= 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14 <= 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14 <= 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14 <= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 <= 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14 <= 28 november 2000, 21:13:03", FALSE)
  run_test_case("print 21:14 <= 28 november 2000, 21:15:03", TRUE)
  run_test_case("print 23:14 <= 28 november 2000, 21:14:03", FALSE)
  run_test_case("print  3:14 <= 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:13", FALSE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:15", TRUE)
  run_test_case("print 23:14:18 <= 28 november 2000, 21:14", FALSE)
  run_test_case("print  3:14:18 <= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:14:17", FALSE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:13:18", FALSE)
  run_test_case("print 21:14:18 <= 28 november 2000, 21:15:18", TRUE)
  run_test_case("print 23:14:18 <= 28 november 2000, 21:14:18", FALSE)
  run_test_case("print  3:14:18 <= 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14 > 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 > 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14 > 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14 > 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14 > 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 > 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14 > 28 november 2000, 21:13:03", TRUE)
  run_test_case("print 21:14 > 28 november 2000, 21:15:03", FALSE)
  run_test_case("print 23:14 > 28 november 2000, 21:14:03", TRUE)
  run_test_case("print  3:14 > 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14:18 > 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14:18 > 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:14:17", TRUE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:13:18", TRUE)
  run_test_case("print 21:14:18 > 28 november 2000, 21:15:18", FALSE)
  run_test_case("print 23:14:18 > 28 november 2000, 21:14:18", TRUE)
  run_test_case("print  3:14:18 > 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 21:14 >= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14 >= 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14 >= 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14 >= 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14 >= 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14 >= 28 november 2000, 21:14:03", TRUE)
  run_test_case("print 21:14 >= 28 november 2000, 21:13:03", TRUE)
  run_test_case("print 21:14 >= 28 november 2000, 21:15:03", FALSE)
  run_test_case("print 23:14 >= 28 november 2000, 21:14:03", TRUE)
  run_test_case("print  3:14 >= 28 november 2000, 21:14:03", FALSE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:14", TRUE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:13", TRUE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:15", FALSE)
  run_test_case("print 23:14:18 >= 28 november 2000, 21:14", TRUE)
  run_test_case("print  3:14:18 >= 28 november 2000, 21:14", FALSE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:14:18", TRUE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:14:17", TRUE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:13:18", TRUE)
  run_test_case("print 21:14:18 >= 28 november 2000, 21:15:18", FALSE)
  run_test_case("print 23:14:18 >= 28 november 2000, 21:14:18", TRUE)
  run_test_case("print  3:14:18 >= 28 november 2000, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 3 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 3 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 3 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 3 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 3 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 3 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 3 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 3 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 3 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 3 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 3 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 3 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 3 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 3 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 3 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 3 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 3 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 3 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 < 2 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 < 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 < 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 < 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 < 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 <= 2 june 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 <= 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 <= 2 june 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 2 june 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 june 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 <= 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 <= 2 june 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 > 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 > 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 > 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 > 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 >= 2 june 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 >= 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 >= 2 june 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 2 june 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 june 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 >= 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 >= 2 june 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 = 2 october 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 = 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 = 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 = 2 october 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 = 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 = 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 != 2 october 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 != 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 != 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 != 2 october 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 != 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 != 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 < 2 october 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 < 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 < 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 < 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 < 2 october 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 < 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 < 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:13:03", TRUE)
  run_test_case("print 3 june 2020, 21:14 <= 2 october 2020, 21:15:03", TRUE)
  run_test_case("print 3 june 2020, 23:14 <= 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020,  3:14 <= 2 october 2020, 21:14:03", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:13", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:15", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 <= 2 october 2020, 21:14", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:14:17", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:13:18", TRUE)
  run_test_case("print 3 june 2020, 21:14:18 <= 2 october 2020, 21:15:18", TRUE)
  run_test_case("print 3 june 2020, 23:14:18 <= 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020,  3:14:18 <= 2 october 2020, 21:14:18", TRUE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 > 2 october 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 > 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 > 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 > 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 > 2 october 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 > 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 > 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:13:03", FALSE)
  run_test_case("print 3 june 2020, 21:14 >= 2 october 2020, 21:15:03", FALSE)
  run_test_case("print 3 june 2020, 23:14 >= 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020,  3:14 >= 2 october 2020, 21:14:03", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:13", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:15", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 >= 2 october 2020, 21:14", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:14:17", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:13:18", FALSE)
  run_test_case("print 3 june 2020, 21:14:18 >= 2 october 2020, 21:15:18", FALSE)
  run_test_case("print 3 june 2020, 23:14:18 >= 2 october 2020, 21:14:18", FALSE)
  run_test_case("print 3 june 2020,  3:14:18 >= 2 october 2020, 21:14:18", FALSE)
  run_test_case("print october 2010 = 2 october 2010",              TRUE)
  run_test_case("print october 2010 = 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2010 = 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2010 = 2 october 2010",            TRUE)
  run_test_case("print 2 october 2010 = 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2010 = 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print august 2010 = 2 october 2010",               FALSE)
  run_test_case("print august 2010 = 2 october 2010, 21:14",        FALSE)
  run_test_case("print august 2010 = 2 october 2010, 21:14:18",     FALSE)
  run_test_case("print 2 august 2010 = 2 october 2010",             FALSE)
  run_test_case("print 2 august 2010 = 2 october 2010, 21:14",      FALSE)
  run_test_case("print 2 august 2010 = 2 october 2010, 21:14:18",   FALSE)
  run_test_case("print october 2011 = 2 october 2010",              FALSE)
  run_test_case("print october 2011 = 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2011 = 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2011 = 2 october 2010",            FALSE)
  run_test_case("print 2 october 2011 = 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2011 = 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print october 2010 != 2 october 2010",              FALSE)
  run_test_case("print october 2010 != 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2010 != 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2010 != 2 october 2010",            FALSE)
  run_test_case("print 2 october 2010 != 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2010 != 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print august 2010 != 2 october 2010",               TRUE)
  run_test_case("print august 2010 != 2 october 2010, 21:14",        TRUE)
  run_test_case("print august 2010 != 2 october 2010, 21:14:18",     TRUE)
  run_test_case("print 2 august 2010 != 2 october 2010",             TRUE)
  run_test_case("print 2 august 2010 != 2 october 2010, 21:14",      TRUE)
  run_test_case("print 2 august 2010 != 2 october 2010, 21:14:18",   TRUE)
  run_test_case("print october 2011 != 2 october 2010",              TRUE)
  run_test_case("print october 2011 != 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2011 != 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2011 != 2 october 2010",            TRUE)
  run_test_case("print 2 october 2011 != 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2011 != 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print october 2010 < 2 october 2010",              FALSE)
  run_test_case("print october 2010 < 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2010 < 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2010 < 2 october 2010",            FALSE)
  run_test_case("print 2 october 2010 < 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2010 < 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print august 2010 < 2 october 2010",               TRUE)
  run_test_case("print august 2010 < 2 october 2010, 21:14",        TRUE)
  run_test_case("print august 2010 < 2 october 2010, 21:14:18",     TRUE)
  run_test_case("print 2 august 2010 < 2 october 2010",             TRUE)
  run_test_case("print 2 august 2010 < 2 october 2010, 21:14",      TRUE)
  run_test_case("print 2 august 2010 < 2 october 2010, 21:14:18",   TRUE)
  run_test_case("print october 2011 < 2 october 2010",              FALSE)
  run_test_case("print october 2011 < 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2011 < 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2011 < 2 october 2010",            FALSE)
  run_test_case("print 2 october 2011 < 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2011 < 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print october 2010 <= 2 october 2010",              TRUE)
  run_test_case("print october 2010 <= 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2010 <= 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2010 <= 2 october 2010",            TRUE)
  run_test_case("print 2 october 2010 <= 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2010 <= 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print august 2010 <= 2 october 2010",               TRUE)
  run_test_case("print august 2010 <= 2 october 2010, 21:14",        TRUE)
  run_test_case("print august 2010 <= 2 october 2010, 21:14:18",     TRUE)
  run_test_case("print 2 august 2010 <= 2 october 2010",             TRUE)
  run_test_case("print 2 august 2010 <= 2 october 2010, 21:14",      TRUE)
  run_test_case("print 2 august 2010 <= 2 october 2010, 21:14:18",   TRUE)
  run_test_case("print october 2011 <= 2 october 2010",              FALSE)
  run_test_case("print october 2011 <= 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2011 <= 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2011 <= 2 october 2010",            FALSE)
  run_test_case("print 2 october 2011 <= 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2011 <= 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print october 2010 > 2 october 2010",              FALSE)
  run_test_case("print october 2010 > 2 october 2010, 21:14",       FALSE)
  run_test_case("print october 2010 > 2 october 2010, 21:14:18",    FALSE)
  run_test_case("print 2 october 2010 > 2 october 2010",            FALSE)
  run_test_case("print 2 october 2010 > 2 october 2010, 21:14",     FALSE)
  run_test_case("print 2 october 2010 > 2 october 2010, 21:14:18",  FALSE)
  run_test_case("print august 2010 > 2 october 2010",               FALSE)
  run_test_case("print august 2010 > 2 october 2010, 21:14",        FALSE)
  run_test_case("print august 2010 > 2 october 2010, 21:14:18",     FALSE)
  run_test_case("print 2 august 2010 > 2 october 2010",             FALSE)
  run_test_case("print 2 august 2010 > 2 october 2010, 21:14",      FALSE)
  run_test_case("print 2 august 2010 > 2 october 2010, 21:14:18",   FALSE)
  run_test_case("print october 2011 > 2 october 2010",              TRUE)
  run_test_case("print october 2011 > 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2011 > 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2011 > 2 october 2010",            TRUE)
  run_test_case("print 2 october 2011 > 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2011 > 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print october 2010 >= 2 october 2010",              TRUE)
  run_test_case("print october 2010 >= 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2010 >= 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2010 >= 2 october 2010",            TRUE)
  run_test_case("print 2 october 2010 >= 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2010 >= 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print august 2010 >= 2 october 2010",               FALSE)
  run_test_case("print august 2010 >= 2 october 2010, 21:14",        FALSE)
  run_test_case("print august 2010 >= 2 october 2010, 21:14:18",     FALSE)
  run_test_case("print 2 august 2010 >= 2 october 2010",             FALSE)
  run_test_case("print 2 august 2010 >= 2 october 2010, 21:14",      FALSE)
  run_test_case("print 2 august 2010 >= 2 october 2010, 21:14:18",   FALSE)
  run_test_case("print october 2011 >= 2 october 2010",              TRUE)
  run_test_case("print october 2011 >= 2 october 2010, 21:14",       TRUE)
  run_test_case("print october 2011 >= 2 october 2010, 21:14:18",    TRUE)
  run_test_case("print 2 october 2011 >= 2 october 2010",            TRUE)
  run_test_case("print 2 october 2011 >= 2 october 2010, 21:14",     TRUE)
  run_test_case("print 2 october 2011 >= 2 october 2010, 21:14:18",  TRUE)
  run_test_case("print 21:23 - 18:21",  "3 hours 2 minutes")
  run_test_case("print 21:19 - 18:21",  "2 hours 58 minutes")
  run_test_case("print 21:19 - 20:21",  "58 minutes")
  run_test_case("print 21:21 - 21:19",  "2 minutes")
  run_test_case("print 21:21 - 21:21",  NO_PERIOD)
  run_test_case("print 18:17 - 16:21",  "1 hour 56 minutes")
  run_test_case("print 18:17 - 16:17",  "2 hours")
  run_test_case("print 20:21 - 07:11",  "13 hours 10 minutes")
  run_test_case("print 07:21 - 07:10",  "11 minutes")
  run_test_case("print 07:01 - 07:10",  "-9 minutes")
  run_test_case("print 21:23:34 - 18:21",  "3 hours 2 minutes 34 seconds")
  run_test_case("print 21:19:34 - 18:21",  "2 hours 58 minutes 34 seconds")
  run_test_case("print 21:19:34 - 20:21",  "58 minutes 34 seconds")
  run_test_case("print 21:21:34 - 21:19",  "2 minutes 34 seconds")
  run_test_case("print 21:21:34 - 21:21",  NO_PERIOD)
  run_test_case("print 18:17:34 - 16:21",  "1 hour 56 minutes 34 seconds")
  run_test_case("print 18:17:34 - 16:17",  "2 hours 34 seconds")
  run_test_case("print 20:21:34 - 07:11",  "13 hours 10 minutes 34 seconds")
  run_test_case("print 07:21:34 - 07:10",  "11 minutes 34 seconds")
  run_test_case("print 07:01:34 - 07:10",  "-8 minutes -26 seconds")
  run_test_case("print 21:23:36 - 18:21:36",  "3 hours 2 minutes")
  run_test_case("print 21:19:36 - 18:21:36",  "2 hours 58 minutes")
  run_test_case("print 21:19:36 - 20:21:36",  "58 minutes")
  run_test_case("print 21:21:36 - 21:19:36",  "2 minutes")
  run_test_case("print 21:21:36 - 21:21:36",  NO_PERIOD)
  run_test_case("print 18:17:36 - 16:21:36",  "1 hour 56 minutes")
  run_test_case("print 18:17:36 - 16:17:36",  "2 hours")
  run_test_case("print 20:21:36 - 07:11:36",  "13 hours 10 minutes")
  run_test_case("print 07:21:36 - 07:10:36",  "11 minutes")
  run_test_case("print 07:01:36 - 07:10:36",  "-9 minutes")
  run_test_case("print 21:23:36 - 18:21:34",  "3 hours 2 minutes 2 seconds")
  run_test_case("print 21:19:36 - 18:21:34",  "2 hours 58 minutes 2 seconds")
  run_test_case("print 21:19:36 - 20:21:34",  "58 minutes 2 seconds")
  run_test_case("print 21:21:36 - 21:19:34",  "2 minutes 2 seconds")
  run_test_case("print 21:21:36 - 21:21:34",  "2 seconds")
  run_test_case("print 18:17:36 - 16:21:34",  "1 hour 56 minutes 2 seconds")
  run_test_case("print 18:17:36 - 16:17:34",  "2 hours 2 seconds")
  run_test_case("print 20:21:36 - 07:11:34",  "13 hours 10 minutes 2 seconds")
  run_test_case("print 07:21:36 - 07:10:34",  "11 minutes 2 seconds")
  run_test_case("print 07:01:36 - 07:10:34",  "-8 minutes -58 seconds")
  run_test_case("print 21:23:35 - 18:21:36",  "3 hours 1 minute 59 seconds")
  run_test_case("print 21:19:35 - 18:21:36",  "2 hours 57 minutes 59 seconds")
  run_test_case("print 21:19:35 - 20:21:36",  "57 minutes 59 seconds")
  run_test_case("print 21:21:35 - 21:19:36",  "1 minute 59 seconds")
  run_test_case("print 21:21:35 - 21:21:36",  "-1 second")
  run_test_case("print 18:17:35 - 16:21:36",  "1 hour 55 minutes 59 seconds")
  run_test_case("print 18:17:35 - 16:17:36",  "1 hour 59 minutes 59 seconds")
  run_test_case("print 20:21:35 - 07:11:36",  "13 hours 9 minutes 59 seconds")
  run_test_case("print 07:21:35 - 07:10:36",  "10 minutes 59 seconds")
  run_test_case("print 07:01:35 - 07:10:36",  "-9 minutes -1 second")
  run_test_case("print 21:23 - 18:21:01",  "3 hours 1 minute 59 seconds")
  run_test_case("print 21:19 - 18:21:01",  "2 hours 57 minutes 59 seconds")
  run_test_case("print 21:19 - 20:21:01",  "57 minutes 59 seconds")
  run_test_case("print 21:21 - 21:19:01",  "1 minute 59 seconds")
  run_test_case("print 21:21 - 21:21:01",  NO_PERIOD)
  run_test_case("print 18:17 - 16:21:01",  "1 hour 55 minutes 59 seconds")
  run_test_case("print 18:17 - 16:17:01",  "1 hour 59 minutes 59 seconds")
  run_test_case("print 20:21 - 07:11:01",  "13 hours 9 minutes 59 seconds")
  run_test_case("print 07:21 - 07:10:01",  "10 minutes 59 seconds")
  run_test_case("print 07:01 - 07:10:01",  "-9 minutes -1 second")
  run_test_case("print (5 january 2024, 21:23) - 18:21",  "3 hours 2 minutes")
  run_test_case("print (5 january 2024, 21:19) - 18:21",  "2 hours 58 minutes")
  run_test_case("print (5 january 2024, 21:19) - 20:21",  "58 minutes")
  run_test_case("print (5 january 2024, 21:21) - 21:19",  "2 minutes")
  run_test_case("print (5 january 2024, 21:21) - 21:21",  NO_PERIOD)
  run_test_case("print (5 january 2024, 18:17) - 16:21",  "1 hour 56 minutes")
  run_test_case("print (5 january 2024, 18:17) - 16:17",  "2 hours")
  run_test_case("print (5 january 2024, 20:21) - 07:11",  "13 hours 10 minutes")
  run_test_case("print (5 january 2024, 07:21) - 07:10",  "11 minutes")
  run_test_case("print (5 january 2024, 07:01) - 07:10",  "-9 minutes")
  run_test_case("print (5 january 2024, 21:23:34) - 18:21",  "3 hours 2 minutes 34 seconds")
  run_test_case("print (5 january 2024, 21:19:34) - 18:21",  "2 hours 58 minutes 34 seconds")
  run_test_case("print (5 january 2024, 21:19:34) - 20:21",  "58 minutes 34 seconds")
  run_test_case("print (5 january 2024, 21:21:34) - 21:19",  "2 minutes 34 seconds")
  run_test_case("print (5 january 2024, 21:21:34) - 21:21",  NO_PERIOD)
  run_test_case("print (5 january 2024, 18:17:34) - 16:21",  "1 hour 56 minutes 34 seconds")
  run_test_case("print (5 january 2024, 18:17:34) - 16:17",  "2 hours 34 seconds")
  run_test_case("print (5 january 2024, 20:21:34) - 07:11",  "13 hours 10 minutes 34 seconds")
  run_test_case("print (5 january 2024, 07:21:34) - 07:10",  "11 minutes 34 seconds")
  run_test_case("print (5 january 2024, 07:01:34) - 07:10",  "-8 minutes -26 seconds")
  run_test_case("print (5 january 2024, 21:23:36) - 18:21:36",  "3 hours 2 minutes")
  run_test_case("print (5 january 2024, 21:19:36) - 18:21:36",  "2 hours 58 minutes")
  run_test_case("print (5 january 2024, 21:19:36) - 20:21:36",  "58 minutes")
  run_test_case("print (5 january 2024, 21:21:36) - 21:19:36",  "2 minutes")
  run_test_case("print (5 january 2024, 21:21:36) - 21:21:36",  NO_PERIOD)
  run_test_case("print (5 january 2024, 18:17:36) - 16:21:36",  "1 hour 56 minutes")
  run_test_case("print (5 january 2024, 18:17:36) - 16:17:36",  "2 hours")
  run_test_case("print (5 january 2024, 20:21:36) - 07:11:36",  "13 hours 10 minutes")
  run_test_case("print (5 january 2024, 07:21:36) - 07:10:36",  "11 minutes")
  run_test_case("print (5 january 2024, 07:01:36) - 07:10:36",  "-9 minutes")
  run_test_case("print (5 january 2024, 21:23:36) - 18:21:34",  "3 hours 2 minutes 2 seconds")
  run_test_case("print (5 january 2024, 21:19:36) - 18:21:34",  "2 hours 58 minutes 2 seconds")
  run_test_case("print (5 january 2024, 21:19:36) - 20:21:34",  "58 minutes 2 seconds")
  run_test_case("print (5 january 2024, 21:21:36) - 21:19:34",  "2 minutes 2 seconds")
  run_test_case("print (5 january 2024, 21:21:36) - 21:21:34",  "2 seconds")
  run_test_case("print (5 january 2024, 18:17:36) - 16:21:34",  "1 hour 56 minutes 2 seconds")
  run_test_case("print (5 january 2024, 18:17:36) - 16:17:34",  "2 hours 2 seconds")
  run_test_case("print (5 january 2024, 20:21:36) - 07:11:34",  "13 hours 10 minutes 2 seconds")
  run_test_case("print (5 january 2024, 07:21:36) - 07:10:34",  "11 minutes 2 seconds")
  run_test_case("print (5 january 2024, 07:01:36) - 07:10:34",  "-8 minutes -58 seconds")
  run_test_case("print (5 january 2024, 21:23:35) - 18:21:36",  "3 hours 1 minute 59 seconds")
  run_test_case("print (5 january 2024, 21:19:35) - 18:21:36",  "2 hours 57 minutes 59 seconds")
  run_test_case("print (5 january 2024, 21:19:35) - 20:21:36",  "57 minutes 59 seconds")
  run_test_case("print (5 january 2024, 21:21:35) - 21:19:36",  "1 minute 59 seconds")
  run_test_case("print (5 january 2024, 21:21:35) - 21:21:36",  "-1 second")
  run_test_case("print (5 january 2024, 18:17:35) - 16:21:36",  "1 hour 55 minutes 59 seconds")
  run_test_case("print (5 january 2024, 18:17:35) - 16:17:36",  "1 hour 59 minutes 59 seconds")
  run_test_case("print (5 january 2024, 20:21:35) - 07:11:36",  "13 hours 9 minutes 59 seconds")
  run_test_case("print (5 january 2024, 07:21:35) - 07:10:36",  "10 minutes 59 seconds")
  run_test_case("print (5 january 2024, 07:01:35) - 07:10:36",  "-9 minutes -1 second")
  run_test_case("print (5 january 2024, 21:23) - 18:21:01",  "3 hours 1 minute 59 seconds")
  run_test_case("print (5 january 2024, 21:19) - 18:21:01",  "2 hours 57 minutes 59 seconds")
  run_test_case("print (5 january 2024, 21:19) - 20:21:01",  "57 minutes 59 seconds")
  run_test_case("print (5 january 2024, 21:21) - 21:19:01",  "1 minute 59 seconds")
  run_test_case("print (5 january 2024, 21:21) - 21:21:01",  NO_PERIOD)
  run_test_case("print (5 january 2024, 18:17) - 16:21:01",  "1 hour 55 minutes 59 seconds")
  run_test_case("print (5 january 2024, 18:17) - 16:17:01",  "1 hour 59 minutes 59 seconds")
  run_test_case("print (5 january 2024, 20:21) - 07:11:01",  "13 hours 9 minutes 59 seconds")
  run_test_case("print (5 january 2024, 07:21) - 07:10:01",  "10 minutes 59 seconds")
  run_test_case("print (5 january 2024, 07:01) - 07:10:01",  "-9 minutes -1 second")
  run_test_case("print 21:23 - (17 march 2018, 18:21)",  "3 hours 2 minutes")
  run_test_case("print 21:19 - (17 march 2018, 18:21)",  "2 hours 58 minutes")
  run_test_case("print 21:19 - (17 march 2018, 20:21)",  "58 minutes")
  run_test_case("print 21:21 - (17 march 2018, 21:19)",  "2 minutes")
  run_test_case("print 21:21 - (17 march 2018, 21:21)",  NO_PERIOD)
  run_test_case("print 18:17 - (17 march 2018, 16:21)",  "1 hour 56 minutes")
  run_test_case("print 18:17 - (17 march 2018, 16:17)",  "2 hours")
  run_test_case("print 20:21 - (17 march 2018, 07:11)",  "13 hours 10 minutes")
  run_test_case("print 07:21 - (17 march 2018, 07:10)",  "11 minutes")
  run_test_case("print 07:01 - (17 march 2018, 07:10)",  "-9 minutes")
  run_test_case("print 21:23:34 - (17 march 2018, 18:21)",  "3 hours 2 minutes 34 seconds")
  run_test_case("print 21:19:34 - (17 march 2018, 18:21)",  "2 hours 58 minutes 34 seconds")
  run_test_case("print 21:19:34 - (17 march 2018, 20:21)",  "58 minutes 34 seconds")
  run_test_case("print 21:21:34 - (17 march 2018, 21:19)",  "2 minutes 34 seconds")
  run_test_case("print 21:21:34 - (17 march 2018, 21:21)",  NO_PERIOD)
  run_test_case("print 18:17:34 - (17 march 2018, 16:21)",  "1 hour 56 minutes 34 seconds")
  run_test_case("print 18:17:34 - (17 march 2018, 16:17)",  "2 hours 34 seconds")
  run_test_case("print 20:21:34 - (17 march 2018, 07:11)",  "13 hours 10 minutes 34 seconds")
  run_test_case("print 07:21:34 - (17 march 2018, 07:10)",  "11 minutes 34 seconds")
  run_test_case("print 07:01:34 - (17 march 2018, 07:10)",  "-8 minutes -26 seconds")
  run_test_case("print 21:23:36 - (17 march 2018, 18:21:36)",  "3 hours 2 minutes")
  run_test_case("print 21:19:36 - (17 march 2018, 18:21:36)",  "2 hours 58 minutes")
  run_test_case("print 21:19:36 - (17 march 2018, 20:21:36)",  "58 minutes")
  run_test_case("print 21:21:36 - (17 march 2018, 21:19:36)",  "2 minutes")
  run_test_case("print 21:21:36 - (17 march 2018, 21:21:36)",  NO_PERIOD)
  run_test_case("print 18:17:36 - (17 march 2018, 16:21:36)",  "1 hour 56 minutes")
  run_test_case("print 18:17:36 - (17 march 2018, 16:17:36)",  "2 hours")
  run_test_case("print 20:21:36 - (17 march 2018, 07:11:36)",  "13 hours 10 minutes")
  run_test_case("print 07:21:36 - (17 march 2018, 07:10:36)",  "11 minutes")
  run_test_case("print 07:01:36 - (17 march 2018, 07:10:36)",  "-9 minutes")
  run_test_case("print 21:23:36 - (17 march 2018, 18:21:34)",  "3 hours 2 minutes 2 seconds")
  run_test_case("print 21:19:36 - (17 march 2018, 18:21:34)",  "2 hours 58 minutes 2 seconds")
  run_test_case("print 21:19:36 - (17 march 2018, 20:21:34)",  "58 minutes 2 seconds")
  run_test_case("print 21:21:36 - (17 march 2018, 21:19:34)",  "2 minutes 2 seconds")
  run_test_case("print 21:21:36 - (17 march 2018, 21:21:34)",  "2 seconds")
  run_test_case("print 18:17:36 - (17 march 2018, 16:21:34)",  "1 hour 56 minutes 2 seconds")
  run_test_case("print 18:17:36 - (17 march 2018, 16:17:34)",  "2 hours 2 seconds")
  run_test_case("print 20:21:36 - (17 march 2018, 07:11:34)",  "13 hours 10 minutes 2 seconds")
  run_test_case("print 07:21:36 - (17 march 2018, 07:10:34)",  "11 minutes 2 seconds")
  run_test_case("print 07:01:36 - (17 march 2018, 07:10:34)",  "-8 minutes -58 seconds")
  run_test_case("print 21:23:35 - (17 march 2018, 18:21:36)",  "3 hours 1 minute 59 seconds")
  run_test_case("print 21:19:35 - (17 march 2018, 18:21:36)",  "2 hours 57 minutes 59 seconds")
  run_test_case("print 21:19:35 - (17 march 2018, 20:21:36)",  "57 minutes 59 seconds")
  run_test_case("print 21:21:35 - (17 march 2018, 21:19:36)",  "1 minute 59 seconds")
  run_test_case("print 21:21:35 - (17 march 2018, 21:21:36)",  "-1 second")
  run_test_case("print 18:17:35 - (17 march 2018, 16:21:36)",  "1 hour 55 minutes 59 seconds")
  run_test_case("print 18:17:35 - (17 march 2018, 16:17:36)",  "1 hour 59 minutes 59 seconds")
  run_test_case("print 20:21:35 - (17 march 2018, 07:11:36)",  "13 hours 9 minutes 59 seconds")
  run_test_case("print 07:21:35 - (17 march 2018, 07:10:36)",  "10 minutes 59 seconds")
  run_test_case("print 07:01:35 - (17 march 2018, 07:10:36)",  "-9 minutes -1 second")
  run_test_case("print 21:23 - (17 march 2018, 18:21:01)",  "3 hours 1 minute 59 seconds")
  run_test_case("print 21:19 - (17 march 2018, 18:21:01)",  "2 hours 57 minutes 59 seconds")
  run_test_case("print 21:19 - (17 march 2018, 20:21:01)",  "57 minutes 59 seconds")
  run_test_case("print 21:21 - (17 march 2018, 21:19:01)",  "1 minute 59 seconds")
  run_test_case("print 21:21 - (17 march 2018, 21:21:01)",  NO_PERIOD)
  run_test_case("print 18:17 - (17 march 2018, 16:21:01)",  "1 hour 55 minutes 59 seconds")
  run_test_case("print 18:17 - (17 march 2018, 16:17:01)",  "1 hour 59 minutes 59 seconds")
  run_test_case("print 20:21 - (17 march 2018, 07:11:01)",  "13 hours 9 minutes 59 seconds")
  run_test_case("print 07:21 - (17 march 2018, 07:10:01)",  "10 minutes 59 seconds")
  run_test_case("print 07:01 - (17 march 2018, 07:10:01)",  "-9 minutes -1 second")
  run_test_case("print never - never",  NO_PERIOD)
  run_test_case("print today - never",  NO_PERIOD)
  run_test_case("print never - today",  NO_PERIOD)
  run_test_case("print (april 2015) - never",  NO_PERIOD)
  run_test_case("print (3 april 2015) - never",  NO_PERIOD)
  run_test_case("print (3 april 2015, 12:34) - never",  NO_PERIOD)
  run_test_case("print (3 april 2015, 12:34:45) - never",  NO_PERIOD)
  run_test_case("print 12:34 - never",  NO_PERIOD)
  run_test_case("print 12:34:45 - never",  NO_PERIOD)
  run_test_case("print never - (june 2013) ",  NO_PERIOD)
  run_test_case("print never - (23 june 2013) ",  NO_PERIOD)
  run_test_case("print never - (23 june 2013, 05:32) ",  NO_PERIOD)
  run_test_case("print never - (23 june 2013, 05:32:23) ",  NO_PERIOD)
  run_test_case("print never - 05:32 ",  NO_PERIOD)
  run_test_case("print never - 05:32:21 ",  NO_PERIOD)
  run_test_case("print never =  never",  FALSE)
  run_test_case("print never != never",  FALSE)
  run_test_case("print never <  never",  FALSE)
  run_test_case("print never <= never",  FALSE)
  run_test_case("print never >  never",  FALSE)
  run_test_case("print never >= never",  FALSE)
  run_test_case("print (january 2011) =  never",  FALSE)
  run_test_case("print (january 2011) != never",  FALSE)
  run_test_case("print (january 2011) <  never",  FALSE)
  run_test_case("print (january 2011) <= never",  FALSE)
  run_test_case("print (january 2011) >  never",  FALSE)
  run_test_case("print (january 2011) >= never",  FALSE)
  run_test_case("print never =  (january 2011)",  FALSE)
  run_test_case("print never != (january 2011)",  FALSE)
  run_test_case("print never <  (january 2011)",  FALSE)
  run_test_case("print never <= (january 2011)",  FALSE)
  run_test_case("print never >  (january 2011)",  FALSE)
  run_test_case("print never >= (january 2011)",  FALSE)
  run_test_case("print (14 january 2011) =  never",  FALSE)
  run_test_case("print (14 january 2011) != never",  FALSE)
  run_test_case("print (14 january 2011) <  never",  FALSE)
  run_test_case("print (14 january 2011) <= never",  FALSE)
  run_test_case("print (14 january 2011) >  never",  FALSE)
  run_test_case("print (14 january 2011) >= never",  FALSE)
  run_test_case("print never =  (14 january 2011)",  FALSE)
  run_test_case("print never != (14 january 2011)",  FALSE)
  run_test_case("print never <  (14 january 2011)",  FALSE)
  run_test_case("print never <= (14 january 2011)",  FALSE)
  run_test_case("print never >  (14 january 2011)",  FALSE)
  run_test_case("print never >= (14 january 2011)",  FALSE)
  run_test_case("print (14 january 2011, 14:49) =  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49) != never",  FALSE)
  run_test_case("print (14 january 2011, 14:49) <  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49) <= never",  FALSE)
  run_test_case("print (14 january 2011, 14:49) >  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49) >= never",  FALSE)
  run_test_case("print never =  (14 january 2011, 14:49)",  FALSE)
  run_test_case("print never != (14 january 2011, 14:49)",  FALSE)
  run_test_case("print never <  (14 january 2011, 14:49)",  FALSE)
  run_test_case("print never <= (14 january 2011, 14:49)",  FALSE)
  run_test_case("print never >  (14 january 2011, 14:49)",  FALSE)
  run_test_case("print never >= (14 january 2011, 14:49)",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) =  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) != never",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) <  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) <= never",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) >  never",  FALSE)
  run_test_case("print (14 january 2011, 14:49:08) >= never",  FALSE)
  run_test_case("print never =  (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print never != (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print never <  (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print never <= (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print never >  (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print never >= (14 january 2011, 14:49:08)",  FALSE)
  run_test_case("print 14:49 =  never",  FALSE)
  run_test_case("print 14:49 != never",  FALSE)
  run_test_case("print 14:49 <  never",  FALSE)
  run_test_case("print 14:49 <= never",  FALSE)
  run_test_case("print 14:49 >  never",  FALSE)
  run_test_case("print 14:49 >= never",  FALSE)
  run_test_case("print never =  14:49",  FALSE)
  run_test_case("print never != 14:49",  FALSE)
  run_test_case("print never <  14:49",  FALSE)
  run_test_case("print never <= 14:49",  FALSE)
  run_test_case("print never >  14:49",  FALSE)
  run_test_case("print never >= 14:49",  FALSE)
  run_test_case("print 14:49:08 =  never",  FALSE)
  run_test_case("print 14:49:08 != never",  FALSE)
  run_test_case("print 14:49:08 <  never",  FALSE)
  run_test_case("print 14:49:08 <= never",  FALSE)
  run_test_case("print 14:49:08 >  never",  FALSE)
  run_test_case("print 14:49:08 >= never",  FALSE)
  run_test_case("print never =  14:49:08",  FALSE)
  run_test_case("print never != 14:49:08",  FALSE)
  run_test_case("print never <  14:49:08",  FALSE)
  run_test_case("print never <= 14:49:08",  FALSE)
  run_test_case("print never >  14:49:08",  FALSE)
  run_test_case("print never >= 14:49:08",  FALSE)
  run_test_case("a = today; print a.hour == -1 and a.minute == -1 and a.second == -1 ", FALSE)
  run_test_case("a = now; b = today; print a.year == b.year or a.year == (b.year - 1) ", TRUE)
  run_test_case("a = 21 april 2011, 12:13;a", "21 April 2011, 12:13")
  run_test_case("a = (21 april 2011, 12:13), june 2021;a", lines("21 April 2011, 12:13", "June 2021"))
  run_test_case("a = (21 april 2011, 12:13), june 2021, 12 july 1999;a", lines("21 April 2011, 12:13", "June 2021", "12 July 1999"))
  run_test_case("a = (21 april 2011, 12:13), june 2021; 12 july 1999;a", lines("12 July 1999", "21 April 2011, 12:13", "June 2021"))
  run_test_case("a = (((21 april 2011, 12:13))), june 2021, 12 july 1999;a", lines("21 April 2011, 12:13", "June 2021", "12 July 1999"))
  run_test_case("a = ((3 april 2011, 12:13), june 2021, 12 july 1999);a", lines("3 April 2011, 12:13", "June 2021", "12 July 1999"))
  run_test_case("a = 2,3,4; print first(a)", "2")
  run_test_case("a = 2,3,4; print first(a) + first(a)", "4")
  run_test_case("a = 'a6',3,0,'z'; print first(a) + first(a)", "a6a6")
  run_test_case("a = 2,3,4; print last(a)", "4")
  run_test_case("a = 2,3,4; print last(a) + last(a)", "8")
  run_test_case("a = 'a6',3,0,'5'; print last(a) + last(a)", "55")
  run_test_case("a = 2,3,4; print first(a) + last(a)", "6")
  run_test_case("a = 2,3,4; print first(a) * 2 + last(a)", "8")
  run_test_case("a = 2,3,7; print first(a) * last(a)", "14")
  run_test_case("a = 2,3,4; print any(a)", "1")
  run_test_case("a = 2,3,4; b = a where this < 5; print any(b)", "1")
  run_test_case("a = 2,3,4; b = a where this >= 5; print any(b)", "0")
  run_test_case("a = 'th', 'a'; b = a where length(this) < 3; print any(b)", "1")
  run_test_case("a = 'th', 'a'; b = a where length(this) >= 3; print any(b)", "0")
  run_test_case("a = 'th', 'a'; print any(a where length(this) = 2)", "1")
  run_test_case("a = 'th', 'a'; print any(a where length(this) = 3)", "0")
  run_test_case("a = 2,3,4; print contains(a, 3)", "1")
  run_test_case("a = 2,3,4; print contains(a, 3.5)", "0")
  run_test_case("a = 2,'aa',4; print contains(a, 'aa')", "1")
  run_test_case("a = 2,'aa',4; print contains(a, 'aA')", "0")
  run_test_case("a = 2 april 2012, 4 april 2012; print contains(a, 3 april 2012)", "0")
  run_test_case("a = 2 april 2012, 4 april 2012; print contains(a, 2 april 2012)", "1")
  run_test_case("a = 2 april 2012, april 2012; print contains(a, 3 april 2012)", "1")
  run_test_case("print contains('a', 'aA')", "0")
  run_test_case("print contains('ba', 'a')", "1")
  run_test_case("print contains('ba', 'A')", "0")
  run_test_case("print contains('baos', 'as')", "0")
  run_test_case("print contains('baos', 'a0')", "0")
  run_test_case("print contains('baos', 'ao')", "1")
  run_test_case("print CONTAINS ('baos', 'baos')", "1")
  run_test_case("print contains('baos', 'baost')", "0")
  run_test_case("print contains('', 'baost')", "0")
  run_test_case("print contains('', '')", "1")
  run_test_case("print contains('4', '')", "1")
  run_test_case("print endswith('a', 'aA')", "0")
  run_test_case("print endSWIth('ba', 'a')", "1")
  run_test_case("print endswith('ba', 'b')", "0")
  run_test_case("print endswith('ba', 'A')", "0")
  run_test_case("print endswith('baos', 'os')", "1")
  run_test_case("print endswith('baos', 'as')", "0")
  run_test_case("print endswith('baos', 'a0')", "0")
  run_test_case("print endswith('baos', 'ao')", "0")
  run_test_case("print endswith('baos', 'baos')", "1")
  run_test_case("print endswith('baos', 'baost')", "0")
  run_test_case("print endswith('', 'baost')", "0")
  run_test_case("print endswith('', '')", "1")
  run_test_case("print endswith('4', '')", "1")
  run_test_case("print startsWith('a', 'aA')", "0")
  run_test_case("print startswith('ba', 'a')", "0")
  run_test_case("print startswith('ba', 'b')", "1")
  run_test_case("print startswith('ba', 'B')", "0")
  run_test_case("print startswith('ba', 'A')", "0")
  run_test_case("print startswith('baos', 'os')", "0")
  run_test_case("print startswith('baos', 'as')", "0")
  run_test_case("print startswith('baos', 'a0')", "0")
  run_test_case("print startswith('baos', 'ao')", "0")
  run_test_case("print startswith('baos', 'baos')", "1")
  run_test_case("print startswith('baos', 'b')", "1")
  run_test_case("print startswith('baos', '')", "1")
  run_test_case("print startswith('baos', 'BA')", "0")
  run_test_case("print startswith('baos', 'bas')", "0")
  run_test_case("print startswith('baos', 'ba')", "1")
  run_test_case("print startsWIth('baos', 'baost')", "0")
  run_test_case("print startswith('', 'baost')", "0")
  run_test_case("print startswith('', '')", "1")
  run_test_case("print startswith('4', '')", "1")
  run_test_case("print startswith('7cat', length('catara'))", "0")
  run_test_case("print startswith('7cat', length('catarac'))", "1")
  run_test_case("print startswith('7cat', length('cataract'))", "0")
  run_test_case("print isBinary('')", "0")
  run_test_case("print isBinary('01')", "1")
  run_test_case("print isBinary('011002')", "0")
  run_test_case("print isBinary('0110010000')", "1")
  run_test_case("print isBinary(' 0110010000')", "0")
  run_test_case("print isBinary(' 110010000 ')", "0")
  run_test_case("print isBinary('011001a000')", "0")
  run_test_case("print isBinary('0000000000')", "1")
  run_test_case("print isBinary('11111111111')", "1")
  run_test_case("print isBinary('11111I11111')", "0")
  run_test_case("print isdigit('')", "0")
  run_test_case("print isdigit('1')", "1")
  run_test_case("print isdigit('a')", "0")
  run_test_case("print isdigit('003h6')", "0")
  run_test_case("print isdigit('534')", "1")
  run_test_case("print isHex('')", "0")
  run_test_case("print isHex('1234')", "1")
  run_test_case("print isHex('12v34')", "0")
  run_test_case("print isHex('AAbb')", "1")
  run_test_case("print isHex('AAEb')", "1")
  run_test_case("print isHex('AAGb')", "0")
  run_test_case("print isHex('00000')", "1")
  run_test_case("print isHex('aa 44')", "0")
  run_test_case("print isHex('aa44')", "1")
  run_test_case("print isHex('aa44 ')", "0")
  run_test_case("print absolute(3)", "3")
  run_test_case("print absolute(-4)", "4")
  run_test_case("print absolute(-3.2)", "3.2")
  run_test_case("print absolute(0)", "0")
  run_test_case("print absolute(-1567.76)", "1567.76")
  run_test_case("print absolute(2567.76)", "2567.76")
  run_test_case("print ceil(3.2)", "4")
  run_test_case("print ceil(3)", "3")
  run_test_case("print ceil(0.6)", "1")
  run_test_case("print ceil(0)", "0")
  run_test_case("print ceil(-0)", "0")
  run_test_case("print ceil(-0.2)", "0")
  run_test_case("print ceil(-23.56)", "-23")
  run_test_case("a = 2, 3; print count(a)", "2")
  run_test_case("a = 2, 3,1+2; b = 4,6,7,5,7,4; print count(a)", "3")
  run_test_case("a = 2, '3', 4; print count(a)", "3")
  run_test_case("a = 2, '3', 4; print count(a where this != 3)", "2")
  run_test_case("a = 2, '3', 4; print count(a where this = 23)", "0")
  run_test_case("a = april 2022, june 2022; print count(a)", "2")
  run_test_case("a = april 2022, april 2022; print count(a)", "2")
  run_test_case("print floor(1777)", "1777")
  run_test_case("print floor(3.2)", "3")
  run_test_case("print floor(3)", "3")
  run_test_case("print floor(0.6)", "0")
  run_test_case("print floor(0)", "0")
  run_test_case("print floor(-0)", "0")
  run_test_case("print floor(-0.2)", "-1")
  run_test_case("print floor(-23.56)", "-24")
  run_test_case("print floor(-230)", "-230")
  run_test_case("print frombinary('101')", "5")
  run_test_case("print frombinary('1')", "1")
  run_test_case("print frombinary(101.00)", "5")
  run_test_case("print frombinary('101df01')", "0")
  run_test_case("print length('abc')", "3")
  run_test_case("print length('')", "0")
  run_test_case("print length('wo')", "2")
  run_test_case("print length('3' + 105)", "4")
  run_test_case("print length(10*10)", "3")
  run_test_case("print length(1/2)", "3")
  run_test_case("print number('4')", "4")
  run_test_case("print number('4.32')", "4.32")
  run_test_case("print number('4.32kb')", NAN)
  run_test_case("print number('-123')", "-123")
  run_test_case("print number('--123')", NAN)
  run_test_case("print number('-45.5')", "-45.5")
  run_test_case("print number('')", NAN)
  run_test_case("print number('10k')", NAN)
  run_test_case("print number('2mb')", NAN)
  run_test_case("print number('2045')", "2045")
  run_test_case("print number(' 2045')", NAN)
  run_test_case("print number('33 ')", NAN)
  run_test_case("print number('33')", "33")
  run_test_case("print power(2, 4)", "16")
  run_test_case("print power(2.5, 4)", "39.0625")
  run_test_case("print power(-2.5, 4)", "39.0625")
  run_test_case("print power(-2.5, 3)", "-15.625")
  run_test_case("print power(-2.5, 0)", "1")
  run_test_case("print power(-2.5, 1)", "-2.5")
  run_test_case("print power(2, 10)", "1024")
  run_test_case("print power(0.5, 2)", "0.25")
  run_test_case("print power(16, 0.5)", "4")
  run_test_case("print power(16, 0.25)", "2")
  run_test_case("print power(16, -0.25)", "0.5")
  run_test_case("print power(-16, -1)", "-0.0625")
  run_test_case("print power(-16, 1)", "-16")
  run_test_case("print round(0)", "0")
  run_test_case("print round(3)", "3")
  run_test_case("print round(3.14)", "3")
  run_test_case("print round(3.5)", "4")
  run_test_case("print round(3.7)", "4")
  run_test_case("print round(4)", "4")
  run_test_case("print round(223)", "223")
  run_test_case("print round(4.499999)", "4")
  run_test_case("print round(4.500001)", "5")
  run_test_case("print round(-4.499999)", "-4")
  run_test_case("print round(-4.500001)", "-5")
  run_test_case("print round(-0.2)", "0")
  run_test_case("print round(-0.5)", "-1")
  run_test_case("print round(-1.5)", "-2")
  run_test_case("print round(-0.7)", "-1")
  run_test_case("print round(-156)", "-156")
  run_test_case("print sign(1)", "1")
  run_test_case("print sign(13)", "1")
  run_test_case("print sign(-23)", "-1")
  run_test_case("print sign(0)", "0")
  run_test_case("print sign(0.001)", "1")
  run_test_case("print sign(-0.0005)", "-1")
  run_test_case("print sign(-12.45)", "-1")
  run_test_case("print sign(18.4)", "1")
  run_test_case("print sqrt(1)", "1")
  run_test_case("print sqrt(4)", "2")
  run_test_case("print sqrt(16)", "4")
  run_test_case("print sqrt(1024)", "32")
  run_test_case("print -sqrt(0.25)", "-0.5")
  run_test_case("print sqrt(0.16)", "0.4")
  run_test_case("print sqrt(289)", "17")
  run_test_case("print sqrt(114.49)", "10.7")
  run_test_case("print truncate(4)", "4")
  run_test_case("print truncate(0)", "0")
  run_test_case("print truncate(132)", "132")
  run_test_case("print truncate(-5)", "-5")
  run_test_case("print truncate(-375)", "-375")
  run_test_case("print truncate(4.2)", "4")
  run_test_case("print truncate(34.999)", "34")
  run_test_case("print truncate(35.01)", "35")
  run_test_case("print truncate(-2.4)", "-2")
  run_test_case("print truncate(-3.2)", "-3")
  run_test_case("print truncate(-56.2)", "-56")
  run_test_case("t = 1,2,3,4,5; average(t), min(t), max(t)", lines("3", "1", "5"))
  run_test_case("t = 1,2,3,4,5; sum(t), median(t)", lines("15", "3"))
  run_test_case("t = 1,2,3,4,5; sum(t, t), median(t, t)", lines("30", "3"))
  run_test_case("t = 1,2,3,4,5; average(t, t, t), min(t,t,t), max(t,t,t)", lines("3", "1", "5"))
  run_test_case("t = 34, 13, -8, 15, -12.4, 124; average(t), min(t), max(t)", lines("27.6", "-12.4", "124"))
  run_test_case("t = 34, 13, -8, 15, -12.4, 124; sum(t), median(t)", lines("165.6", "14"))
  run_test_case("t = 1,2,3,4,5; sum(t, 5), median(6, t, 6), median(6, t, 6, 6)", lines("20", "4", "4.5"))
  run_test_case("print numbers('7')", "7")
  run_test_case("print numbers('56.3')", lines("56", "3"))
  run_test_case("print numbers('tr5h7')", lines("5", "7"))
  run_test_case("print numbers('tr5.4 6')", lines("5", "4", "6"))
  run_test_case("print numbers('1uu5')", lines("1", "5"))
  run_test_case("print numbers('1uu5.')", lines("1", "5"))
  run_test_case("print christmas(2010)", "25 December 2010")
  run_test_case("print christmas(2013)", "25 December 2013")
  run_test_case("print christmas(1998)", "25 December 1998")
  run_test_case("print christmas(2150)", "25 December 2150")
  run_test_case("print christmas(1678)", "25 December 1678")
  run_test_case("print easter(2000)", "23 April 2000")
  run_test_case("print easter(2001)", "15 April 2001")
  run_test_case("print easter(2002)", "31 March 2002")
  run_test_case("print easter(1990)", "15 April 1990")
  run_test_case("print easter(2015)", "5 April 2015")
  run_test_case("print easter(2052)", "21 April 2052")
  run_test_case("print date(29,2,2012)", "29 February 2012")
  run_test_case("print date(3,6,2017)", "3 June 2017")
  run_test_case("print date(15,1,1996)", "15 January 1996")
  run_test_case("print date(20,11,2059)", "20 November 2059")
  run_test_case("print newyear(2010)", "1 January 2010, 00:00:00")
  run_test_case("print newyear(2018)", "1 January 2018, 00:00:00")
  run_test_case("print newyear(2002)", "1 January 2002, 00:00:00")
  run_test_case("print newyear(2071)", "1 January 2071, 00:00:00")
  run_test_case("print newyear(1956)", "1 January 1956, 00:00:00")
  run_test_case("print time(4, 2010)", "April 2010")
  run_test_case("print time(10, 2027)", "October 2027")
  run_test_case("print time(2, 6, 2012)", "2 June 2012")
  run_test_case("print time(30, 3, 2023)", "30 March 2023")
  run_test_case("print time(12, 7, 2015, 6, 9)", "12 July 2015, 06:09")
  run_test_case("print time(21, 9, 1996, 2, 9, 8)", "21 September 1996, 02:09:08")
  run_test_case("print time(20-10, 18/2, 1990+23, 2, 4*2, 12+14)", "10 September 2013, 02:08:26")
  run_test_case("print after('', '')", EMPTY_STRING)
  run_test_case("print after('', 'tak')", EMPTY_STRING)
  run_test_case("print after('tak', '')", EMPTY_STRING)
  run_test_case("print after(2103, 1)", "03")
  run_test_case("print after('tak', 'a')", "k")
  run_test_case("print after('tak', 't')", "ak")
  run_test_case("print after('tak', 'A')", EMPTY_STRING)
  run_test_case("print after('tak', 'k')", EMPTY_STRING)
  run_test_case("print after('tak', 'g')", EMPTY_STRING)
  run_test_case("print after('mistreats', 't')", "reats")
  run_test_case("print after('mistreatrs', 'tr')", "eatrs")
  run_test_case("print after('mistreats', 'am')", EMPTY_STRING)
  run_test_case("print after('10 5 0', 2 + 2*2 - 1)", " 0")
  run_test_case("print afterDigits('')", EMPTY_STRING)
  run_test_case("print afterDigits('mistreats')", EMPTY_STRING)
  run_test_case("print afterDigits('mistreats1')", EMPTY_STRING)
  run_test_case("print afterDigits('1mistreats')", "mistreats")
  run_test_case("print afterDigits('1234mistreats')", "mistreats")
  run_test_case("print afterDigits('trs 1234far')", "far")
  run_test_case("print afterDigits('up7')", EMPTY_STRING)
  run_test_case("print afterDigits(45+12)", EMPTY_STRING)
  run_test_case("print afterDigits(45+12 + 'j')", "j")
  run_test_case("print afterDigits(7 years + 1 year)", " years")
  run_test_case("print afterDigits(1 day + 7 years)", " years 1 day")
  run_test_case("print afterLetters('')", EMPTY_STRING)
  run_test_case("print afterLetters('up7')", "7")
  run_test_case("print afterLetters('up7a6')", "7a6")
  run_test_case("print afterLetters('u7a8')", "7a8")
  run_test_case("print afterLetters('     thank')", EMPTY_STRING)
  run_test_case("print afterLetters(beforeDigits('tha&_&6j'))", "&_&")
  run_test_case("print afterLetters('85ą17')", "17")
  run_test_case("print afterLetters('___Штиль=')", "=")
  run_test_case("print afterLetters('Штиль Тихий')", " Тихий")
  run_test_case("print afterLetters(`%^@д*(`) ", "*(")
  run_test_case("print afterLetters('15पवनव17पवनव')", "17पवनव")
  run_test_case("print afterLetters('234 78 بدیلی ' + 'h')", " h")
  run_test_case("print afterLetters('9Άεμς8')", "8")
  run_test_case("print before('', '')", EMPTY_STRING)
  run_test_case("print before('a', '')", EMPTY_STRING)
  run_test_case("print before('', 'a')", EMPTY_STRING)
  run_test_case("print before(2103, 1)", "2")
  run_test_case("print before('tak', 'a')", "t")
  run_test_case("print before('tak', 't')", EMPTY_STRING)
  run_test_case("print before('tak', 'A')", EMPTY_STRING)
  run_test_case("print before('tak', 'k')", "ta")
  run_test_case("print before('tak', 'g')", EMPTY_STRING)
  run_test_case("print before('mistreats', 't')", "mis")
  run_test_case("print before('mistreatrs', 'tr')", "mis")
  run_test_case("print before('mistreats', 'am')", EMPTY_STRING)
  run_test_case("print before('20 5 0', 2 + 2*2 - 1)", "20 ")
  run_test_case("print beforeDigits('')", EMPTY_STRING)
  run_test_case("print beforeDigits('12345')", EMPTY_STRING)
  run_test_case("print beforeDigits('g12345')", "g")
  run_test_case("print beforeDigits('gij12345')", "gij")
  run_test_case("print beforeDigits('noway')", EMPTY_STRING)
  run_test_case("print beforeDigits('Вітер634Вітер')", "Вітер")
  run_test_case("print beforeDigits('1gh')", EMPTY_STRING)
  run_test_case("print beforeDigits(' 6 4 2 4')", " ")
  run_test_case("print beforeLetters('before letters')", EMPTY_STRING)
  run_test_case("print beforeLetters(' before letters')", " ")
  run_test_case("print beforeLetters('21hu')", "21")
  run_test_case("print beforeLetters('_________')", EMPTY_STRING)
  run_test_case("print beforeLetters('пристань')", EMPTY_STRING)
  run_test_case("print beforeLetters('32 пристань')", "32 ")
  run_test_case("print beforeLetters('126,45')", EMPTY_STRING)
  run_test_case("print binary(10)", "1010")
  run_test_case("print binary(0)", "0")
  run_test_case("print binary(-10)", "-1010")
  run_test_case("print binary(1024)", "10000000000")
  run_test_case("print binary(1025)", "10000000001")
  run_test_case("print binary(518)", "1000000110")
  run_test_case("print binary(23)", "10111")
  run_test_case("print binary(23.99)", "10111")
  run_test_case("print binary(-23.99)", "-10111")
  run_test_case("print binary(0.45)", "0")
  run_test_case("print binary(-0.12)", "0")
  run_test_case("print binary(-1.12)", "-1")
  run_test_case("print binary(2312312)", "1000110100100001111000")
  run_test_case("print capitalize(23)", "23")
  run_test_case("print capitalize('23u45a')", "23U45A")
  run_test_case("print capitalize('')", EMPTY_STRING)
  run_test_case("print capitalize('join')", "Join")
  run_test_case("print capitalize('This')", "This")
  run_test_case("print capitalize('a long seNtence')", "A Long Sentence")
  run_test_case("print capitalize('capi talize')", "Capi Talize")
  run_test_case("print capitalize('CAPI TALIZE')", "Capi Talize")
  run_test_case("print capitalize('CaPi tALizE')", "Capi Talize")
  run_test_case("print capitalize('56go_to4')", "56Go_To4")
  run_test_case("print concatenate('hy')", "hy")
  run_test_case("print concatenate('hy', 'lo')", "hylo")
  run_test_case("print concatenate('hy', 4+3, 'ko')", "hy7ko")
  run_test_case("a = 3,2,1,4; print concatenate(a)", "3214")
  run_test_case("a = 3,2,1,4; print concatenate(a, 'i', a)", "3214i3214")
  run_test_case("a = 3,'h',1,4; print concatenate(a, 'i', a)", "3h14i3h14")
  run_test_case("a = 3,2,1,april 2020; print concatenate(a, 5 days - 1 day, a)", "321April 20204 days321April 2020")
  run_test_case("print digits('')", EMPTY_STRING)
  run_test_case("print digits('f56')", "56")
  run_test_case("print digits(10*0.15)", "15")
  run_test_case("print digits('76mb + 8 mb')", "768")
  run_test_case("print digits('j9_4n4m9 ?201')", "9449201")
  run_test_case("print digits('56пристань1')", "561")
  run_test_case("print digits('there is no digit')", EMPTY_STRING)
  run_test_case("print digits('hhhhhhhhh9')", "9")
  run_test_case("print digits('4______?')", "4")
  run_test_case("print digits('пристань')", EMPTY_STRING)
  run_test_case("print digits(4 june 2021)", "42021")
  run_test_case("print digits(4 june 2021 - 5 days)", "302021")
  run_test_case("print fill('word', 2)", "word")
  run_test_case("print fill('word', 1)", "word")
  run_test_case("print fill('word', 0)", "word")
  run_test_case("print fill('word', -12)", "word")
  run_test_case("print fill('word', -12)", "word")
  run_test_case("print fill('word', 5)", "0word")
  run_test_case("print fill('word', 7)", "000word")
  run_test_case("print fill('', 2)", "00")
  run_test_case("print fill('', 1)", "0")
  run_test_case("print fill('', 0)", EMPTY_STRING)
  run_test_case("print fill('', -1)", EMPTY_STRING)
  run_test_case("print fill('word', 6.99)", "00word")
  run_test_case("print hex(0)", "0")
  run_test_case("print hex(3)", "3")
  run_test_case("print hex(12)", "c")
  run_test_case("print hex(121)", "79")
  run_test_case("print hex(-151)", "-97")
  run_test_case("print hex(-151.1)", "-97")
  run_test_case("print hex(-151.87)", "-97")
  run_test_case("print hex(50)", "32")
  run_test_case("print hex(-567334745.71)", "-21d0d759")
  run_test_case("print join(2, ', ')", "2")
  run_test_case("print join('', ', ')", EMPTY_STRING)
  run_test_case("a = 3,'h',1,4; print join(a, '')", "3h14")
  run_test_case("a = 3,'h',1,4; print join(a, ',')", "3,h,1,4")
  run_test_case("a = 3,'h',1,4; print join(a, ', ')", "3, h, 1, 4")
  run_test_case("a = 3,'h',1,4; print join(a, 2+2*12)", "326h261264")
  run_test_case("a = '', '', ''; print join(a, 4)", "44")
  run_test_case("a = '', 1, '', ''; print join(a, 4)", "4144")
  run_test_case("print left('leftest', 0)", EMPTY_STRING)
  run_test_case("print left('leftest', -3)", EMPTY_STRING)
  run_test_case("print left('leftest', 1)", "l")
  run_test_case("print left('leftest', 2)", "le")
  run_test_case("print left('leftest', 6)", "leftes")
  run_test_case("print left('leftest', 6.23 + 1 - 1)", "leftes")
  run_test_case("print left('leftest', 7)", "leftest")
  run_test_case("print left('leftest', 12)", "leftest")
  run_test_case("print left(312, 2)", "31")
  run_test_case("print left(312, 1)", "3")
  run_test_case("print left(312, 4)", "312")
  run_test_case("print left(312, -3)", EMPTY_STRING)
  run_test_case("print left('', -3)", EMPTY_STRING)
  run_test_case("print left('', 1)", EMPTY_STRING)
  run_test_case("print left('', 3)", EMPTY_STRING)
  run_test_case("print left('', 6)", EMPTY_STRING)
  run_test_case("print letters('')", EMPTY_STRING)
  run_test_case("print letters('1256.34')", EMPTY_STRING)
  run_test_case("print letters('a______b_e')", "abe")
  run_test_case("print letters('This&That')", "ThisThat")
  run_test_case("print letters('12&12')", EMPTY_STRING)
  run_test_case("print letters('12пристань12')", "пристань")
  run_test_case("print letters('12 пристань 12aст')", "пристаньaст")
  run_test_case("print letters(',,,,,,,,h9o')", "ho")
  run_test_case("print lower('')", EMPTY_STRING)
  run_test_case("print lower('12')", "12")
  run_test_case("print lower('1BVR2')", "1bvr2")
  run_test_case("print lower('feW WORds')", "few words")
  run_test_case("print lower('feW 77WORds')", "few 77words")
  run_test_case("print lower('??AND THIS IS__')", "??and this is__")
  run_test_case("print lower('12')", "12")
  run_test_case("print lower('3 ДЕрЕВЬЯ')", "3 деревья")
  run_test_case("print monthName(1)", "January")
  run_test_case("print monthName(2)", "February")
  run_test_case("print monthName(3.2)", "March")
  run_test_case("print monthName(4+0.2)", "April")
  run_test_case("print monthName(7-2)", "May")
  run_test_case("print monthName(6.0001)", "June")
  run_test_case("print monthName(7)", "July")
  run_test_case("print monthName(8)", "August")
  run_test_case("print monthName(9)", "September")
  run_test_case("print monthName(10)", "October")
  run_test_case("print monthName(11)", "November")
  run_test_case("print monthName(12)", "December")
  run_test_case("print monthName(13)", EMPTY_STRING)
  run_test_case("print monthName(0)", EMPTY_STRING)
  run_test_case("print monthName(-2)", EMPTY_STRING)
  run_test_case("print monthName(25)", EMPTY_STRING)
  run_test_case("print monthName(12325)", EMPTY_STRING)
  run_test_case("print monthName(4 april 2012)", "April")
  run_test_case("print monthName(21 june 2012 - 5 days)", "June")
  run_test_case("print monthName(21 june 2012 - 27 days)", "May")
  run_test_case("print monthName(21 june 2012 + 10 days + 80 hours)", "July")
  run_test_case("print path(0, 1)", path("0", "1"))
  run_test_case("print path(3, 4, 5, 6, 7)", path("3", "4", "5", "6", "7"))
  run_test_case("print path('some', 'relative', 'path')", path("some", "relative", "path"))
  run_test_case("print path('c:/', 'absolute', 'path')", path("c:", "absolute", "path"))
  run_test_case("print path('another', 'c:/', 'path')", path("c:", "path"))
  run_test_case("print path('another', 'another', 'c:/', 'path')", path("c:", "path"))
  run_test_case("print path('another', 'another', 'c:/') ", "c:")
  run_test_case("print path('g/d', '..') ", "g")
  run_test_case("print path('gg/dd/ee', '..') ", path("gg", "dd"))
  run_test_case("print path('gg/dd/ee/.', '..') ", path("gg", "dd"))
  run_test_case("print path('gg/dd/./ee/././.', '..') ", path("gg", "dd"))
  run_test_case("print path('c:/', '..') ", EMPTY_STRING)
  run_test_case("print path('c:/d', '..') ", "c:")
  run_test_case("print path('c:/d', '.') ", path("c:", "d"))
  run_test_case("print path('c:/dd/ee', '..') ", path("c:", "dd"))
  run_test_case("print path('c:/d/b', '..\..') ", "c:")
  run_test_case("print path('c:/d/b/..', '..\..') ", EMPTY_STRING)
  run_test_case("print path('c:/d/b/.', '..\../..') ", EMPTY_STRING)
  run_test_case("print path('c:/d/b/.', '..\../../..') ", EMPTY_STRING)
  run_test_case("print path('c:/d/../b/.', '..') ", "c:")
  run_test_case("print path('c:/d/../', '.') ", "c:")
  run_test_case("print path('c:/d/gt/../', '.') ", path("c:", "d"))
  run_test_case("print path('c:/d/gt/./', '.') ", path("c:", "d", "gt"))
  run_test_case("print path('c:/d/gt/..\./', '.') ", path("c:", "d"))
  run_test_case("print path('c:/d/gt/../', 'a') ", path("c:", "d", "a"))
  run_test_case("print path('c:/d/gt/./', 'a') ", path("c:", "d", "gt", "a"))
  run_test_case("print path('c:/d/gt/./', '/.') ", path("c:", "d", "gt"))
  run_test_case("print path('a', 'b') ", path("a", "b"))
  run_test_case("print path('a', '.') ", "a")
  run_test_case("print path('a', '..') ", ".")
  run_test_case("print path('a', '..\.') ", ".")
  run_test_case("print path('a', '.\..') ", ".")
  run_test_case("print path('a', '..\..') ", "..")
  run_test_case("print path('a\.', '..\..') ", "..")
  run_test_case("print path('a\.', '..\.\../.') ", "..")
  run_test_case("print path('a\.', '..\.\../.\..') ", path("..", ".."))
  run_test_case("print path('.', '.') ", ".")
  run_test_case("print path('.', '..') ", "..")
  run_test_case("print path('.', 'a') ", "a")
  run_test_case("print path('.', 'aa/bb') ", path("aa", "bb"))
  run_test_case("print path('.', 'a') ", "a")
  run_test_case("print path('..', 'aa') ", path("..", "aa"))
  run_test_case("print path('../a', 'aa') ", path("..", "a", "aa"))
  run_test_case("print path('./a', 'aa') ", path("a", "aa"))
  run_test_case("print path('./a', '..') ", ".")
  run_test_case("print path('..', '..') ", path("..", ".."))
  run_test_case("print path('..', 'a') ", path("..", "a"))
  run_test_case("print path('..', '../b') ", path("..", "..", "b"))
  run_test_case("print path('../..', '../b') ", path("..", "..", "..", "b"))
  run_test_case("print path('../../.', '../b/.') ", path("..", "..", "..", "b"))
  run_test_case("print repeat('', 0)", EMPTY_STRING)
  run_test_case("print repeat('', 1)", EMPTY_STRING)
  run_test_case("print repeat('', -20)", EMPTY_STRING)
  run_test_case("print repeat('', -10.67)", EMPTY_STRING)
  run_test_case("print repeat('', 10)", EMPTY_STRING)
  run_test_case("print repeat('a', 1)", "a")
  run_test_case("print repeat('a', 3)", "aaa")
  run_test_case("print repeat('a', 7)", "aaaaaaa")
  run_test_case("print repeat('a', 0)", EMPTY_STRING)
  run_test_case("print repeat('a', -3)", EMPTY_STRING)
  run_test_case("print repeat('aB', 3)", "aBaBaB")
  run_test_case("print repeat('aB', -3)", EMPTY_STRING)
  run_test_case("print repeat('при', 5.5)", "приприприприпри")
  run_test_case("print repeat('при', -3)", EMPTY_STRING)
  run_test_case("print replace(1234, 2, 4)", "1434")
  run_test_case("print replace(1234, 2, 700)", "170034")
  run_test_case("print replace(1234, '', 4)", "1234")
  run_test_case("print replace(1234, '', '')", "1234")
  run_test_case("print replace(1234, 2, '')", "134")
  run_test_case("print replace('', 2, 4)", EMPTY_STRING)
  run_test_case("print replace('', 2, '')", EMPTY_STRING)
  run_test_case("print replace('', '', 2)", EMPTY_STRING)
  run_test_case("print replace('', '', '')", EMPTY_STRING)
  run_test_case("print replace('thing', 'i', 'o')", "thong")
  run_test_case("print replace('thing', 'i', 'out')", "thoutng")
  run_test_case("print replace('thing', 'hi', 'i')", "ting")
  run_test_case("print replace('thing hi', 'hi', 'mi')", "tming mi")
  run_test_case("print replace('thing Hi', 'hi', 'mi')", "tming Hi")
  run_test_case("print replace('thing Hi', 'Hi', 'miu')", "thing miu")
  run_test_case("print replace('thing', 'hij', 'i')", "thing")
  run_test_case("print replace('thing', 'w', '')", "thing")
  run_test_case("print replace('thing in minside', 'in', '')", "thg  mside")
  run_test_case("print replace('thing in minside', 'inu', '')", "thing in minside")
  run_test_case("print replace('thing in miNside', 'iN', '')", "thing in mside")
  run_test_case("print replace('thing in miNside', 'th', '')", "ing in miNside")
  run_test_case("print reverse('')", EMPTY_STRING)
  run_test_case("print reverse('a')", "a")
  run_test_case("print reverse('abc')", "cba")
  run_test_case("print reverse(1456)", "6541")
  run_test_case("print reverse(4 days)", "syad 4")
  run_test_case("print reverse('a long Sentence')", "ecnetneS gnol a")
  run_test_case("print right('righty', 0)", EMPTY_STRING)
  run_test_case("print right('righty', -3)", EMPTY_STRING)
  run_test_case("print right('righty', 1)", "y")
  run_test_case("print right('righty', 2)", "ty")
  run_test_case("print right('righty', 5)", "ighty")
  run_test_case("print right('righty', 5.23 + 1 - 1)", "ighty")
  run_test_case("print right('righty', 6)", "righty")
  run_test_case("print right('righty', 7)", "righty")
  run_test_case("print right('righty', 12)", "righty")
  run_test_case("print right(312, 2)", "12")
  run_test_case("print right(312, 1)", "2")
  run_test_case("print right(312, 4)", "312")
  run_test_case("print right(312, -3)", EMPTY_STRING)
  run_test_case("print right('', -3)", EMPTY_STRING)
  run_test_case("print right('', 1)", EMPTY_STRING)
  run_test_case("print right('', 3)", EMPTY_STRING)
  run_test_case("print right('', 6)", EMPTY_STRING)
  run_test_case("print roman(0)", "N")
  run_test_case("print roman(1)", "I")
  run_test_case("print roman(2)", "II")
  run_test_case("print roman(3)", "III")
  run_test_case("print roman(4)", "IV")
  run_test_case("print roman(5)", "V")
  run_test_case("print roman(6)", "VI")
  run_test_case("print roman(13)", "XIII")
  run_test_case("print roman(21)", "XXI")
  run_test_case("print roman(34)", "XXXIV")
  run_test_case("print roman(59)", "LIX")
  run_test_case("print roman(88)", "LXXXVIII")
  run_test_case("print roman(99)", "XCIX")
  run_test_case("print roman(100)", "C")
  run_test_case("print roman(117)", "CXVII")
  run_test_case("print roman(166)", "CLXVI")
  run_test_case("print roman(203)", "CCIII")
  run_test_case("print roman(209)", "CCIX")
  run_test_case("print roman(311)", "CCCXI")
  run_test_case("print roman(562)", "DLXII")
  run_test_case("print roman(712.5)", "DCCXIIS")
  run_test_case("print roman(888.75)", "DCCCLXXXVIIIS···")
  run_test_case("print roman(1012.11)", "MXII·")
  run_test_case("print roman(1999)", "MCMXCIX")
  run_test_case("print roman(2000)", "MM")
  run_test_case("print roman(2021)", "MMXXI")
  run_test_case("print roman(3456.78)", "MMMCDLVIS···")
  run_test_case("print roman(4456.78)", "I̅V̅CDLVIS···")
  run_test_case("print roman(1231212)", "M̅C̅C̅X̅X̅X̅I̅CCXII")
  run_test_case("print roman(678344)", "D̅C̅L̅X̅X̅V̅I̅I̅I̅CCCXLIV")
  run_test_case("print roman(-453123.5)", "-C̅D̅L̅I̅I̅I̅CXXIIIS")
  run_test_case("print roman(657231.999)", "D̅C̅L̅V̅I̅I̅CCXXXIS·····")
  run_test_case("print roman(0.25)", "···")
  run_test_case("print roman(-0.25)", "-···")
  run_test_case("print roman(1.5)", "IS")
  run_test_case("print roman(25)", "XXV")
  run_test_case("print roman(7)", "VII")
  run_test_case("print roman(-7)", "-VII")
  run_test_case("print roman(-17.5)", "-XVIIS")
  run_test_case("print string(7)", "7")
  run_test_case("print string(2-3)", "-1")
  run_test_case("print string(7 days - 1 day)", "6 days")
  run_test_case("print string(4 june 2020)", "4 June 2020")
  run_test_case("print string(true)", "1")
  run_test_case("print string(false)", "0")
  run_test_case("print 3+7", "10")
  run_test_case("print 3 + string(7)", "37")
  run_test_case("print 1 day + 4 days", "5 days")
  run_test_case("print 1 day + string(4 days)", "1 day4 days")
  run_test_case("print true + true", "2")
  run_test_case("print true + string(false)", "10")
  run_test_case("print 3 april 2021 + 3 weeks", "24 April 2021")
  run_test_case("print 3 april 2021 + string(3 weeks)", "3 April 20213 weeks")
  run_test_case("print string(3 april 2021) + string(3 weeks)", "3 April 20213 weeks")
  run_test_case("print string(3 april 2021) + 3 weeks", "3 April 20213 weeks")
  run_test_case("print substring('example', 0)", "example")
  run_test_case("print substring('example', 1)", "xample")
  run_test_case("print substring('example', 4)", "ple")
  run_test_case("print substring('example', 6)", "e")
  run_test_case("print substring('example', 7)", EMPTY_STRING)
  run_test_case("print substring('example', 12)", EMPTY_STRING)
  run_test_case("print substring('example', -1)", "e")
  run_test_case("print substring('example', -2)", "le")
  run_test_case("print substring('example', -5)", "ample")
  run_test_case("print substring('example', -7)", "example")
  run_test_case("print substring('example', -70.45)", "example")
  run_test_case("print substring('example', 0, 1)", "e")
  run_test_case("print substring('example', 0, 2)", "ex")
  run_test_case("print substring('example', 0, 5)", "examp")
  run_test_case("print substring('example', 0, 50)", "example")
  run_test_case("print substring('example', 1, 2)", "xa")
  run_test_case("print substring('example', 1, 4)", "xamp")
  run_test_case("print substring('example', 1, 5)", "xampl")
  run_test_case("print substring('example', 1, 6)", "xample")
  run_test_case("print substring('example', 1, 84)", "xample")
  run_test_case("print substring('example', 1, 0)", EMPTY_STRING)
  run_test_case("print substring('example', 1, -1)", EMPTY_STRING)
  run_test_case("print substring('example', 1, -2)", EMPTY_STRING)
  run_test_case("print substring('example', 1, -13)", EMPTY_STRING)
  run_test_case("print substring('example', 0, -13)", EMPTY_STRING)
  run_test_case("print substring('example', 5, -13)", EMPTY_STRING)
  run_test_case("print substring('example', -1, -13)", EMPTY_STRING)
  run_test_case("print substring('example', -3, -13)", EMPTY_STRING)
  run_test_case("print substring('example', -654, -13)", EMPTY_STRING)
  run_test_case("print substring('example', -1, 1)", "e")
  run_test_case("print substring('example', -1, 14)", "e")
  run_test_case("print substring('example', -2, 1)", "l")
  run_test_case("print substring('example', -2, 2)", "le")
  run_test_case("print substring('example', -4, 2)", "mp")
  run_test_case("print substring('example', -4, 3)", "mpl")
  run_test_case("print substring('example', -6, 3)", "xam")
  run_test_case("print substring('example', -7, 3)", "exa")
  run_test_case("print substring('example', -8, 3)", "ex")
  run_test_case("print substring('example', -9, 3)", "e")
  run_test_case("print substring('example', -10, 3)", EMPTY_STRING)
  run_test_case("print substring('example', -119, 113)", "e")
  run_test_case("print substring('example', -119, 115)", "exa")
  run_test_case("print substring('example', -119, -115)", EMPTY_STRING)
  run_test_case("print substring('example', -3, 0)", EMPTY_STRING)
  run_test_case("print substring('example', 1, 0)", EMPTY_STRING)
  run_test_case("print substring('example', 3, 0)", EMPTY_STRING)
  run_test_case("print substring('example', 124, 0)", EMPTY_STRING)
  run_test_case("print trim('')", EMPTY_STRING)
  run_test_case("print trim('  ')", EMPTY_STRING)
  run_test_case("print trim('  7')", "7")
  run_test_case("print trim('4   6')", "4   6")
  run_test_case("print trim('   6')", "6")
  run_test_case("print trim('  3 6')", "3 6")
  run_test_case("print trim('  ,?')", ",?")
  run_test_case("print trim('  word ')", "word")
  run_test_case("print trim('  two wordS ')", "two wordS")
  run_test_case("print upper('')", EMPTY_STRING)
  run_test_case("print upper('12')", "12")
  run_test_case("print upper('1bvr2')", "1BVR2")
  run_test_case("print upper('feW WORds')", "FEW WORDS")
  run_test_case("print upper('feW 77WORds')", "FEW 77WORDS")
  run_test_case("print upper('??and this is__')", "??AND THIS IS__")
  run_test_case("print upper('12')", "12")
  run_test_case("print upper('3 ДЕрЕВЬЯ')", "3 ДЕРЕВЬЯ")
  run_test_case("print weekDayName(1)", "Monday")
  run_test_case("print weekDayName(2.001)", "Tuesday")
  run_test_case("print weekDayName(3.888)", "Wednesday")
  run_test_case("print weekDayName(4+1-1)", "Thursday")
  run_test_case("print weekDayName(2*2+1)", "Friday")
  run_test_case("print weekDayName(6/2 + 3)", "Saturday")
  run_test_case("print weekDayName(7)", "Sunday")
  run_test_case("print weekDayName(8)", EMPTY_STRING)
  run_test_case("print weekDayName(0)", EMPTY_STRING)
  run_test_case("print weekDayName(-2)", EMPTY_STRING)
  run_test_case("print weekDayName(-123.32)", EMPTY_STRING)
  run_test_case("print weekDayName(10)", EMPTY_STRING)
  run_test_case("print weekDayName(1231235)", EMPTY_STRING)
  run_test_case("print weekDayName(23 march 2021)", "Tuesday")
  run_test_case("print weekDayName(2 february 2012)", "Thursday")
  run_test_case("print weekDayName((1 february 2012, 23:15:02))", "Wednesday")
  run_test_case("print weekDayName(9 november 1996)", "Saturday")
  run_test_case("print weekDayName(november 1996)", EMPTY_STRING)
  run_test_case("print weekDayName(15 december 2034)", "Friday")
  run_test_case("print weekDayName(november 1996)", EMPTY_STRING)
  run_test_case("print weekDayName((15 december 2034, 12:15))", "Friday")
  run_test_case("print characters(''); print 6", "6")
  run_test_case("print characters('a')", "a")
  run_test_case("print characters('8')", "8")
  run_test_case("print characters('óó')", lines("ó", "ó"))
  run_test_case("print characters('try')", lines("t", "r", "y"))
  run_test_case("print characters('long words')", lines("l", "o", "n", "g", " ", "w", "o", "r", "d", "s"))
  run_test_case("print numbers(3 november 1996)", lines("3", "1996"))
  run_test_case("numbers(3 november 1996) { print number(this) - 1000 }", lines("-997", "996"))
  run_test_case("print numbers('5 june 1 1996')", lines("5", "1", "1996"))
  run_test_case("print numbers('a')", NOTHING)
  run_test_case("print numbers(';;')", NOTHING)
  run_test_case("print numbers('')", NOTHING)
  run_test_case("print numbers('2')", "2")
  run_test_case("print numbers('9')", "9")
  run_test_case("print numbers('0')", "0")
  run_test_case("print numbers('23')", "23")
  run_test_case("print numbers('09')", "9")
  run_test_case("print numbers('17')", "17")
  run_test_case("print numbers('a7')", "7")
  run_test_case("print numbers('?0')", "0")
  run_test_case("print numbers('2u')", "2")
  run_test_case("print numbers('8u')", "8")
  run_test_case("print numbers('trait')", NOTHING)
  run_test_case("print numbers('m>y mu> ?ki k__fg s?')", NOTHING)
  run_test_case("print numbers('3,4,5,6')", lines("3", "4", "5", "6"))
  run_test_case("print numbers('3.4.5.6')", lines("3", "4", "5", "6"))
  run_test_case("print numbers('3.4 5.6')", lines("3", "4", "5", "6"))
  run_test_case("print numbers('a3.4.5 6.7v')", lines("3", "4", "5", "6", "7"))
  run_test_case("print numbers('53ko7;6;4 ')", lines("53", "7", "6", "4"))
  run_test_case("print numbers('  53  k o?7>6;4 ')", lines("53", "7", "6", "4"))
  run_test_case("print split('', '')", NOTHING)
  run_test_case("print split('', 'a')", NOTHING)
  run_test_case("print split('', 'bgf')", NOTHING)
  run_test_case("print split('', 'bgfdfgdf')", NOTHING)
  run_test_case("print split('a', '')", "a")
  run_test_case("print split(1000 * 12, '')", lines("1", "2", "0", "0", "0"))
  run_test_case("print split('b', 'a')", "b")
  run_test_case("print split('bowe', 'a')", "bowe")
  run_test_case("print split('two trees', 'a')", "two trees")
  run_test_case("print split('high', 'ha')", "high")
  run_test_case("print split('high', 'higher')", "high")
  run_test_case("print split('a', 'a')", lines(EMPTY_STRING, EMPTY_STRING))
  run_test_case("print split('aa', 'a')", lines(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING))
  run_test_case("print split('aba', 'a')", lines(EMPTY_STRING, "b", EMPTY_STRING))
  run_test_case("print split('ba', 'a')", lines("b", EMPTY_STRING))
  run_test_case("print split('bay', 'a')", lines("b", "y"))
  run_test_case("print split('treetr', 'tr')", lines(EMPTY_STRING, "ee", EMPTY_STRING))
  run_test_case("print split('treete', 'tr')", lines(EMPTY_STRING, "eete"))
  run_test_case("print split('trertetretr', 'tr')", lines(EMPTY_STRING, "erte", "e", EMPTY_STRING))
  run_test_case("print split('ertetretr', 'tr')", lines("erte", "e", EMPTY_STRING))
  run_test_case("print split('monmonmomonmo', 'monmo')", lines(EMPTY_STRING, "nmo", EMPTY_STRING))
  run_test_case("print split('montmonmomotnmo', 'monmo')", lines("mont", "motnmo"))
  run_test_case("print split('movmove', 'move')", lines("mov", EMPTY_STRING))
  run_test_case("print words('')", NOTHING)
  run_test_case("print words('<<<<<')", NOTHING)
  run_test_case("print words(167+ 5)", NOTHING)
  run_test_case("print words('a')", "a")
  run_test_case("print words('45a32')", "a")
  run_test_case("print words('a b')", lines("a", "b"))
  run_test_case("print words('78_gaPs in')", lines("gaPs", "in"))
  run_test_case("print words(',h,j,r,d')", lines("h", "j", "r", "d"))
  run_test_case("print words('пристань')", "пристань")
  run_test_case("print words('this<<<<пристань  ')", lines("this", "пристань"))
  run_test_case("print words('21jj{aa  ? bb}')", lines("jj", "aa", "bb"))
  run_test_case("print shiftmonth(june, 0)", "6")
  run_test_case("print shiftmonth(6, -3)", "3")
  run_test_case("print shiftmonth(6, -6)", "12")
  run_test_case("print shiftmonth(6, -60)", "6")
  run_test_case("print shiftmonth(12 april 2012, 7)", "11")
  run_test_case("print shiftmonth( july 2012, -23)", "8")
  run_test_case("print shiftweekday( 1, -1)", "7")
  run_test_case("print shiftweekday( 1, -16)", "6")
  run_test_case("print shiftweekday( 5, 10)", "1")
  run_test_case("print shiftweekday( 12 september 2019, 1)", "5")
  run_test_case("print shiftweekday( (11 september 2019, 12:23), 3)", "6")
  run_test_case("print shiftweekday( (12 september 2029, 11:23:56), -3)", "7")
  run_test_case("print isnan(nan)", TRUE)
  run_test_case("print isnan(1/0)", TRUE)
  run_test_case("print isnan(1+0)", FALSE)
  run_test_case("print isnan(1/2)", FALSE)
  run_test_case("print isnan(-nan)", TRUE)
  run_test_case("print isnan(-16/0)", TRUE)
  run_test_case("print isnan(-67)", FALSE)
  run_test_case("print isnan(-456456456.85)", FALSE)
  run_test_case("print isnever(never)", TRUE)
  run_test_case("print isnever(now)", FALSE)
  run_test_case("print isnever(june 2k23)", FALSE)
  run_test_case("print isnever(4 june 2k23)", FALSE)
  run_test_case("print isnever((4 june 2k23, 15:34))", FALSE)
  run_test_case("print isnever((4 june 2k23, 15:34:31))", FALSE)
  run_test_case("print isnever(12:34)", FALSE)
  run_test_case("print isnever(12:34:35)", FALSE)
  run_test_case("print clock(20,12)",  "20:12")
  run_test_case("print clock(20,12,6)",  "20:12:06")
  run_test_case("a = 5; print clock(a, 6)",  "05:06")
  run_test_case("a = 5; print clock(a, 6, 8)",  "05:06:08")
  run_test_case("a = -5; print clock(-1, 34, 12)", NEVER)
  run_test_case("a = -5; print clock(1, 74, 12)", NEVER)
  run_test_case("a = -5; print clock(a, a, a)", NEVER)
  run_test_case("print raw('KĄTEM') ", 'KATEM')
  run_test_case("print raw('gęślą jaźńŃ') ", 'gesla jaznN')
  run_test_case("print raw('hola áéíóúüñ¿¡ ÁÉÍÓÚÜÑ') ", 'hola aeiouun¿¡ AEIOUUN')
  run_test_case("print raw('Ænima') ", 'AEnima')
  run_test_case("print raw('æóóæ') ", 'aeooae')
  run_test_case("print raw('Œąąœ6') ", 'OEaaoe6')
  run_test_case("print raw('Karadžiću čćžđšæž') ", 'Karadzicu cczdsaez')
  run_test_case("print raw('ÁČĎÉĚÍŇÓŘŠÚŮÝŽ áčďéěíňóřšúůýž') ", 'ACDEEINORSUUYZ acdeeinorsuuyz')
  run_test_case("print raw('ĄĆĘŁŃÓŚŹŻ ąćęłńóśźż') ", 'ACELNOSZZ acelnoszz')
  run_test_case("print raw('Türkiye Türkçesi ÇçĞğÖöŞşÜü') ", 'Turkiye Turkcesi CcGgOoSsUu')
  run_test_case("print raw('áâãàçéêíóôõú ÁÂÃÀÇÉÊÍÓÔÕÚ') ", 'aaaaceeiooou AAAACEEIOOOU')
  run_test_case("print raw('ßÄÖÜäöü') ", 'ssAOUaou')
  run_test_case("print resemblance('KĄTEM', 'katem') ", '1')
  run_test_case("print resemblance('katem', 'KĄTEM') ", '1')
  run_test_case("print resemblance('KĄTEM', 'katex') ", '0.8')
  run_test_case("print resemblance('katem', 'KĄTEX') ", '0.8')
  run_test_case("print resemblance('ab', 'cd') ", '0')
  run_test_case("print resemblance('ab', 'cb') ", '0.5')
  run_test_case("print resemblance('', '') ", '1')
  run_test_case("print resemblance('ab', '') ", '1')
  run_test_case("print resemblance('long text', '') ", '1')
  run_test_case("print resemblance('', '2') ", '0')
  run_test_case("print resemblance('', 'hjghj') ", '0')
  run_test_case("print resemblance('hjghj', '1' ) ", '0')
  run_test_case("print resemblance('123', 'hjghj') ", '0')
  run_test_case("print resemblance( 'hjghj', '12356756') ", '0')
  run_test_case("print resemblance('a', 'abcd') ", '0.25')
  run_test_case("print resemblance('ba', 'abcd') ", '0.25')
  run_test_case("print resemblance('bac', 'abcd') ", '0.5')
  run_test_case("print resemblance('abc', 'abcd') ", '0.75')
  run_test_case("print resemblance('abd', 'abcd') ", '0.75')
  run_test_case("print resemblance('aBC', 'abcD') ", '0.75')
  run_test_case("print resemblance('ABd', 'abcD') ", '0.75')
  run_test_case("print resemblance('0123456789', '56' ) ", '1')
  run_test_case("print resemblance('0123456789', '01' ) ", '1')
  run_test_case("print resemblance('0123456789', '789' ) ", '1')
  run_test_case("print resemblance('0123456789', '4578' ) ", '0.75')
  run_test_case("print resemblance('0123456789', '24578' ) ", '0.6')
  run_test_case("print resemblance('0123456789', '23457' ) ", '0.8')
  run_test_case("print resemblance('0123456789', 'a0' ) ", '0.5')
  run_test_case("print resemblance('0123456789', 'abc0' ) ", '0.25')
  run_test_case("print resemblance('0123456789', 'a012') ", '0.75')
  run_test_case("print resemblance('0123456789', 'ab01' ) ", '0.5')
  run_test_case("print resemblance('0123456789', 'ab01234567') ", '0.8')
  run_test_case("print resemblance('0123456789', 'ab01234589') ", '0.6')
  run_test_case("print resemblance('0123456789', 'ab01x34589' ) ", '0.5')
  run_test_case("print resemblance('0123456789', 'ab01x3458>') ", '0.5')
  run_test_case("print resemblance('0123456789', '789k' ) ", '0.75')
  run_test_case("print resemblance('0123456789', '789kb' ) ", '0.6')
  run_test_case("print resemblance('0123456789', '456789kb' ) ", '0.75')
  run_test_case("print resemblance('0123456789', '45789' ) ", '0.8')
  run_test_case("print resemblance('0123456789', 'hh789' ) ", '0.6')
  run_test_case("print resemblance('0123456789', '89xxxxxx' ) ", '0.25')
  run_test_case("print resemblance('0123456789', '49xxxxxx' ) ", '0.125')
  run_test_case("print resemblance('0123456789', '12346789') ", '0.875')
  run_test_case("print resemblance('0123456789', '1234556789') ", '0.9')
  run_test_case("print resemblance('0123456789', '1234555678') ", '0.8')
  run_test_case("print resemblance('0123456789', '2345555678' ) ", '0.7')
  run_test_case("print resemblance('0123456789', '3455555678') ", '0.6')
  run_test_case("print resemblance('0123456789', '3455555567') ", '0.5')

  run_test_case(" 'a' { depth}", "0")
  run_test_case(" '.' { depth}", "-1")
  run_test_case(" 'dgfd' { depth}", "0")
  run_test_case(" 'dgf/djgf' { depth}", "1")
  run_test_case(" 'dgf/djgf/.\mg/g' { depth}", "3")
  run_test_case(" '..' { depth}", "-2")
  run_test_case(" '../.' { depth}", "-2")
  run_test_case(" './..' { depth}", "-2")
  run_test_case(" '../..\..' { depth}", "-4")
  run_test_case(" '../..\..\k' { depth}", "-3")
  run_test_case(" '../..\k\..' { depth}", "-3")
  run_test_case(" '../..\k\..\po' { depth}", "-2")
  run_test_case(" '../..\k\..\dpo\du\djh\dp' { depth}", "1")
  run_test_case(" 'dgf/djgf\..' { depth}", "0")
  run_test_case(" 'dgf/djgf\..\.' { depth}", "0")
  run_test_case(" 'dgf/djgghf\.\..' { depth}", "0")
  run_test_case(" 'dgf/djgf\..\..' { depth}", "-1")
  run_test_case(" 'dgf/./h' { depth}", "1")
  run_test_case(" 'dgf/../h' { depth}", "0")
  run_test_case(" './dgf/djgghf\.\..' { depth}", "0")
  run_test_case(" './dgf/djgf\..\..' { depth}", "-1")
  run_test_case(" './dgf/./h' { depth}", "1")
  run_test_case(" './dgf/../h' { depth}", "0")
  run_test_case(" 'd:' { depth}", "0")
  run_test_case(" 'c:///' { depth}", "0")
  run_test_case(" 'c:/j' { depth}", "1")
  run_test_case(" 'c:/k/o' { depth}", "2")
  run_test_case(" 'c:/k/o/..' { depth}", "1")
  run_test_case(" 'c:/k/o/.././..\/\/\/\/\ ' { depth}", "0")

  run_test_case("u = 6,1,2,4,3,5; print u", lines("6", "1", "2", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 1", lines("1", "2", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 1 + 1", lines("2", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u every 1", lines("6", "1", "2", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u every 2", lines("6", "2", "3"))
  run_test_case("u = 6,1,2,4,3,5; print u every 2 skip 1", lines("2", "3"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 1 every 2", lines("1", "4", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u every 1 limit 3", lines("6", "1", "2"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 1 every 2 limit 2", lines("1", "4"))
  run_test_case("u = 6,1,2,4,3,5; print u final 4 every 2 limit 2", lines("2", "3"))
  run_test_case("u = 6,1,2,4,3,5; print u final true every 2 limit 2", "5")
  run_test_case("u = 6,1,2,4,3,5; print u where true xor false", lines("6", "1", "2", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u where number(this) < 3.2", lines("1", "2", "3"))
  run_test_case("u = 6,1,2,4,3,5; print u where number(this) >= 3", lines("6", "4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u where number(this) % 2 = 1", lines("1", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u where number(this) + index = 7", lines("4", "3"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 1 where number(this) + index = 9", "5")
  run_test_case("u = 6,1,2,4,3,5; print u limit 1 where number(this) + index != 7", "6")
  run_test_case("u = 6,1,2,4,3,5; print u final 3 where number(this) < 4", "3")
  run_test_case("u = 6,1,2,4,3,5; print u skip 3 where true", lines("4", "3", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u order desc", lines("6", "5", "4", "3", "2", "1"))
  run_test_case("u = 6,1,2,4,3,5; print u order asc", lines("1", "2", "3", "4", "5", "6"))
  run_test_case("u = 6,1,2,4,3,5; print u order by number(this)", lines("1", "2", "3", "4", "5", "6"))
  run_test_case("u = 6,1,2,4,3,5; print u order by number(this) asc", lines("1", "2", "3", "4", "5", "6"))
  run_test_case("u = 6,1,2,4,3,5; print u order by number(this) desc", lines("6", "5", "4", "3", "2", "1"))
  run_test_case("u = 6,1,2,4,3,5; print u order by -number(this) asc", lines("6", "5", "4", "3", "2", "1"))
  run_test_case("u = 6,1,2,4,3,5; print u skip 2 order asc", lines("2", "3", "4", "5"))
  run_test_case("u = 6,1,2,4,3,5; print u order asc skip 2", lines("3", "4", "5", "6"))
  run_test_case("x = -123.5, -2, 5000100, 3 ; print x order asc", lines("-123.5", "-2", "3", "5000100"))
  run_test_case("x = -123.5, -2, 5000770, 3 ; print x order by length(this) desc", lines("5000770","-123.5", "-2", "3"))
  (run_test_case("x = -123.5, 18, -2, 50000, 3, 2.5, 100, -1500 ; print x order by length(this) desc, number(this) asc", 
  lines("-123.5", "-1500", "50000", "2.5", "100", "-2", "18", "3")))
  run_test_case("x = -123.5, 18, -2, 50000, 3, 2.5, 100, -1500 ; print x order by number(this) desc, length(this) asc", lines("50000", "100", "18", "3", "2.5", "-2", "-123.5", "-1500"))
  (run_test_case("x = 'auf','ghy','kuk', 'tgi', 'yuo', 'zzq', 'xua'; print x order by this[1] asc, this[0] desc",
  lines("tgi", "ghy", "yuo", "xua", "kuk", "auf", "zzq")))
  (run_test_case("x = 'auf','ghy','kuk', 'tgi', 'kuo', 'zzq', 'kua'; print x order by this[1] asc, this[0] desc, this[2] asc",
  lines("tgi", "ghy" ,"kua" ,"kuk" ,"kuo" ,"auf" ,"zzq")))
  (run_test_case("x = 'auf','ghy','kuk', 'tgi', 'kuo', 'zzq', 'kua'; print x order by this[1] asc, this[0] desc, this[2] asc skip 1 every 3-1 where this != 'kuk' ",
  lines("ghy", "auf")))
  run_test_case("a = 5,3; print a[0]", "5")
  run_test_case("a = 5,3; print a[1]", "3")
  run_test_case("a = 5,3; print a[1.25]", "3")
  run_test_case("a = 5,3; print a[2]", "0")
  run_test_case("a = 5,3; print a[0]", "5")
  run_test_case("a = 5,3; print a[0] * a[1]", "15")
  run_test_case("a = 5,3; print a[0] - a[1] / a[1]", "4")
  run_test_case("a = 2, 12, 4; print a[a[0]] * 11", "44")
  run_test_case("a = 2, 11, 4, 8; print ( a[a[0]] * 16) / a[3] - a[1]  " , "-3")
  run_test_case("a = 2, 11, 4, 8; print 'start ' + ( a[a[0]] * 16) / a[3] - a[1] + ' end' " , "start -3 end")
  run_test_case("3 times { print index }   ", lines("0", "1", "2"))
  run_test_case("9 { 3 times { print index } index }  ", lines("0", "1", "2", "0"))
  run_test_case("7.5 { 3 times { print this } this }  ", lines("7.5", "7.5", "7.5", "7.5"))
  run_test_case("  'ha' { this; 3 times { print this } this }  ", lines("ha", "ha", "ha", "ha", "ha"))
  run_test_case("  'ha', 'o' { this; 2 times { print this + index } index }  ", lines("ha", "ha0", "ha1", "0", "o", "o0", "o1", "1"))
  run_test_case("h = 8; 0 times { h = 5 } print h  ", "8")
  run_test_case("h = 8; 3 times { h += 5 } print h  ", "23")
  run_test_case("4.88 times { if index != 2 {print index * 10} }   ", lines("0", "10", "30"))
  run_test_case("u = 'abcde'; 3 times { print u; u = substring(u, 2) }   ", lines("abcde", "cde", "e"))
  run_test_case("k = 'abcde'; k[2] = 'g'; k  ", "abgde")
  run_test_case("k = 'abcde'; k[2] = ''; k  ", "abde")
  run_test_case("k = 'abcde'; k[2] = 89; k  ", "ab89de")
  run_test_case("i = 'abcde'; i += 22; i", "abcde22")
  run_test_case("i = 'abcde'; i += 'a'; i", "abcdea")
  run_test_case("b = true; b = false; b", "0")
  run_test_case("b = true; b = b; b", "1")
  run_test_case("b = true; b = b xor b; b", "0")
  run_test_case("b = true; b = false or not b; b", "0")
  run_test_case("b = false; b = false or not b; b", "1")
  run_test_case("n = 13; n++; print n", "14")
  run_test_case("n = 13; n--; print n", "12")
  run_test_case("n = 13; n+ = 1.4; print n", "14.4")
  run_test_case("n = 13; n -= 50; print n", "-37")
  run_test_case("n = 12.4; n *= -2; print n", "-24.8")
  run_test_case("n = 12.6; n /= 3; print n", "4.2")
  run_test_case("n = 12.6; n %= 4; print n", "0.6")
  run_test_case("n = 12.6; n += false or true; print n", "13.6")
  run_test_case("n = 10; n = 4 < 5; print n", "1")
  run_test_case("s = 'hello'; s[0] = 4+3; print s", "7ello")
  run_test_case("s = 'hello'; s[0] = 4+30; print s", "34ello")
  run_test_case("s = 'hello'; s = true; print s", "1")
  run_test_case("s = 'hello'; s = 3/2; print s", "1.5")
  run_test_case("s = 'hello'; s += 17; print s", "hello17")
  run_test_case("s = 'hello'; s += 'kuo'; print s", "hellokuo")
  run_test_case("s = 'hello'; 4 times { s += 'ka' }; print s", "hellokakakaka")
  run_test_case("s = 'hello'; s[4] = 4 months; print s", "hell4 months")
  run_test_case("n = 2,3,4; n = n, 6; print n", lines("2", "3", "4", "6"))
  run_test_case("n = 2,3,4; n = n, n; print n", lines("2", "3", "4", "2", "3", "4"))
  run_test_case("n = 2,3,4; n = n, n; print n where number(this) != 3", lines("2", "4", "2", "4"))
  run_test_case("n = 2,3,4; n = n, n; print n where index != 3", lines("2", "3", "4", "3", "4"))
  run_test_case("l = 'b', 'c', 'd' ; print l[0], l[2]", lines("b", "d"))
  run_test_case("l = 'b', 'c', 'd' ; print l, 'just' ", lines("b", "c", "d", "just"))
  run_test_case("l = 'b', 'c', 'd' ; print 'just', l, 3+4 ", lines("just", "b", "c", "d", "7"))
  run_test_case("x = 17; true ? x : 6", "17")
  run_test_case("x = 17; false ? x : 6", "6")
  run_test_case("x = 17; true ? x", "17")
  run_test_case("x = 17; false ? x", "0")
  run_test_case("x = 17; true ? x : true ? 6 : 8", "17")
  run_test_case("x = 17; true ? x : false ? 6 : 8", "17")
  run_test_case("x = 17; false ? x : true ? 6 : 8", "6")
  run_test_case("x = 17; false ? x : false ? 6 : 8", "8")
  run_test_case("x = 17; true ? x : true ? 6 : true ? 20 : 3", "17")
  run_test_case("x = 17; false ? x : false ? 6 : false ? 20 : 3", "3")
  run_test_case("x = 17; false ? x : true ? 6 : true ? 20 : 3", "6")
  run_test_case("x = 17; true ? x : false ? 6 : true ? 20 : 3", "17")
  run_test_case("x = 17; true ? x : true ? 6 : false ? 20 : 3", "17")
  run_test_case("x = 17; false ? x : false ? 6 : true ? 20 : 3", "20")
  run_test_case("x = 17; false ? x : true ? 6 : false ? 20 : 3", "6")
  run_test_case("x = 17; false ? x : true ? 6 : false ? 20 : 3", "6")
  run_test_case("x = 17; true ? x : true ? 5", "17")
  run_test_case("x = 17; true ? x : false ? 5", "17")
  run_test_case("x = 17; false ? x : true ? 5", "5")
  run_test_case("x = 17; false ? x : false ? 5", "0")
  run_test_case("x = true; true ? x : false", TRUE)
  run_test_case("x = false; true ? x : false", FALSE)
  run_test_case("x = true; false ? x : true", TRUE)
  run_test_case("x = false; false ? x : true", TRUE)
  run_test_case("3 times { x = true; true ? x : false } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; true ? x : false } ", lines(FALSE, FALSE, FALSE))
  run_test_case("3 times { x = true; false ? x : true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; false ? x : true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = true; b = true ? x : false; print b and true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; b = true ? x : false; print b and true } ", lines(FALSE, FALSE, FALSE))
  run_test_case("3 times { x = true; b = false ? x : true; print b and true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; b = false ? x : true; print b and true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; b = true ? true : x; print b and true } ", lines(TRUE, TRUE, TRUE))
  run_test_case("3 times { x = false; b = false ? true : x; print b and true } ", lines(FALSE, FALSE, FALSE))
  run_test_case("x = true ? true; x ", TRUE)
  run_test_case("x = false ? true; x ", FALSE)
  run_test_case("x = true ? false; x ", FALSE)
  run_test_case("x = false ? false; x ", FALSE)
  run_test_case("2 times { x = true ? true; x } ", lines(TRUE, TRUE))
  run_test_case("2 times { x = false ? true; x } ", lines(FALSE, FALSE))
  run_test_case("2 times { x = true ? false; x } ", lines(FALSE, FALSE))
  run_test_case("2 times { x = false ? false; x } ", lines(FALSE, FALSE))
  run_test_case("2 times { x = true ? true; x xor true } ", lines(FALSE, FALSE))
  run_test_case("2 times { x = false ? true; x xor true } ", lines(TRUE, TRUE))
  run_test_case("2 times { x = true ? false; x xor true } ", lines(TRUE, TRUE))
  run_test_case("2 times { x = false ? false; x xor true } ", lines(TRUE, TRUE))
  run_test_case("false ? now ", "never")
  run_test_case("false ? 2 april 2023", "never")
  run_test_case("a = false ? 2 april 2023; a.year", NAN)
  run_test_case("a = false ? 2 april 2023; a.second", NAN)
  run_test_case("a = false ? 2 april 2023; a.day", NAN)
  run_test_case("a = false ? 2 april 2023 : 15 june 2015; a.day", "15")
  run_test_case("a = false ? 2 april 2023 : 15 june 2015; a.year", "2015")
  run_test_case("a = true ? 2 april 2023 : 15 june 2015; a.day", "2")
  run_test_case("a = true ? 2 april 2k23 : 15 june 2015; a.year", "2023")
  run_test_case("x = 17; b = 3.21,4,5; b[false ? x : false ? 5]", "3.21")
  run_test_case("x = 4,7,9; true and false ? 6 : true ? x skip 1+1 ", "9")
  run_test_case("'b', 'c', 'd' where this != 'c' ", lines("b", "d"))
  run_test_case("4, 6, 8, 5, 2+6 where this = 5+3 ", lines("8", "8"))
  run_test_case("4, 6, 8, 5, 2+6 where false; 8, 6 ", lines("8", "6"))
  run_test_case("4, (6, 8, 5, 2+6 where false); 8, 6 ", lines("4", "8", "6"))
  run_test_case("4, (6, 8, 5, 2+6) where false; 8, 6 ", lines("8", "6"))
  run_test_case("h = 2,3,4; h[1], h[2] where not false order desc", lines("4", "3"))
  run_test_case("3, false ? 4:56, 8 where true", lines("3", "56", "8"))
  run_test_case("4 times { index; if index = 2 {break} }  ", lines("0", "1", "2"))
  run_test_case("4 times { index; if index = 2 {continue} }  ", lines("0", "1", "2", "3"))
  run_test_case("4 times { if index = 2 {continue} index }  ", lines("0", "1", "3"))
  run_test_case("7 times { if index % 2 = 1 {continue} index }  ", lines("0", "2", "4", "6"))
  run_test_case("7 times { if index % 2 = 1 {break} index }  ", "0")
  run_test_case("2 times {index; 4 times { index; if index = 2 {break} } index} ", lines("0", "0", "1", "2", "0", "1", "0", "1", "2", "1"))
  run_test_case("2 times {index; 4 times { index; if index = 1 {continue} } index} ", lines("0", "0", "1", "2", "3", "0", "1", "0", "1", "2", "3", "1"))
  run_test_case(" 5 times {if index % 2 = 0 { continue} index} ", lines("1", "3"))
  run_test_case(" 5 times {if index % 2 = 0 { continue} else if index = 4 {break; } index} ", lines("1", "3"))
  run_test_case(" 5 times {if index % 2 = 0 { continue} else if index = 3 {break; } index} ", "1")
  run_test_case(" 34 times { break; 3} 22", "22")
  run_test_case(" 34 times { continue; 3} 21", "21")
  run_test_case("2,3, 4{ this; if this = 3 {break}  }  ", lines("2", "3"))
  run_test_case("2,3, 4{ if this = 3 {continue} this }  ", lines("2", "4"))
  run_test_case(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {break}  } } ", lines("g", "2", "3", "i", "2", "3"))
  run_test_case(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {continue}  } } ", lines("g", "2", "3", "4",  "i", "2", "3", "4"))
  run_test_case(" 'g', 'i' { this; 2,3, 4{ if this = 3 {continue} this } } ", lines("g", "2", "4", "i", "2", "4"))
  run_test_case("3,5, 7 { 2,4, 6,8 { if this >= 5.5 and this <= 6.23 { break} this }  }  ", lines("2", "4", "2", "4","2", "4"))
  run_test_case("3,5, 7 { 2,4, 6,8 { this; if this >= 5.5 and this <= 6.23 { break} }  }  ", lines("2", "4", "6", "2", "4", "6","2", "4", "6"))
  run_test_case("3,5, 7 { 2,4, 6,8 { if this >= 5.5 and this <= 6.23 { continue} this }  }  ", lines("2", "4", "8", "2", "4", "8","2", "4", "8"))
  run_test_case("3,5 { 2,4, 6,8 { this; if this >= 5.5 and this <= 6.23 { continue} }  }  ", lines("2", "4", "6", "8", "2", "4","6", "8"))
  run_test_case("a = 0.4; while a < 3 { a; a++; }  ", lines("0.4", "1.4", "2.4"))
  run_test_case("a = 0.4; while a < 3 { index; a++; }  ", lines("0", "1", "2"))
  run_test_case("a = 1; while a < 3 { a; a++; }  ", lines("1", "2"))
  run_test_case("a = 1; while a < 6 { a++; a}  ", lines("2", "3", "4", "5", "6"))
  run_test_case("a = 1; while a < 6 { a++; if a = 4 {break} a}  ", lines("2", "3"))
  run_test_case("a = 1; while a < 6 { a++; if a = 4 {continue } a}  ", lines("2", "3", "5", "6"))
  run_test_case("a = 'c'; while a != 'caaaa' { a += 'a' ; a}  ", lines("ca", "caa", "caaa", "caaaa"))
  run_test_case("a = 'c'; while a != 'caaaa' { a += 'a' ; if index = 1{ continue} a}  ", lines("ca", "caaa", "caaaa"))
  run_test_case("a = 'c'; while a != 'caaaa' { a += 'a' ; if index = 1{ break} a}  ", "ca")
  run_test_case("a = 'c'; while a != 'caaaa' { a += 'a' ; if length(a) = 3 { continue} a}  ", lines("ca", "caaa", "caaaa"))
  run_test_case("a = 'c'; while a != 'caaaa' { a += 'a' ; if length(a) % 2 = 0 { continue} a}  ", lines("caa", "caaaa"))
  run_test_case("a = 'p%' ; print 'peru' like a ", TRUE)
  run_test_case("a = 'b%' ; print 'peru' like a ", FALSE)
  run_test_case("a = '%' ; print '' like a ", TRUE)
  run_test_case("a = '%' ; print ' L' like a ", TRUE)
  run_test_case("a = '%' ; print 'asdfa asdf asdf' like a ", TRUE)
  run_test_case("a = '%' ; print '%' like a ", TRUE)
  run_test_case("a = '_' ; print '' like a ", FALSE)
  run_test_case("a = '_' ; print ' ' like a ", TRUE)
  run_test_case("a = '_' ; print '4' like a ", TRUE)
  run_test_case("a = '_' ; print 'C' like a ", TRUE)
  run_test_case("a = '_' ; print 'CX' like a ", FALSE)
  run_test_case("a = '[ABCD]' ; print '' like a ", FALSE)
  run_test_case("a = '[ABCD]' ; print 'A' like a ", TRUE)
  run_test_case("a = '[ABCD]' ; print 'b' like a ", FALSE)
  run_test_case("a = '[ABCD]' ; print 'X' like a ", FALSE)
  run_test_case("a = '[ABCD]' ; print 'AB' like a ", FALSE)
  run_test_case("a = '[B-D]' ; print 'C' like a ", TRUE)
  run_test_case("a = '[B-D]' ; print 'D' like a ", TRUE)
  run_test_case("a = '[B-D]' ; print 'A' like a ", FALSE)
  run_test_case("a = '[^B-D]' ; print 'C' like a ", FALSE)
  run_test_case("a = '[^B-D]' ; print 'D' like a ", FALSE)
  run_test_case("a = '[^B-D]' ; print 'A' like a ", TRUE)
  run_test_case("a = '%TEST[ABCD]XXX' ; print 'lolTESTBXXX' like a ", TRUE)
  run_test_case("a = '%TEST[ABCD]XXX' ; print 'lolTESTZXXX' like a ", FALSE)
  run_test_case("a = '%TEST[^ABCD]XXX' ; print 'lolTESTBXXX' like a ", FALSE)
  run_test_case("a = '%TEST[^ABCD]XXX' ; print 'lolTESTZXXX' like a ", TRUE)
  run_test_case("a = '%TEST[B-D]XXX' ; print 'lolTESTBXXX' like a ", TRUE)
  run_test_case("a = '%TEST[^B-D]XXX' ; print 'lolTESTZXXX' like a ", TRUE)
  run_test_case("a = '%Perun2.txt' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2.txt' ; print 'Perun2.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2001.txt.img' like a ", FALSE)
  run_test_case("a = 'Perun2.txt%' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2.txt' like a ", FALSE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2.txt.img' like a ", FALSE)
  run_test_case("a = 'Perun2.txt%' ; print 'Perun2.txt.img' like a ", TRUE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2001.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2.txt%' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2.txt.img' like a ", TRUE)
  run_test_case("a = '%Perun2.txt%' ; print 'Perun2.txt.img' like a ", TRUE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2001.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'Perun2.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2001.txt.img' like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2001.txt' like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2.txt' like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2.txt.img' like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'Perun2.txt.img' like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2001.txt.img' like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2001.txt' like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'Perun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2.txt' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2.txt.img' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'Perun2.txt.img' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2001.txt.img' like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2001.txt' like a ", TRUE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun23.txt4' like a ", TRUE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun2.txt4' like a ", FALSE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun23.txt' like a ", FALSE)
  run_test_case("a = '_Perun2_.txt_' ; print 'Perun23.txt4' like a ", FALSE)
  run_test_case("a = '____' ; print 'abdc' like a ", TRUE)
  run_test_case("a = '____' ; print 'abc' like a ", FALSE)
  run_test_case("a = '___#' ; print 'abcd' like a ", FALSE)
  run_test_case("a = '___#' ; print 'abc5' like a ", TRUE)
  run_test_case("a = '%%#%' ; print 'Perun2' like a ", TRUE)
  run_test_case("a = '%%#%' ; print '1Perun2' like a ", TRUE)
  run_test_case("a = '%%#%' ; print 'Perun3' like a ", TRUE)
  run_test_case("a = '%%#%' ; print 'Per7un' like a ", TRUE)
  run_test_case("a = '#_#' ; print '3aa' like a ", FALSE)
  run_test_case("a = '#_#' ; print '320' like a ", TRUE)
  run_test_case("a = '#%' ; print '320' like a ", TRUE)
  run_test_case("a = '##' ; print '320' like a ", FALSE)
  run_test_case("a = '[0-9]#' ; print '32' like a ", TRUE)
  run_test_case("a = '[0-9]#' ; print 'a2' like a ", FALSE)
  run_test_case("a = 'pe#b#r#s' ; print 'pe0b0r0s' like a ", TRUE)
  run_test_case("a = 'pe#b#r#s' ; print 'pe0b0ros' like a ", FALSE)
  run_test_case("a = '[0-9]g' ; print 'a2' like a ", FALSE)
  run_test_case("a = '%%opo%' ; print 'Popol Vuh' like a ", TRUE)
  run_test_case("a = '[^^]%' ; print 'something' like a ", TRUE)
  run_test_case("a = '[^^]%' ; print '  ' like a ", TRUE)
  run_test_case("a = '[^^]%' ; print '' like a ", FALSE)
  run_test_case("a = '[^^]%' ; print 'aa' like a ", TRUE)
  run_test_case("a = '[^^]%' ; print '%' like a ", TRUE)
  run_test_case("a = '[^^]%' ; print '^' like a ", FALSE)
  run_test_case("a = '[^]%' ; print 'another day' like a ", TRUE)
  run_test_case("a = '[^]%' ; print '  ' like a ", TRUE)
  run_test_case("a = '[^]%' ; print '' like a ", FALSE)
  run_test_case("a = '[^]%' ; print 'aa' like a ", TRUE)
  run_test_case("a = '[^]%' ; print '%' like a ", TRUE)
  run_test_case("a = '[^]%' ; print '^' like a ", TRUE)
  run_test_case("a = '[^]_' ; print 'a.txt' like a ", FALSE)
  run_test_case("a = '[^]_' ; print '  ' like a ", TRUE)
  run_test_case("a = '[^]_' ; print '' like a ", FALSE)
  run_test_case("a = '[^]_' ; print 'aa' like a ", TRUE)
  run_test_case("a = '[^]_' ; print '%' like a ", FALSE)
  run_test_case("a = '[^]_' ; print '^' like a ", FALSE)
  run_test_case("a = '_[^]_' ; print 'water?' like a ", FALSE)
  run_test_case("a = '_[^]_' ; print ' g ' like a ", TRUE)
  run_test_case("a = '_[^]_' ; print '' like a ", FALSE)
  run_test_case("a = '_[^]_' ; print 'aaa' like a ", TRUE)
  run_test_case("a = '_[^]_' ; print '%6' like a ", FALSE)
  run_test_case("a = '_[^]_' ; print '^' like a ", FALSE)
  run_test_case("a = '[]%' ; print 'fence' like a ", FALSE)
  run_test_case("a = '[]%' ; print ' g ' like a ", FALSE)
  run_test_case("a = '[]%' ; print '' like a ", FALSE)
  run_test_case("a = '[]%' ; print 'aaa' like a ", FALSE)
  run_test_case("a = '[]%' ; print '%6' like a ", FALSE)
  run_test_case("a = '[]%' ; print '^' like a ", FALSE)
  run_test_case("a = '[-]%' ; print 'patt' like a ", FALSE)
  run_test_case("a = '[-]%' ; print ' g ' like a ", FALSE)
  run_test_case("a = '[-]%' ; print '' like a ", FALSE)
  run_test_case("a = '[-]%' ; print '-aaa' like a ", TRUE)
  run_test_case("a = '[-]%' ; print 'U' like a ", FALSE)
  run_test_case("a = '[-]%' ; print '%6' like a ", FALSE)
  run_test_case("a = '[-]%' ; print '-' like a ", TRUE)
  run_test_case("a = '[-U]%' ; print 'word' like a ", FALSE)
  run_test_case("a = '[-U]%' ; print ' g ' like a ", FALSE)
  run_test_case("a = '[-U]%' ; print '' like a ", FALSE)
  run_test_case("a = '[-U]%' ; print '-aaa' like a ", TRUE)
  run_test_case("a = '[-U]%' ; print 'U' like a ", TRUE)
  run_test_case("a = '[-U]%' ; print '%6' like a ", FALSE)
  run_test_case("a = '[-U]%' ; print '-' like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print 'ant' like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print ' g ' like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print '' like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print 'worm' like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print 'Worms' like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print '-aaa' like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print 'U' like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print '%6' like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print '-' like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print 'ant' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print 'an' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print 'b-' like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '--' like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '-c' like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '-e' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '-eh' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print 'accurate' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '-' like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'ft' like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'fT' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'at' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'tf' like a ", FALSE)
  run_test_case("a = '[e-g][u-s]' ; print 'ft' like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'ess' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'es' like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print '- ' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print '  ' like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print '' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'feel' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print ' feel' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'things' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'uroboros' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'vents' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'u' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '-' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '--' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'z' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'alone' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'faces' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '-faces' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'early' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'history' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'raven' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'r' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'steal' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'traits' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print ' traits' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '-steal' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '%%steal' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'feel' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print ' feel' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'things' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'uroboros' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'vents' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'u' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '--' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'z' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'alone' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'faces' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-faces' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'early' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'historias' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'raven' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'r' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'stealf' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'traits' like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print ' traits' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-steal' like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '%%steal' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'feel' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print ' feel' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'things' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'uroboros' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'vents' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'u' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '-' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '--' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'z' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'alone' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'faces' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '-faces' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'early' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'history' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'raven' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'r' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'steal' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'traits' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print ' traits' like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '-steal' like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '%%steal' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'feel' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print ' feel' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'things' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'uroboros' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'vents' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'u' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '-' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '--' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'z' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'alone' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'faces' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '-faces' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'early' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'historias' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'raven' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'r' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'stealthy' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'traits' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print ' traits' like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '-steal' like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '%%steal' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '3a' like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print 'aa' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '6c' like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '2b' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '2 ' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '0c ' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '00' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '0^' like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '^^' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print ' ^' like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '7^' like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'a6' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'z6' like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'c0' like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'cc' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'c99' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'c ' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'b6' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'u65' like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'u6' like a ", TRUE)
  run_test_case("a = '[a^b]' ; print 'a' like a ", TRUE)
  run_test_case("a = '[a^b]' ; print 'b' like a ", TRUE)
  run_test_case("a = '[a^b]' ; print '^' like a ", TRUE)
  run_test_case("a = '[a^b]' ; print ' ' like a ", FALSE)
  run_test_case("a = '[a^b]' ; print '?' like a ", FALSE)
  run_test_case("a = '[a^b]' ; print 'c' like a ", FALSE)
  run_test_case("a = '[a^b]' ; print '' like a ", FALSE)
  run_test_case("a = '[a^b]' ; print '5' like a ", FALSE)
  run_test_case("a = '[a^b]' ; print 'aa' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print 'a' like a ", TRUE)
  run_test_case("a = '[ab^]' ; print 'b' like a ", TRUE)
  run_test_case("a = '[ab^]' ; print '^' like a ", TRUE)
  run_test_case("a = '[ab^]' ; print ' ' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print '?' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print 'c' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print '' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print '5' like a ", FALSE)
  run_test_case("a = '[ab^]' ; print 'aa' like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[21]' like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[11]' like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[0]' like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[]' like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[11]ki' like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[114]ki' like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta]11]ki' like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[21' like a ", FALSE)
  run_test_case("a = ']%' ; print 'aa' like a ", FALSE)
  run_test_case("a = ']%' ; print ']' like a ", TRUE)
  run_test_case("a = ']%' ; print '' like a ", FALSE)
  run_test_case("a = ']%' ; print ']h' like a ", TRUE)
  run_test_case("a = ']%' ; print ']]' like a ", TRUE)
  run_test_case("a = ']%' ; print '[' like a ", FALSE)
  run_test_case("a = '-%' ; print '-' like a ", TRUE)
  run_test_case("a = '-%' ; print '-here' like a ", TRUE)
  run_test_case("a = '-%' ; print 'z' like a ", FALSE)
  run_test_case("a = '-%' ; print '' like a ", FALSE)
  run_test_case("a = '-%' ; print 'dfs' like a ", FALSE)
  run_test_case("a = '^%' ; print '^' like a ", TRUE)
  run_test_case("a = '^%' ; print '^^' like a ", TRUE)
  run_test_case("a = '^%' ; print 'z' like a ", FALSE)
  run_test_case("a = '^%' ; print '^another' like a ", TRUE)
  run_test_case("a = '^%' ; print 'ano^ther' like a ", FALSE)
  run_test_case("a = '^%' ; print '' like a ", FALSE)
  run_test_case("a = '^%' ; print 'dfs' like a ", FALSE)
  run_test_case("a = '-^' ; print '-^' like a ", TRUE)
  run_test_case("a = '-^' ; print '^-' like a ", FALSE)
  run_test_case("a = '-^' ; print '8-' like a ", FALSE)
  run_test_case("a = '-^' ; print '-8' like a ", FALSE)
  run_test_case("a = '-^' ; print '-^h' like a ", FALSE)
  run_test_case("a = 'e#' ; print 'e55' like a ", FALSE)
  run_test_case("a = 'e##' ; print 'e55' like a ", TRUE)
  run_test_case("a = 'e%57' ; print 'e557' like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print 'co' like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print 'do' like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print 'c' like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print '' like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print 'voine' like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print 'voce' like a ", TRUE)
  run_test_case("a = '[b-]%' ; print 'here' like a ", FALSE)
  run_test_case("a = '[b-]%' ; print 'bear' like a ", TRUE)
  run_test_case("a = '[b-]%' ; print 'cinema' like a ", FALSE)
  run_test_case("a = '[b-]%' ; print '' like a ", FALSE)
  run_test_case("a = '[b-]%' ; print '-' like a ", TRUE)
  run_test_case("a = '[b-]%' ; print '-train' like a ", TRUE)
  run_test_case("a = '[b-]%' ; print 'u-train' like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print 'here' like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print 'bear' like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print 'cinema' like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print '' like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print '-' like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print '-train' like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print 'u-train' like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print 'co' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print '5o9' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print '569' like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print 'u78' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print 'b' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print '' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print 'ooo' like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print '667' like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print '6674' like a ", FALSE)
  run_test_case("a = 'k%_st' ; print 'kastastast' like a ", TRUE)
  run_test_case("a = 'k%%an' ; print 'kanan' like a ", TRUE)
  run_test_case("a = 'k%%sty' ; print 'kastastasty' like a ", TRUE)
  run_test_case("a = 'k%_t' ; print 'kastastast' like a ", TRUE)
  run_test_case("a = 'ka%_t' ; print 'kastastast' like a ", TRUE)
  run_test_case("a = 'p%' ; print 'peru' not like a ", FALSE)
  run_test_case("a = 'b%' ; print 'peru' not like a ", TRUE)
  run_test_case("a = '%' ; print '' not like a ", FALSE)
  run_test_case("a = '%' ; print ' L' not like a ", FALSE)
  run_test_case("a = '%' ; print 'asdfa asdf asdf' not like a ", FALSE)
  run_test_case("a = '%' ; print '%' not like a ", FALSE)
  run_test_case("a = '_' ; print '' not like a ", TRUE)
  run_test_case("a = '_' ; print ' ' not like a ", FALSE)
  run_test_case("a = '_' ; print '4' not like a ", FALSE)
  run_test_case("a = '_' ; print 'C' not like a ", FALSE)
  run_test_case("a = '_' ; print 'CX' not like a ", TRUE)
  run_test_case("a = '[ABCD]' ; print '' not like a ", TRUE)
  run_test_case("a = '[ABCD]' ; print 'A' not like a ", FALSE)
  run_test_case("a = '[ABCD]' ; print 'b' not like a ", TRUE)
  run_test_case("a = '[ABCD]' ; print 'X' not like a ", TRUE)
  run_test_case("a = '[ABCD]' ; print 'AB' not like a ", TRUE)
  run_test_case("a = '[B-D]' ; print 'C' not like a ", FALSE)
  run_test_case("a = '[B-D]' ; print 'D' not like a ", FALSE)
  run_test_case("a = '[B-D]' ; print 'A' not like a ", TRUE)
  run_test_case("a = '[^B-D]' ; print 'C' not like a ", TRUE)
  run_test_case("a = '[^B-D]' ; print 'D' not like a ", TRUE)
  run_test_case("a = '[^B-D]' ; print 'A' not like a ", FALSE)
  run_test_case("a = '%TEST[ABCD]XXX' ; print 'lolTESTBXXX' not like a ", FALSE)
  run_test_case("a = '%TEST[ABCD]XXX' ; print 'lolTESTZXXX' not like a ", TRUE)
  run_test_case("a = '%TEST[^ABCD]XXX' ; print 'lolTESTBXXX' not like a ", TRUE)
  run_test_case("a = '%TEST[^ABCD]XXX' ; print 'lolTESTZXXX' not like a ", FALSE)
  run_test_case("a = '%TEST[B-D]XXX' ; print 'lolTESTBXXX' not like a ", FALSE)
  run_test_case("a = '%TEST[^B-D]XXX' ; print 'lolTESTZXXX' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2.txt' ; print 'Perun2.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2.txt' ; print 'TestPerun2001.txt.img' not like a ", TRUE)
  run_test_case("a = 'Perun2.txt%' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2.txt' not like a ", TRUE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2.txt.img' not like a ", TRUE)
  run_test_case("a = 'Perun2.txt%' ; print 'Perun2.txt.img' not like a ", FALSE)
  run_test_case("a = 'Perun2.txt%' ; print 'TestPerun2001.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2.txt%' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2.txt.img' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt%' ; print 'Perun2.txt.img' not like a ", FALSE)
  run_test_case("a = '%Perun2.txt%' ; print 'TestPerun2001.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'Perun2.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2001.txt.img' not like a ", TRUE)
  run_test_case("a = '%Perun2%.txt' ; print 'TestPerun2001.txt' not like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2.txt' not like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2.txt.img' not like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'Perun2.txt.img' not like a ", FALSE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2001.txt.img' not like a ", TRUE)
  run_test_case("a = 'Perun2%.txt%' ; print 'TestPerun2001.txt' not like a ", TRUE)
  run_test_case("a = '%Perun2%.txt%' ; print 'Perun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2.txt' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2.txt.img' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'Perun2.txt.img' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2001.txt.img' not like a ", FALSE)
  run_test_case("a = '%Perun2%.txt%' ; print 'TestPerun2001.txt' not like a ", FALSE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun23.txt4' not like a ", FALSE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun2.txt4' not like a ", TRUE)
  run_test_case("a = '_Perun2_.txt_' ; print '1Perun23.txt' not like a ", TRUE)
  run_test_case("a = '_Perun2_.txt_' ; print 'Perun23.txt4' not like a ", TRUE)
  run_test_case("a = '____' ; print 'abdc' not like a ", FALSE)
  run_test_case("a = '____' ; print 'abc' not like a ", TRUE)
  run_test_case("a = '___#' ; print 'abcd' not like a ", TRUE)
  run_test_case("a = '___#' ; print 'abc5' not like a ", FALSE)
  run_test_case("a = '%%#%' ; print 'Perun2' not like a ", FALSE)
  run_test_case("a = '%%#%' ; print '1Perun2' not like a ", FALSE)
  run_test_case("a = '%%#%' ; print 'Perun3' not like a ", FALSE)
  run_test_case("a = '%%#%' ; print 'Per7un' not like a ", FALSE)
  run_test_case("a = '#_#' ; print '3aa' not like a ", TRUE)
  run_test_case("a = '#_#' ; print '320' not like a ", FALSE)
  run_test_case("a = '#%' ; print '320' not like a ", FALSE)
  run_test_case("a = '##' ; print '320' not like a ", TRUE)
  run_test_case("a = '[0-9]#' ; print '32' not like a ", FALSE)
  run_test_case("a = '[0-9]#' ; print 'a2' not like a ", TRUE)
  run_test_case("a = 'pe#b#r#s' ; print 'pe0b0r0s' not like a ", FALSE)
  run_test_case("a = 'pe#b#r#s' ; print 'pe0b0ros' not like a ", TRUE)
  run_test_case("a = '[0-9]g' ; print 'a2' not like a ", TRUE)
  run_test_case("a = '%%opo%' ; print 'Popol Vuh' not like a ", FALSE)
  run_test_case("a = '[^^]%' ; print 'something' not like a ", FALSE)
  run_test_case("a = '[^^]%' ; print '  ' not like a ", FALSE)
  run_test_case("a = '[^^]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[^^]%' ; print 'aa' not like a ", FALSE)
  run_test_case("a = '[^^]%' ; print '%' not like a ", FALSE)
  run_test_case("a = '[^^]%' ; print '^' not like a ", TRUE)
  run_test_case("a = '[^]%' ; print 'another day' not like a ", FALSE)
  run_test_case("a = '[^]%' ; print '  ' not like a ", FALSE)
  run_test_case("a = '[^]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[^]%' ; print 'aa' not like a ", FALSE)
  run_test_case("a = '[^]%' ; print '%' not like a ", FALSE)
  run_test_case("a = '[^]%' ; print '^' not like a ", FALSE)
  run_test_case("a = '[^]_' ; print 'a.txt' not like a ", TRUE)
  run_test_case("a = '[^]_' ; print '  ' not like a ", FALSE)
  run_test_case("a = '[^]_' ; print '' not like a ", TRUE)
  run_test_case("a = '[^]_' ; print 'aa' not like a ", FALSE)
  run_test_case("a = '[^]_' ; print '%' not like a ", TRUE)
  run_test_case("a = '[^]_' ; print '^' not like a ", TRUE)
  run_test_case("a = '_[^]_' ; print 'water?' not like a ", TRUE)
  run_test_case("a = '_[^]_' ; print ' g ' not like a ", FALSE)
  run_test_case("a = '_[^]_' ; print '' not like a ", TRUE)
  run_test_case("a = '_[^]_' ; print 'aaa' not like a ", FALSE)
  run_test_case("a = '_[^]_' ; print '%6' not like a ", TRUE)
  run_test_case("a = '_[^]_' ; print '^' not like a ", TRUE)
  run_test_case("a = '[]%' ; print 'fence' not like a ", TRUE)
  run_test_case("a = '[]%' ; print ' g ' not like a ", TRUE)
  run_test_case("a = '[]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[]%' ; print 'aaa' not like a ", TRUE)
  run_test_case("a = '[]%' ; print '%6' not like a ", TRUE)
  run_test_case("a = '[]%' ; print '^' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print 'patt' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print ' g ' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print '-aaa' not like a ", FALSE)
  run_test_case("a = '[-]%' ; print 'U' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print '%6' not like a ", TRUE)
  run_test_case("a = '[-]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '[-U]%' ; print 'word' not like a ", TRUE)
  run_test_case("a = '[-U]%' ; print ' g ' not like a ", TRUE)
  run_test_case("a = '[-U]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[-U]%' ; print '-aaa' not like a ", FALSE)
  run_test_case("a = '[-U]%' ; print 'U' not like a ", FALSE)
  run_test_case("a = '[-U]%' ; print '%6' not like a ", TRUE)
  run_test_case("a = '[-U]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print 'ant' not like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print ' g ' not like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print 'worm' not like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print 'Worms' not like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print '-aaa' not like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print 'U' not like a ", FALSE)
  run_test_case("a = '[-Uw]%' ; print '%6' not like a ", TRUE)
  run_test_case("a = '[-Uw]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print 'ant' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print 'an' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print 'b-' not like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '--' not like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '-c' not like a ", FALSE)
  run_test_case("a = '_[b-d-]' ; print '-e' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '-eh' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print 'accurate' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '-' not like a ", TRUE)
  run_test_case("a = '_[b-d-]' ; print '' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'ft' not like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'fT' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'at' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'tf' not like a ", TRUE)
  run_test_case("a = '[e-g][u-s]' ; print 'ft' not like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print 'ess' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print 'es' not like a ", FALSE)
  run_test_case("a = '[e-g][s-u]' ; print '- ' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print '  ' not like a ", TRUE)
  run_test_case("a = '[e-g][s-u]' ; print '' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'feel' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print ' feel' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'things' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'uroboros' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'vents' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'u' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '-' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '--' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'z' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'alone' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'faces' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print '-faces' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'early' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'history' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'raven' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'r' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print 'steal' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print 'traits' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%' ; print ' traits' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '-steal' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%' ; print '%%steal' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'feel' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print ' feel' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'things' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'uroboros' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'vents' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'u' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '--' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'z' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'alone' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'faces' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-faces' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'early' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'historias' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'raven' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'r' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'stealf' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print 'traits' not like a ", FALSE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print ' traits' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '-steal' not like a ", TRUE)
  run_test_case("a = '[e-gs-u]%[e-gs-u]' ; print '%%steal' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'feel' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print ' feel' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'things' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'uroboros' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'vents' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'u' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '--' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'z' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'alone' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'faces' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '-faces' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'early' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'history' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'raven' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'r' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print 'steal' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print 'traits' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print ' traits' not like a ", TRUE)
  run_test_case("a = '[e-gs-u-]%' ; print '-steal' not like a ", FALSE)
  run_test_case("a = '[e-gs-u-]%' ; print '%%steal' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'feel' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print ' feel' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'things' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'uroboros' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'vents' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'u' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '--' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'z' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'alone' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'faces' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '-faces' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'early' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print 'historias' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'raven' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'r' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'stealthy' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print 'traits' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print ' traits' not like a ", TRUE)
  run_test_case("a = '[-e-g]%' ; print '-steal' not like a ", FALSE)
  run_test_case("a = '[-e-g]%' ; print '%%steal' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '3a' not like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print 'aa' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '6c' not like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '2b' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '2 ' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '0c ' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '00' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '0^' not like a ", FALSE)
  run_test_case("a = '#[a^c]' ; print '^^' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print ' ^' not like a ", TRUE)
  run_test_case("a = '#[a^c]' ; print '7^' not like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'a6' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'z6' not like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'c0' not like a ", FALSE)
  run_test_case("a = '[^ab]#' ; print 'cc' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'c99' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'c ' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'b6' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'u65' not like a ", TRUE)
  run_test_case("a = '[^ab]#' ; print 'u6' not like a ", FALSE)
  run_test_case("a = '[a^b]' ; print 'a' not like a ", FALSE)
  run_test_case("a = '[a^b]' ; print 'b' not like a ", FALSE)
  run_test_case("a = '[a^b]' ; print '^' not like a ", FALSE)
  run_test_case("a = '[a^b]' ; print ' ' not like a ", TRUE)
  run_test_case("a = '[a^b]' ; print '?' not like a ", TRUE)
  run_test_case("a = '[a^b]' ; print 'c' not like a ", TRUE)
  run_test_case("a = '[a^b]' ; print '' not like a ", TRUE)
  run_test_case("a = '[a^b]' ; print '5' not like a ", TRUE)
  run_test_case("a = '[a^b]' ; print 'aa' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print 'a' not like a ", FALSE)
  run_test_case("a = '[ab^]' ; print 'b' not like a ", FALSE)
  run_test_case("a = '[ab^]' ; print '^' not like a ", FALSE)
  run_test_case("a = '[ab^]' ; print ' ' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print '?' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print 'c' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print '' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print '5' not like a ", TRUE)
  run_test_case("a = '[ab^]' ; print 'aa' not like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[21]' not like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[11]' not like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[0]' not like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[]' not like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[11]ki' not like a ", FALSE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[114]ki' not like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta]11]ki' not like a ", TRUE)
  run_test_case("a = 'ta[[]##]%' ; print 'ta[21' not like a ", TRUE)
  run_test_case("a = ']%' ; print 'aa' not like a ", TRUE)
  run_test_case("a = ']%' ; print ']' not like a ", FALSE)
  run_test_case("a = ']%' ; print '' not like a ", TRUE)
  run_test_case("a = ']%' ; print ']h' not like a ", FALSE)
  run_test_case("a = ']%' ; print ']]' not like a ", FALSE)
  run_test_case("a = ']%' ; print '[' not like a ", TRUE)
  run_test_case("a = '-%' ; print '-' not like a ", FALSE)
  run_test_case("a = '-%' ; print '-here' not like a ", FALSE)
  run_test_case("a = '-%' ; print 'z' not like a ", TRUE)
  run_test_case("a = '-%' ; print '' not like a ", TRUE)
  run_test_case("a = '-%' ; print 'dfs' not like a ", TRUE)
  run_test_case("a = '^%' ; print '^' not like a ", FALSE)
  run_test_case("a = '^%' ; print '^^' not like a ", FALSE)
  run_test_case("a = '^%' ; print 'z' not like a ", TRUE)
  run_test_case("a = '^%' ; print '^another' not like a ", FALSE)
  run_test_case("a = '^%' ; print 'ano^ther' not like a ", TRUE)
  run_test_case("a = '^%' ; print '' not like a ", TRUE)
  run_test_case("a = '^%' ; print 'dfs' not like a ", TRUE)
  run_test_case("a = '-^' ; print '-^' not like a ", FALSE)
  run_test_case("a = '-^' ; print '^-' not like a ", TRUE)
  run_test_case("a = '-^' ; print '8-' not like a ", TRUE)
  run_test_case("a = '-^' ; print '-8' not like a ", TRUE)
  run_test_case("a = '-^' ; print '-^h' not like a ", TRUE)
  run_test_case("a = 'e#' ; print 'e55' not like a ", TRUE)
  run_test_case("a = 'e##' ; print 'e55' not like a ", FALSE)
  run_test_case("a = 'e%57' ; print 'e557' not like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print 'co' not like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print 'do' not like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print 'c' not like a ", FALSE)
  run_test_case("a = '%[c-a]%' ; print '' not like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print 'voine' not like a ", TRUE)
  run_test_case("a = '%[c-a]%' ; print 'voce' not like a ", FALSE)
  run_test_case("a = '[b-]%' ; print 'here' not like a ", TRUE)
  run_test_case("a = '[b-]%' ; print 'bear' not like a ", FALSE)
  run_test_case("a = '[b-]%' ; print 'cinema' not like a ", TRUE)
  run_test_case("a = '[b-]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[b-]%' ; print '-' not like a ", FALSE)
  run_test_case("a = '[b-]%' ; print '-train' not like a ", FALSE)
  run_test_case("a = '[b-]%' ; print 'u-train' not like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print 'here' not like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print 'bear' not like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print 'cinema' not like a ", FALSE)
  run_test_case("a = '[^b-]%' ; print '' not like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print '-' not like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print '-train' not like a ", TRUE)
  run_test_case("a = '[^b-]%' ; print 'u-train' not like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print 'co' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print '5o9' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print '569' not like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print 'u78' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print 'b' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print '' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print 'ooo' not like a ", TRUE)
  run_test_case("a = '#[^o]#' ; print '667' not like a ", FALSE)
  run_test_case("a = '#[^o]#' ; print '6674' not like a ", TRUE)
  run_test_case("a = 'k%_st' ; print 'kastastast' not like a ", FALSE)
  run_test_case("a = 'k%%an' ; print 'kanan' not like a ", FALSE)
  run_test_case("a = 'k%%sty' ; print 'kastastasty' not like a ", FALSE)
  run_test_case("a = 'k%_t' ; print 'kastastast' not like a ", FALSE)
  run_test_case("a = 'ka%_t' ; print 'kastastast' not like a ", FALSE)
  run_test_case("print 'KĄTEM' resembles 'katem' ", TRUE)
  run_test_case("print 'katem' resembles 'KĄTEM' ", TRUE)
  run_test_case("print 'KĄTEM' resembles 'katex' ", TRUE)
  run_test_case("print 'katem' resembles 'KĄTEX' ", TRUE)
  run_test_case("print 'ab' resembles 'cd'", FALSE)
  run_test_case("print 'ab' resembles 'cb'", FALSE)
  run_test_case("print '' resembles ''", TRUE)
  run_test_case("print 'ab' resembles ''", TRUE)
  run_test_case("print 'long text' resembles ''", TRUE)
  run_test_case("print '' resembles '2'", FALSE)
  run_test_case("print '' resembles 'hjghj'", FALSE)
  run_test_case("print '1' resembles 'hjghj'", FALSE)
  run_test_case("print '123' resembles 'hjghj'", FALSE)
  run_test_case("print '12356756' resembles 'hjghj'", FALSE)
  run_test_case("print 'hjghj' resembles '1'", FALSE)
  run_test_case("print 'hjghj' resembles '123' ", FALSE)
  run_test_case("print 'hjghj' resembles '12356756' ", FALSE)

  run_test_case("print 'abcd' resembles 'a' ", TRUE)
  run_test_case("print 'abcd' resembles 'ba' ", FALSE)
  run_test_case("print 'abcd' resembles 'bac' ", TRUE)
  run_test_case("print 'abcd' resembles 'abc' ", TRUE)
  run_test_case("print 'abcd' resembles 'abd' ", TRUE)
  run_test_case("print 'abcD' resembles 'aBC' ", TRUE)
  run_test_case("print 'abcD' resembles 'ABd' ", TRUE)
  run_test_case("print '0123456789' resembles '56' ", TRUE)
  run_test_case("print '0123456789' resembles '01' ", TRUE)
  run_test_case("print '0123456789' resembles '789'  ", TRUE)
  run_test_case("print '0123456789' resembles '4578'  ", TRUE)
  run_test_case("print '0123456789' resembles '24578'  ", FALSE)
  run_test_case("print '0123456789' resembles '23457'  ", TRUE)
  run_test_case("print '0123456789' resembles 'a0'  ", FALSE)
  run_test_case("print '0123456789' resembles 'abc0'  ", FALSE)
  run_test_case("print '0123456789' resembles 'a012'  ", TRUE)
  run_test_case("print '0123456789' resembles 'ab01'  ", FALSE)
  run_test_case("print '0123456789' resembles 'ab01234567'  ", TRUE)
  run_test_case("print '0123456789' resembles 'ab01234589'  ", FALSE)
  run_test_case("print '0123456789' resembles 'ab01x34589'  ", FALSE)
  run_test_case("print '0123456789' resembles 'ab01x3458>'  ", FALSE)
  run_test_case("print '0123456789' resembles '789k'  ", TRUE)
  run_test_case("print '0123456789' resembles '789kb'  ", FALSE)
  run_test_case("print '0123456789' resembles '456789kb'  ", TRUE)
  run_test_case("print '0123456789' resembles '45789'  ", TRUE)
  run_test_case("print '0123456789' resembles 'hh789'  ", FALSE)
  run_test_case("print '0123456789' resembles '89xxxxxx'  ", FALSE)
  run_test_case("print '0123456789' resembles '49xxxxxx'  ", FALSE)
  run_test_case("print '0123456789' resembles '12346789'  ", TRUE)
  run_test_case("print '0123456789' resembles '1234556789'  ", TRUE)
  run_test_case("print '0123456789' resembles '1234555678'  ", TRUE)
  run_test_case("print '0123456789' resembles '2345555678'  ", TRUE)
  run_test_case("print '0123456789' resembles '3455555678'  ", FALSE)
  run_test_case("print '0123456789' resembles '3455555567'  ", FALSE)

  run_test_case("inside 'defchain' { recursivefiles order by name asc { name } }", lines("a", "b", "c", "gg", "i", "ko", "z"))
  run_test_case("inside 'defchain' { index; recursivefiles order by name asc { index }; index }", lines("0", "0", "1", "2", "3", "4", "5", "6", "0"))
  run_test_case("inside 'defchain' { recursivefiles order by name desc {name + ' ' +  depth} }", lines("z 2", "ko 1", "i 3", "gg 2", "c 0", "b 0", "a 0"))
  run_test_case("inside 'defchain' { recursivefiles order by name desc where depth % 2 = 1{name + ' ' +  depth} }", lines("ko 1", "i 3"))
  run_test_case("inside 'defchain' { recursivefiles where depth in 2, 3 order by name desc {name + ' ' +  depth} }", lines("z 2", "i 3", "gg 2"))
  run_test_case("inside 'defchain' { recursivefiles order by depth desc, name desc {name} }", lines("i", "z", "gg", "ko", "c", "b", "a"))
  run_test_case("inside 'defchain' { recursivefiles order by depth desc, name desc {index} }", lines("0", "1", "2", "3", "4", "5", "6"))
  run_test_case("inside 'defchain' { recursivefiles order by depth desc, name desc {depth} }", lines("3", "2", "2", "1", "0", "0", "0"))
  run_test_case("inside 'defchain' { recursivedirectories order by depth desc, name desc {name[0]} }", lines("u", "a", "d"))
  run_test_case("inside 'defchain' { recursivedirectories order by depth desc, name desc {index} }", lines("0", "1", "2"))
  run_test_case("inside 'defchain' { recursivedirectories order by depth desc, name desc {depth} }", lines("2", "1", "0"))
  run_test_case("inside 'defchain' { ** order by depth desc, name desc {name} }", lines("i", "z", "u", "gg", "ko", "aa", "ddd", "c", "b", "a"))
  run_test_case("inside 'defchain' { ** order by depth desc, name desc {index} }", lines("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
  run_test_case("inside 'defchain' { ** order by depth desc, name desc {depth} }", lines("3", "2", "2", "2", "1", "1", "0", "0", "0", "0"))
  run_test_case("inside 'defchain' { * order by depth desc, name desc {name} }", lines("ddd", "c", "b", "a"))
  run_test_case("inside 'defchain' { * order by depth desc, name desc {index} }", lines("0", "1", "2", "3"))
  run_test_case("inside 'defchain' { * order by depth desc, name desc {depth} }", lines("0", "0", "0", "0"))
  run_test_case("inside 'defchain' { recursivefiles where length(this) = 12 {fullname} }", "z.txt")
  run_test_case("inside 'defchain' { recursivefiles where length(this) = 14 and isDirectory {fullname}  } 0", "0")
  run_test_case("inside 'defchain' { recursivefiles where length(this) = 14 and isFile {fullname} } ", "i.txt")
  run_test_case("inside 'defchain' { ** where length(this) = 14 and isFile {fullname} } ", "i.txt")
  run_test_case("inside 'defchain' { ** where length(this) = 8 and isFile {fullname};7 } ", "7")
  run_test_case("inside 'defchain' { ** where length(this) = 8 and isDirectory {fullname} } ", "u")
  run_test_case("inside 'defchain' { ** where length(this) = 8 and isDirectory {parent { name }} } ", "aa")
  run_test_case("inside 'defchain' { * where length(this) = 3 {name+name} } ", "dddddd")
  run_test_case("inside 'defchain' { ** where length(this) = 3 {repeat(name + ' ', 3)} } ", "ddd ddd ddd ")
  run_test_case("inside 'defchain' { recursivefiles where length(name) = 2 and name[1] != 'g' { name} }", "ko")
  run_test_case("inside 'defchain' { recursiveDirectories order by name asc { name } }", lines("aa", "ddd", "u"))
  run_test_case("inside 'defchain' { recursiveDirectories where depth = 1 { name   } }", "aa")
  run_test_case("inside 'defchain' { recursiveFiles where depth = 1 { name} }", "ko")
  run_test_case("inside 'defchain' { count(** where depth = 1) }", "2")
  run_test_case("inside 'defchain' { count(** where depth != 1) }", "8")
  run_test_case("inside 'defchain' { count(**) }", "10")
  run_test_case("inside 'defchain' { count((recursiveFiles, recursiveDirectories)) }", "10")
  run_test_case("inside 'defchain' { count(*) }", "4")
  run_test_case("inside 'defchain' { count(** where depth = 0) }", "4")
  run_test_case("inside 'defchain' { count(** where depth = 2) }", "3")
  run_test_case("inside 'defchain' { count(** where depth >= 2) }", "4")
  run_test_case("inside 'defchain' { directories where anyInside(files); name }", lines("ddd", "defchain"))
  run_test_case("inside 'defchain' { * where anyInside(files); name }", lines("ddd", "defchain"))
  run_test_case("inside 'defchain' { directories where anyInside(directories where empty); name }", "defchain")
  run_test_case("inside 'defchain' { directories where anyInside(files where extension = 'pdf'); name }", "defchain")
  run_test_case("inside 'defchain' { directories where anyInside(recursiveFiles where fullname = 'i' + '.txt') }", "ddd")
  run_test_case("inside 'defchain' { directories where anyInside(directories where not empty); name }", lines("ddd", "defchain"))
  run_test_case("inside 'defchain' { recursivedirectories where not anyInside(files where length(name) = 1) }", "ddd")
  run_test_case("inside 'defchain' { recursivedirectories where not anyInside(directories ) { name} }", "u")
  run_test_case("inside 'defchain' { recursivedirectories where anyInside(directories) order by name {name} }", lines("aa", "ddd"))
  run_test_case("inside 'defchain' { ** where anyInside(directories) order by name {name} }", lines("aa", "ddd"))
  run_test_case("inside 'defchain' { ** where anyInside(files where name = 'z') limit 8 skip -3 { name} }", "aa")
  run_test_case("inside 'defchain' { ** where existsInside('z.txt') { name[0] + name[1] } }", "aa")
  run_test_case("inside 'defchain' { ** where existsInside('i.txt') { name } }", "u")
  run_test_case("inside 'defchain' { ** where existsInside('aa') { name } }", "ddd")
  run_test_case("inside 'defchain' { ** where existsInside('aaj') { name } 77 } ", "77")
  run_test_case("inside 'defchain' { recursivedirectories where existInside(('aa', 'ko.txt')) { name } }", "ddd")
  run_test_case("inside 'defchain' { recursivedirectories where existInside(('aa', 'ko')) { name } ; 7 }", "7")
  run_test_case("inside 'defchain' { size(recursivefiles) }", "41")
  run_test_case("inside 'defchain' { size(directories) }", "23")
  run_test_case("inside 'defchain' { size(files) }", "18")
  run_test_case("inside 'defchain' { size(recursiveDirectories where name = 'aa') }", "19")
  run_test_case("inside 'defchain' { count(recursiveFiles where size = 6 ) }", "3")
  run_test_case("inside 'defchain' { 'juy.png', (files order asc) }", lines("juy.png", "a.txt", "b.txt", "c.txt"))
  run_test_case("inside 'defchain' { 'juy.png', (files order desc) }", lines("juy.png", "c.txt", "b.txt", "a.txt"))
  run_test_case("inside 'defchain' { 'juy.png', (files order asc) { index } }", lines("0", "1", "2", "3"))
  run_test_case("inside 'defchain' { 'juy.png', files { index } }", lines("0", "1", "2", "3"))
  run_test_case("inside 'defchain' { files, 'juy.png' { index } }", lines("0", "1", "2", "3"))
  run_test_case("inside 'defchain' { (files order asc), 'juy.png', (files order desc) }", lines("a.txt", "b.txt", "c.txt", "juy.png", "c.txt", "b.txt", "a.txt"))
  run_test_case("inside 'defchain' { (files order asc), 'juy.png', (files order desc) { index } }", lines("0", "1", "2", "3", "4", "5", "6"))
  run_test_case("inside 'defchain' { (files order asc), 'juy.png', (files order desc) { depth } }", lines("0", "0", "0", "0", "0", "0", "0"))
  run_test_case("inside 'defchain' { directories, directories, 'joo' }", lines("ddd", "ddd", "joo"))
  run_test_case("inside 'defchain' { directories, directories, 'joo' {index +1000.5} }", lines("1000.5", "1001.5", "1002.5"))
  run_test_case("inside 'defchain' { 3, (recursiveDirectories where name = 'aa'), 4 {depth } }", lines("0", "1", "0"))
  run_test_case("inside 'defchain' { recursiveDirectories where name = 'aa'{depth; 'a.txt' {depth }; depth} }", lines("1", "0", "1"))
  run_test_case("inside 'defchain' { recursiveDirectories where name = 'aa'{depth; directories {depth }; depth} }", lines("1", "0", "1"))
  run_test_case("inside 'defchain' { recursiveDirectories where name = 'aa'{index; 'a.txt', 'b.txt' { index}; index} }", lines("0", "0", "1", "0"))
  run_test_case("inside 'defchain' { recursiveDirectories where name = 'aa'{name; 'a.txt', 'b.txt' { name}; name} }", lines("aa", "a", "b", "aa"))
  run_test_case("inside 'defchain' { inside recursiveDirectories where name = 'aa'{depth; 'a.txt' {depth }; depth} }", lines("1", "0", "1"))
  run_test_case("inside 'defchain' { inside recursiveDirectories where name = 'aa'{index; 'a.txt', 'b.txt' { index}; index} }", lines("0", "0", "1", "0"))
  run_test_case("inside 'defchain' { inside recursiveDirectories where name = 'aa'{name; 'a.txt', 'b.txt' { name}; name} }", lines("aa", "a", "b", "aa"))
  run_test_case(" inside 'defchain' { files { if index = 1 { break } print index}  } ", "0")
  run_test_case(" inside 'defchain' { files { if index = 1 { continue } print index}  } ", lines("0", "2"))
  run_test_case("6; inside 'defchain' { break; files { if index = 1 { break } print index}  } ", "6")
  run_test_case("2; inside 'defchain' { continue; files { if index = 1 { break } print index}  } ", "2")
  run_test_case(" inside 'defchain' { files order asc skip 1  } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc skip 0  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { 'nothing';  files order asc skip 3  } ", "nothing")
  run_test_case(" inside 'defchain' { 'nothing';  files order asc skip 32  } ", "nothing")
  run_test_case(" inside 'defchain' { 'nothing';  files order asc skip 323232  } ", "nothing")
  run_test_case(" inside 'defchain' { files order asc skip 1.5  } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc skip 1.999999  } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc skip -2  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc skip -0.01  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc limit 10  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc limit 3  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc limit 2  } ", lines("a.txt", "b.txt"))
  run_test_case(" inside 'defchain' { files order asc limit 2.9999  } ", lines("a.txt", "b.txt"))
  run_test_case(" inside 'defchain' { files order asc limit 0.87  } 'nada' ", "nada")
  run_test_case(" inside 'defchain' { files order asc limit 0  } 'nada' ", "nada")
  run_test_case(" inside 'defchain' { files order asc limit -23  } 'nada' ", "nada")
  run_test_case(" inside 'defchain' { files order asc every 2  } ", lines("a.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every 3  } ", lines("a.txt"))
  run_test_case(" inside 'defchain' { files order asc every 12345  } ", lines("a.txt"))
  run_test_case(" inside 'defchain' { files order asc skip 1 every 12345  } ", lines("b.txt"))
  run_test_case(" inside 'defchain' { files order asc skip -123 every -125  } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every 1 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every 0.3 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every 0 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every -3 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc every -4 skip 0.5 * 2 } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 3 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 4 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 6.8 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 20000 } ", lines("a.txt", "b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 2 } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 2.001 } ", lines("b.txt", "c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 1 } ", lines("c.txt"))
  run_test_case(" inside 'defchain' { files order asc skip 1 final 1 } ", lines("c.txt"))
  run_test_case(" inside 'defchain' { files order asc final 0 } 'nothing' ", lines("nothing"))
  run_test_case(" inside 'defchain' { files order asc final 2-12 } 'nothing2' ", lines("nothing2"))
  run_test_case(" inside 'defchain' { files order asc final 2 limit 1 } ", lines("b.txt"))
  run_test_case(" inside 'defchain' { files order asc final 3 limit 2 } ", lines("a.txt", "b.txt"))

  run_test_case(" 'a.txt' {  exists; size }  ", lines("1", "47"))
  run_test_case("'many texts' { countInside(files) }", "30")
  run_test_case("inside 'many texts' { countInside(files) }", "30")
  run_test_case("inside 'many texts' { countInside('*.txt'), countInside('*.*'), countInside('*'), countInside('*.png') }", lines("30", "30", "30", "0"))
  run_test_case("inside 'many texts' { anyInside('*.txt'), anyInside('*.*x*'), anyInside('**'), anyInside('*.png') }", lines("1", "1", "1", "0"))
  run_test_case("inside 'many texts' { count('*.txt'), count('*.*'), count('*'), count('*.png') }", lines("30", "30", "30", "0"))
  run_test_case("inside 'many texts' { any('*.txt'), any('*.*x*'), any('**'), any('*.png') }", lines("1", "1", "1", "0"))
  run_test_case("inside 'many texts' { name, fullname, exists, isDirectory, isFile }", lines("many texts", "many texts", "1", "1", "0"))
  run_test_case("inside 'many texts' { size, hidden }", lines("810", "0"))
  run_test_case("inside 'many texts' { count (files) } ", "30")
  run_test_case("inside 'many texts' { count (files where extension = 'txt') }", "30")
  run_test_case("inside 'many texts' { count (files where extension != 'txt') }", "0")
  run_test_case("inside 'many texts' { count (files where extension = 'jpg') }", "0")
  run_test_case("inside 'many texts' { size (files) } ", "810")
  run_test_case("inside 'many texts' { size (directories) } ", "0")
  run_test_case("inside 'many texts' { files order by name asc limit 5 } ", lines("ex_01.txt", "ex_02.txt", "ex_03.txt", "ex_04.txt", "ex_05.txt"))
  run_test_case("inside 'many texts' { files order by name asc limit 3 } ", lines("ex_01.txt", "ex_02.txt", "ex_03.txt"))
  run_test_case("inside 'many texts' { files order by name desc limit 5 } ", lines("ex_30.txt", "ex_29.txt", "ex_28.txt", "ex_27.txt", "ex_26.txt"))
  run_test_case("inside 'many texts' { files order by name desc limit 3 } ", lines("ex_30.txt", "ex_29.txt", "ex_28.txt"))
  run_test_case("inside 'many texts' { files order by name desc every 4 limit 5 } ", lines("ex_30.txt", "ex_26.txt", "ex_22.txt", "ex_18.txt", "ex_14.txt"))
  run_test_case("inside 'many texts' { files order by name desc skip 2 every 4 limit 5 } ", lines("ex_28.txt", "ex_24.txt", "ex_20.txt", "ex_16.txt", "ex_12.txt"))
  run_test_case("inside 'many texts' { files order by name desc skip 1 every 4 limit 5 } ", lines("ex_29.txt", "ex_25.txt", "ex_21.txt", "ex_17.txt", "ex_13.txt"))
  run_test_case("inside 'many texts' { files order by name desc every 4 limit 5 skip 1 } ", lines("ex_26.txt", "ex_22.txt", "ex_18.txt", "ex_14.txt"))
  run_test_case("inside 'many texts' { files order by name desc where right(name, 1) = 5 } ", lines("ex_25.txt", "ex_15.txt", "ex_05.txt"))
  run_test_case("inside 'many texts' { files order by name desc limit 1 { name, fullname, extension } }", lines("ex_30", "ex_30.txt", "txt"))
  run_test_case("inside 'many texts' { files order by name desc limit 1 { parent { name} } } ", "many texts")
  run_test_case("inside 'many texts' { files order by name desc limit 1 { length(name) } }", "5")
  run_test_case("inside 'many texts' { files order by name desc where name[3] = 1 and name[4] = 2 } ", "ex_12.txt")
  run_test_case("inside 'many texts' { files order by name asc final 5 }", lines("ex_26.txt", "ex_27.txt", "ex_28.txt", "ex_29.txt", "ex_30.txt"))
  run_test_case("inside 'many texts' { files order by name asc final 5 limit 4 }", lines("ex_26.txt", "ex_27.txt", "ex_28.txt", "ex_29.txt"))
  run_test_case("inside 'many texts' { files order by name asc final 5 every 2 }", lines("ex_26.txt", "ex_28.txt", "ex_30.txt"))
  run_test_case("inside 'many texts' { files order by name asc every 2 final 5 }", lines("ex_21.txt", "ex_23.txt", "ex_25.txt", "ex_27.txt", "ex_29.txt"))
  run_test_case("inside 'many texts' { files order by name asc skip 1 every 2 final 5 }", lines("ex_22.txt", "ex_24.txt", "ex_26.txt", "ex_28.txt", "ex_30.txt"))
  run_test_case("inside 'many texts' { files order by name asc skip 1 every 2 final 5 {index}}", lines("0", "1", "2", "3", "4"))
  run_test_case("inside 'many texts' { files order by name asc skip 1 every 2 final 5 {depth}}", lines("0", "0", "0", "0", "0"))
  run_test_case("inside 'many texts' { a= 0; files {if name[3] in 0,3 {a++}}; print a } ", "10")

  run_test_case("inside 'tree' { print '*.py' }", "test.py")
  run_test_case("print 'tree/*.py'", path("tree", "test.py"))
  run_test_case("inside 'tree' { print '*.js' order asc }", lines('038566.js', '274688.js', '483413.js', '593214.js', '646362.js', '917112.js'))
  (run_test_case("inside 'tree' { print '*.txt' order asc}", lines('012480.txt', '020217.txt', '047909.txt', '088310.txt', '105252.txt', 
  '210226.txt', '362312.txt', '449147.txt', '532624.txt', '558639.txt', '581940.txt', '917707.txt', '960542.txt', '987875.txt')))
  run_test_case("inside 'tree' { print '2*' order asc }", lines('210226.txt', '257953', '264026', '274688.js'))
  run_test_case("inside 'tree' { print '2*' order by isFile desc, name desc }", lines('274688.js', '210226.txt', '264026', '257953'))
  run_test_case("inside 'tree' { print '2*' order by isDirectory desc, name desc }", lines('264026', '257953', '274688.js', '210226.txt'))
  run_test_case("inside 'tree' { print '2*6' order asc }", '264026')
  run_test_case("inside 'tree' { print '012480.t*xt' order asc }", '012480.txt')
  run_test_case("inside 'tree' { print '2*0*6' order asc }", '264026')
  run_test_case("inside 'tree' { print '2*02*6' order asc }", '264026')
  run_test_case("inside 'tree' { print '2*4*6' order asc }", "264026")
  run_test_case("inside 'tree' { print '2*02*6.*txt' order asc }", "210226.txt")
  run_test_case("inside 'tree' { print '*2*' where isFile order asc skip 2 every 3 }", lines("105252.txt", "362312.txt", "646362.js"))
  run_test_case("inside 'tree' { print '*14.*' order asc }", "593214.js")
  (run_test_case("inside 'tree' { print '*4*' order asc}", lines("012480.txt", "047909.txt", "264026", "274688.js", "449147.txt", 
  "483413.js", "532624.txt", "561442", "581940.txt", "593214.js", "646362.js", "674295", "960542.txt")))
  run_test_case("inside 'tree' { print '*4*7*' order asc }", lines("047909.txt", "449147.txt"))
  run_test_case("inside 'tree' { print '4*7*' order asc} ", "449147.txt")
  (run_test_case("inside 'tree' { print '029719\*' order asc }", lines(path("029719", "011952.js"), path("029719", "286109"), 
  path("029719", "559227"), path("029719", "636110.txt"), path("029719", "743013.txt"), path("029719","877639"))))
  run_test_case("inside 'tree' { print '029719\*.txt' order asc }", lines(path("029719", "636110.txt"), path("029719", "743013.txt")))
  run_test_case("inside 'tree' { print '029719\*.js' order asc }", path("029719", "011952.js"))
  run_test_case("inside 'tree' { print '029719/7*.txt' order asc }", path("029719", "743013.txt"))
  (run_test_case("inside 'tree' { print '029719\*\*7*' order asc }", lines(path("029719", "286109", "660170.js"), 
  path("029719", "286109", "677910.txt"), path("029719", "286109", "687411"), path("029719", "877639", "057239.chh"), path("029719", "877639", "690072.js"))))
  (run_test_case("inside 'tree' { print '029719\*\*' order asc } ", lines(path("029719", "286109", "080295"), path("029719", "286109", "215429.txt"), 
  path("029719", "286109", "626654.chh"), path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "286109", "687411"), path("029719", "559227", "438292.txt"), path("029719", "559227", "488903"), 
  path("029719", "559227", "539553"), path("029719", "877639", "057239.chh"), 
  path("029719", "877639", "402318"), path("029719", "877639", "690072.js"))))
  (run_test_case("inside 'tree' { print '029719\*\*' where isFile order asc }", lines(path("029719", "286109", "215429.txt"), 
  path("029719", "286109", "626654.chh"), path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "559227", "438292.txt"), path("029719", "877639", "057239.chh"), path("029719", "877639", "690072.js"))))
  (run_test_case("inside 'tree' { print '029719\*\*' where isDirectory order asc }", lines(path("029719", "286109", "080295"),
  path("029719", "286109", "687411"), path("029719", "559227", "488903"), 
  path("029719", "559227", "539553"), path("029719", "877639", "402318"),)))
  (run_test_case("inside 'tree' { print '029719\*\*2*' order asc }", lines(path("029719", "286109", "080295"), 
  path("029719", "286109", "215429.txt"), path("029719", "286109", "626654.chh"), path("029719", "559227", "438292.txt"), 
  path("029719", "877639", "057239.chh"), path("029719", "877639", "402318"), path("029719", "877639", "690072.js"))))
  (run_test_case("print 'tree/029719\*\*2*' order asc", lines(path("tree", "029719", "286109", "080295"), 
  path("tree", "029719", "286109", "215429.txt"), path("tree", "029719", "286109", "626654.chh"), path("tree", "029719", "559227", "438292.txt"), 
  path("tree", "029719", "877639", "057239.chh"), path("tree", "029719", "877639", "402318"), path("tree", "029719", "877639", "690072.js"))))
  run_test_case("inside 'tree' { print '*7*/*7*.chh' order asc }", path("674295", "415734.chh"))
  (run_test_case("inside 'tree' { print '*7*/*7*.txt' order asc }", lines(path("029719", "743013.txt"),path("674295", "486275.txt"),
  path("674295", "744449.txt"), path("674295", "757628.txt"), path("702035", "473853.txt"), path("702035", "711036.txt"), path("702035", "981307.txt"))))
  (run_test_case("inside 'tree' { print '*/*/*6*7*' order asc }", lines(path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "286109", "687411"), path("029719", "877639", "690072.js"), path("264026", "786669", "396758"), path("561442", "413938", "560857.txt"))))
  (run_test_case("inside 'tree' { print '*/*/6*7*' order asc }", lines(path("029719", "286109", "660170.js"), 
  path("029719", "286109", "677910.txt"), path("029719", "286109", "687411"), path("029719", "877639", "690072.js"))))
  (run_test_case("inside 'tree' { print '**.js' where depth = 1 order asc }", lines(path("029719", "011952.js"),
  path("089212", "238781.js"), path("089212", "532245.js"), path("561442", "345559.js"),
  path("561442", "567635.js"), path("702035", "465580.js"), path("702035", "643304.js"), path("702035", "691437.js"))))
  (run_test_case("inside 'tree' { print '*/*.js' order asc }", lines(path("029719", "011952.js"),
  path("089212", "238781.js"), path("089212", "532245.js"), path("561442", "345559.js"),
  path("561442", "567635.js"), path("702035", "465580.js"), path("702035", "643304.js"), path("702035", "691437.js"))))
  (run_test_case("inside 'tree' { print '**.js' where depth = 2 order desc }", lines(path("829131", "667797", "828412.js"),
  path("829131", "372165", "260134.js"), path("702035", "250274", "575573.js"), path("530856", "197877", "788392.js"),
  path("029719", "877639", "690072.js"), path("029719", "286109", "660170.js"))))
  (run_test_case("inside 'tree' { print '*/*/*.js' order desc }", lines(path("829131", "667797", "828412.js"),
  path("829131", "372165", "260134.js"), path("702035", "250274", "575573.js"), path("530856", "197877", "788392.js"),
  path("029719", "877639", "690072.js"), path("029719", "286109", "660170.js"))))
  (run_test_case("inside 'tree' { print '*/*2*/*.js' order desc }", lines(path("829131", "372165", "260134.js"),
  path("702035", "250274", "575573.js"), path("029719", "286109", "660170.js"))))
  (run_test_case("inside 'tree' { print '*/*7/*.js' order desc }", lines(path("829131", "667797", "828412.js"),
  path("530856", "197877", "788392.js"))))
  (run_test_case("inside 'tree' { print '**.txt' where name[0] = 5 order desc }", lines(
  path("829131", "863770", "571186.txt"), "581940.txt", path("561442", "413938", "560857.txt"),
  path("561442", "413938", "512316.txt"), "558639.txt", "532624.txt")))
  (run_test_case("inside 'tree' { print '*/**.txt' order desc every 16 }", lines(
  path("829131", "863770", "877450.txt"), path("674295", "056884.txt"),
  path("264026", "789148", "268141.txt"), path("029719", "743013.txt"))))
  (run_test_case("inside 'tree' { print '*/**.txt' order desc where index % 16 = 0 }", lines(
  path("829131", "863770", "877450.txt"), path("674295", "056884.txt"),
  path("264026", "789148", "268141.txt"), path("029719", "743013.txt"))))
  (run_test_case("inside 'tree' { print '829131/863770/*' where isFILe order asc }", lines(path("829131", "863770", "571186.txt"),
  path("829131", "863770", "783877.txt"), path("829131", "863770", "877450.txt"))))
  (run_test_case("inside 'tree' { print '829131/**' order asc }", lines(path("829131", "372165"),
  path("829131", "372165", "240541"), path("829131", "372165", "260134.js"), path("829131", "429798"), 
  path("829131", "429798", "702683.hh"), path("829131", "429798", "968092.hh"), path("829131", "429798", "990148.txt"), 
  path("829131", "667797"), path("829131", "667797", "080298.txt"), path("829131", "667797", "577575"),
  path("829131", "667797", "828412.js"), path("829131", "863770"), path("829131", "863770", "458369"),
  path("829131", "863770", "571186.txt"), path("829131", "863770", "727014"),
  path("829131", "863770", "783877.txt"), path("829131", "863770", "877450.txt"))))
  (run_test_case("inside 'tree' { print '829131/**.hh' order asc }", lines(
  path("829131", "429798", "702683.hh"), path("829131", "429798", "968092.hh"))))
  
  run_test_case("inside 'modificables' { 'existing_empty_dir' {exists } }", "1")
  run_test_case("inside 'modificables' { 'non_existing_empty_dir' {exists } }", "0")
  run_test_case("inside 'modificables' { 'existing_empty_dir' {isDirectory } }", "1")
  run_test_case("inside 'modificables' { 'existing_empty_dir' {isFile } }", "0")
  run_test_case("inside 'modificables' { 'non_existing_empty_dir' {isDirectory } }", "1")
  run_test_case("inside 'modificables' { 'non_existing_empty_dir' {isFile } }", "0")
  run_test_case("inside 'modificables' { '' {exists, isFile, isDirectory, length(path) } }", lines("0", "0", "0", "0"))
  run_test_case("inside 'modificables' { '?/?' {exists, isFile, isDirectory, length(path) } }", lines("0", "0", "0", "0"))
  run_test_case("inside 'modificables' { 'non_existing_dir' {exists, isFile, isDirectory } }", lines("0", "0", "1"))
  run_test_case("inside 'modificables' { 'non_existing_file.txt' {exists, isFile, isDirectory } }", lines("0", "1", "0"))
  run_test_case("inside 'modificables' { create 'existing_empty_dir'}", "Failed to create directory 'existing_empty_dir'")
  run_test_case("inside 'modificables' { force create 'existing_empty_dir'}", "Create directory 'existing_empty_dir'")
  (run_test_case("inside 'modificables' { create 'non_existing_empty_dir'; delete 'non_existing_empty_dir'}",
  lines("Create directory 'non_existing_empty_dir'", "Delete 'non_existing_empty_dir'")))
  (run_test_case("inside 'modificables' { recreate 'rainbow.png' to 3 june 2020, 10:11:12 } inside 'modificables' { 'rainbow.png' {print creation}}",
  lines("Recreate 'rainbow.png' to 3 June 2020, 10:11:12", "3 June 2020, 10:11:12")))
  (run_test_case("inside 'modificables' { reaccess 'rainbow.png' to 4 june 2019, 9:05:01 } inside 'modificables' { 'rainbow.png' {print access}}",
  lines("Reaccess 'rainbow.png' to 4 June 2019, 09:05:01", "4 June 2019, 09:05:01")))
  (run_test_case("inside 'modificables' { remodify 'rainbow.png' to 12 april 2017, 14:12:34 } inside 'modificables' { 'rainbow.png' {print modification }}",
  lines("Remodify 'rainbow.png' to 12 April 2017, 14:12:34", "12 April 2017, 14:12:34")))
  run_test_case("inside 'modificables' { 'a.txt' { print parent(path) = location }}", "1")

  run_test_case("copy 'cc' to location as 'ccc' ", "Failed to copy 'cc'")
  run_test_case("force copy 'cc' to location as 'ccc' ", "Copy 'cc' to 'res' as 'ccc'")
  run_test_case(" 'cc', 'ccc' { anyInside(*) }", lines("1", "1"))
  run_test_case("inside 'ccc' { createfile '00.js' }", "Create file '00.js'")
  run_test_case("inside 'ccc' { createfiles '04.js' }", "Create file '04.js'")
  run_test_case("inside 'ccc' { stack createfile '01.js' }", "Create file '01.js'")
  run_test_case("inside 'ccc' { stack createfile '01.js' }", "Create file '01(2).js'")
  run_test_case("inside 'ccc' { stack createfile '01.js' }", "Create file '01(3).js'")
  run_test_case("inside 'ccc' { stack createfiles '02.js' }", "Create file '02.js'")
  run_test_case("inside 'ccc' { stack createfiles '02.js' }", "Create file '02(2).js'")
  run_test_case("inside 'ccc' { stack createfiles '02.js' }", "Create file '02(3).js'")
  run_test_case("inside 'ccc' { '03.js' { exists, isFile, isDirectory, size  } }", lines("1", "1", "0", "6"))
  run_test_case("inside 'ccc' { createfile '03.js' }", "Failed to create file '03.js'")
  (run_test_case("inside 'ccc' { force createfile '03.js';; '03.js' { exists, isFile, isDirectory, size  } }", 
  lines("Create file '03.js'", "1", "1", "0", "0")))
  (run_test_case("inside 'ccc' { ('00.js', '04.js', '01.js', '01(2).js', '05.js', '01(3).js', '02.js', '02(2).js', '02(3).js', '03.js'){exists+string(isfile)} }", 
  lines("11","11","11","11","01","11","11","11","11","11")))
  run_test_case("inside 'ccc' { count ('*.js') }", "11")
  run_test_case("any ('ccc/*.js') ", "1")
  run_test_case("counT('ccc/*.js') ", "11")
  (run_test_case("inside 'ccc' { createFiles '07.js', '07.js', '08.js' }", 
  lines("Create file '07.js'", "Failed to create file '07.js'", "Create file '08.js'")))
  run_test_case("inside 'ccc' { create '10.js' }", "Create file '10.js'")
  run_test_case("inside 'ccc' { create '10.js' }", "Failed to create file '10.js'")
  run_test_case("inside 'ccc' { '10.js' { exists + '_' + isFile } }", "1_1")
  run_test_case("inside 'ccc' { stack create '10.js' }", "Create file '10(2).js'")
  run_test_case("inside 'ccc' { '10(2).js' { exists + '_' + isFile } }", "1_1")
  run_test_case("inside 'ccc' { stack create '10.js' }", "Create file '10(3).js'")
  run_test_case("inside 'ccc' { '10(3).js' { exists + '_' + isFile } }", "1_1")
  run_test_case("inside 'ccc' { create '10.js', '11.js' }", lines("Failed to create file '10.js'", "Create file '11.js'"))
  run_test_case("inside 'ccc' { create '12' }", "Create directory '12'")
  run_test_case("inside 'ccc' { '12' {  exists+ string(isDirectory)+ empty } }", "111")
  run_test_case("inside 'ccc' { stack create '12' }", "Create directory '12(2)'")
  run_test_case("inside 'ccc' { '12(2)' {  exists+ string(isFile)+ empty } }", "101")
  run_test_case("inside 'ccc' { createdirectory '21' }", "Create directory '21'" )
  run_test_case("inside 'ccc' { createdirectory '21' }", "Failed to create directory '21'" )
  run_test_case("inside 'ccc' { force createdirectory '21' }", "Create directory '21'" )
  run_test_case("inside 'ccc' { force createdirectories '22.txt' }", "Create directory '22.txt'" )
  run_test_case("inside 'ccc' { stack createdirectories '22.txt' }", "Create directory '22.txt(2)'" )
  run_test_case("inside 'ccc' { '21', '10.js', '22', '22.txt', '22.txt(2)' { exists + '' + isDirectory} }", lines("11", "10", "01", "11", "11"))
  run_test_case("inside 'ccc' { createfile '30' }", "Create file '30'")
  run_test_case("inside 'ccc' { '30' { exists + 'm' + isFile } }", "1m1")
  run_test_case("inside 'ccc' { '31' { create; exists + 'm' + isFile } }", lines("Create directory '31'", "1m0"))
  run_test_case("inside 'ccc' { '32' { create; 30 + 2 { exists + name + isFile} } }", lines("Create directory '32'", "1320"))
  run_test_case("inside 'ccc' { create '40/10.js' }", "Create file '10.js'")
  run_test_case("inside 'ccc' { create '40/20' }", "Create directory '20'")
  run_test_case("inside 'ccc' { inside 10*4 { '10.js', 20, '30.js' { exists + 'o'+ isDirectory + 'o'+ isFile }}}", lines("1o0o1", "1o1o0", "0o0o1"))
  run_test_case("inside 'ccc' { copy 'a0.js' to 'a0' } ", "Copy 'a0.js' to 'a0'")
  run_test_case("inside 'ccc' { copy 'a0.js' to 'a0' } ", "Failed to copy 'a0.js'")
  run_test_case("inside 'ccc' { force copy 'a0.js' to 'a0' } ", "Copy 'a0.js' to 'a0'")
  run_test_case("inside 'ccc' { stack copy 'a0.js' to 'a0' } ", "Copy 'a0.js' to 'a0'")
  run_test_case("inside 'ccc' { copy ('a0.js', 'a1.js') to 'a0' } ", lines("Failed to copy 'a0.js'", "Copy 'a1.js' to 'a0'"))
  run_test_case("inside 'ccc' { 'a0/a0.js', 'a0/a0(2).js', 'a0/a1.js' { size } } ", lines("3", "3", "4"))
  run_test_case("inside 'ccc' { copy '*.jsk' to 'a0' } ", "Copy 'a0.jsk' to 'a0'")
  run_test_case("inside 'ccc' { inside 'a0' {   size(*) + '_' + count(*)  } } ", "11_4")
  run_test_case("inside 'ccc' { 'a0' {   size + ' ' + countInside(*)  } } ", "11 4")
  run_test_case("inside 'ccc' { copy 'a0' to location as 'a1' } ", "Copy 'a0' to 'ccc' as 'a1'")
  run_test_case("inside 'ccc' { 'a1' {   size + ' ' + countInside(*)  } } ", "11 4")
  run_test_case("inside 'ccc' { stack copy 'a0' to location as 'a1' } ", "Copy 'a0' to 'ccc' as 'a1(2)'")
  run_test_case("inside 'ccc' { 'a1(2)' {   size + ' ' + countInside(*)  } } ", "11 4")
  run_test_case("inside 'ccc' { force copy 'a0' to location as 'a1' } ", "Copy 'a0' to 'ccc' as 'a1'")
  run_test_case("inside 'ccc' { 'a1' {   size + ' ' + countInside(*)  } } ", "11 4")
  run_test_case("inside 'ccc' { copy 'a0' to 'a1' as 'a2' } ", "Copy 'a0' to 'a1' as 'a2'")
  run_test_case("inside 'ccc' { 'a1' { size } } ", "22")
  run_test_case("inside 'ccc' { inside 'a1/a2' { count(*) } } ", "4")
  run_test_case("size ('ccc/a1') ", "22")
  run_test_case("size ('ccc/a1/a2/a0.jsk') ", "1")
  run_test_case("print 'ccc/a1/a2/*.jsk'", path("ccc","a1","a2","a0.jsk"))
  run_test_case("inside 'ccc' { move 'a0.js' to '5.js' } ", "Move 'a0.js' to '5.js'")
  run_test_case("inside 'ccc' { '5.js' { exists, isDirectory, size, existsInside('a0.js')  } } ", lines("1", "1", "3", "1"))
  run_test_case("inside 'ccc' { copy 'b1' to location as 'bx' } ", "Copy 'b1' to 'ccc' as 'bx'")
  run_test_case("inside 'ccc' { 'b1', 'b2' { size }  } ", lines("11", "15"))
  run_test_case("inside 'ccc' { move 'b1' to 'b2' } ", "Failed to move 'b1'")
  run_test_case("inside 'ccc' { force move 'b1' to 'b2' } ", "Move 'b1' to 'b2'")
  run_test_case("inside 'ccc' { copy 'bx' to location as 'b1' } ", "Copy 'bx' to 'ccc' as 'b1'")
  run_test_case("inside 'ccc' { stack move 'b1' to 'b2' } ", "Move 'b1' to 'b2'")
  run_test_case("inside 'ccc' { move 'bx' to location as 'b1' } ", "Move 'bx' to 'ccc' as 'b1'")
  run_test_case("inside 'ccc' { move 'b1' to 'b2' as 'b3'} ", "Move 'b1' to 'b2' as 'b3'")
  run_test_case("inside 'ccc/b2' {directories {size  }} ", lines("11", "11", "11"))
  run_test_case("'ccc/b2' {  size, countInside(**), countInside('**.txt'), countInside('*.txt') } ", lines("39", "24", "15", "3"))
  run_test_case("inside 'ccc' {delete 'bb3'} ", "Failed to delete 'bb3'")
  run_test_case("inside 'ccc' {drop 'bb3'} ", "Failed to drop 'bb3'")
  run_test_case("inside 'ccc' {delete 'bb1';  'bb1' {exists } } ", lines("Delete 'bb1'", "0"))
  run_test_case("inside 'ccc' {drop 'bb2';  'bb2' {exists } } ", lines("Drop 'bb2'", "0"))
  run_test_case("inside 'ccc' {delete 'aaaa.html';  'aaaa.html' {exists } } ", lines("Delete 'aaaa.html'", "0"))
  run_test_case("inside 'ccc' {drop 'aaaa2.html';  'aaaa2.html' {exists } } ", lines("Drop 'aaaa2.html'", "0"))
  run_test_case("inside 'ccc' {'bbbb.html' {delete; exists } } ", lines("Delete 'bbbb.html'", "0"))
  run_test_case("inside 'ccc' {'bbbb2.html' {drop; exists } } ", lines("Drop 'bbbb2.html'", "0"))
  run_test_case("inside 'ccc' {'cccc.html' {delete this; exists } } ", lines("Delete 'cccc.html'", "0"))
  run_test_case("inside 'ccc' {'cccc2.html' {drop this; exists } } ", lines("Drop 'cccc2.html'", "0"))
  run_test_case("inside 'ccc' { select 'select test.txt' } ", "Select 'select test.txt'")
  run_test_case("inside 'ccc' { copy 'copy test.txt' } ", "Copy 'copy test.txt'")
  run_test_case("inside 'ccc' { open 'open test 1 of 2.txt' } ", "Open 'open test 1 of 2.txt'")
  run_test_case("inside 'ccc' { open 'open test 2 of 2' } ", "Open 'open test 2 of 2'")
  run_test_case("inside 'ccc' { open 'open with notepad test.css' with 'notepad' } ", "Open 'open with notepad test.css' with 'notepad'")
  run_test_case("inside 'ccc' { '*.cs' order asc { fullname + hidden} } 0", lines("hidden.cs1", "not hidden.cs0", "0"))
  run_test_case("inside 'ccc' { hide 'not hidden.cs'; 'not hidden.cs' { hidden} } 1", lines("Hide 'not hidden.cs'", "1", "1"))
  run_test_case("inside 'ccc' { unhide 'hidden.cs'; 'hidden.cs' { hidden} } 2", lines("Unhide 'hidden.cs'", "0", "2"))
  run_test_case("inside 'ccc' { hide 'not hidden'; 'not hidden' { hidden} } 3", lines("Hide 'not hidden'", "1", "3"))
  run_test_case("inside 'ccc' { unhide 'hidden'; 'hidden' { hidden} } 4", lines("Unhide 'hidden'", "0", "4"))
  run_test_case("inside 'ccc' { hide 'not existing'; 'not existing' { hidden} } 5", lines("Failed to hide 'not existing'", "0", "5"))
  run_test_case("inside 'ccc' { unhide 'not existing'; 'not existing' { hidden} } 6", lines("Failed to unhide 'not existing'", "0", "6"))
  run_test_case("inside 'ccc' { 'g' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("1", "0", "1", "", "g", "g", "0"))
  run_test_case("inside 'ccc' { 'g2' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("0", "1", "0", "", "g2", "g2", "0"))
  run_test_case("inside 'ccc' { 'g.png' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("0", "1", "1", "", "g.png", "g.png", "0"))
  run_test_case("inside 'ccc' { 'g2.png' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("1", "0", "0", "png", "g2", "g2.png", "0"))
  run_test_case("inside 'ccc' { 'g.png/a' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("1", "0", "1", "", "a", "a", "1"))
  run_test_case("inside 'ccc' { 'g.png/b' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", lines("0", "1", "1", "", "b", "b", "1"))
  (run_test_case("inside 'ccc' { 'g.png/a.pdf.doc' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", 
  lines("1", "0", "1", "doc", "a.pdf", "a.pdf.doc", "1")))
  (run_test_case("inside 'ccc' { 'g.png/a.pdf.do' { isFile, isDirectory, exists, extension, name, fullname, depth  } } ", 
  lines("1", "0", "0", "do", "a.pdf", "a.pdf.do", "1")))
  run_test_case("inside 'ccc' { createFile 'z1.txt'; 'z1.txt' { creation.year != -1; creation.second != -1 } }", lines("Create file 'z1.txt'", TRUE, TRUE))
  run_test_case("inside 'ccc' { createFile 'z2.txt'; 'z2.txt' { a = modification.date; a.year != -1; a.day != -1 } }", lines("Create file 'z2.txt'", TRUE, TRUE))
  run_test_case("inside 'numbers' { recursiveDirectories order by depth desc { name } }", lines("6", "5", "4", "3", "2", "1"))
  run_test_case("inside 'numbers' { recursiveDirectories order by depth asc { name } }", lines("1", "2", "3", "4", "5", "6"))
  run_test_case("inside 'numbers' { inside '1/2/3/' { files  } }", "4.txt")
  run_test_case("inside 'numbers' { inside '1/2/3/' { directories  } }", "4")
  run_test_case("inside 'numbers' { inside '1/2/3/' { files { size  } } }", "4")
  run_test_case("inside 'numbers' { inside '1/2/3/' { directories { size} } }", "11")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../'  {  location { name }  } } ", "2")
  run_test_case("inside 'numbers/1/2/3/' {  inside './.././././//'  {  location { name }  } } ", "2")
  run_test_case("inside 'numbers/1/2/3/' {  inside './.././././..//'  {  location { name }  } } ", "1")
  run_test_case("inside 'numbers/1/2/3/' {  inside '../.././././..//'  {  location { name }  } } ", "numbers")
  run_test_case("inside 'numbers/1/2/3/' {  inside './././././//'  {  files  } } ", "4.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './.././././//'  {  files  } } ", "3.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../../*'  {  files  } } ", "3.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../.././../*'  {  files  } } ", "2.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../.././../*/*'  {  files  } } ", "3.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../.././../*/*/*'  {  files  } } ", "4.txt")
  run_test_case("inside 'numbers/1/2/3/' {  inside './../.././../*/*/*/*'  {  files  } } ", "5.txt")
  run_test_case("inside 'numbers/1/2/3/' {  './*/*.txt' } ", path("4", "5.txt"  ))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/*.txt' } ", path("..", "3", "4.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/*.txt' } ", path("..", "3", "4.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/4.txt' } ", path("..", "3", "4.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/*/*.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/*/5.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/4/*.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/*/*.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/*/5.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/4/5.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/4/*.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../*/4/5.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/4/*.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../3/*/5.txt' } ", path("..", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/*/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/*/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/4/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/4/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/*/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/*/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/4/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/4/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/*/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/*/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/4/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/4/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/*/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/*/5.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/4/*.txt' } ", path("..", "..", "2", "3", "4", "5.txt"))
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/*/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/*/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/4/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/*/4/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/*/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/*/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/4/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../*/3/4/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/*/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/*/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/4/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/*/4/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/*/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/*/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/4/*.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/' {  '../../2/3/4/5.txt' { size * 3} } ", "15")
  run_test_case("inside 'numbers/1/2/3/4' {  '*.txt' } ", "5.txt")
  run_test_case("inside 'numbers/1/2/3/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/3/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/3/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/3/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/3/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/3/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/2/*/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/3/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/1/*/*/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/3/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/2/*/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/3/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/4' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/4' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/4' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/*' {  '*/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/*' {  '5/*.txt' } ", path("5", "6.txt"))
  run_test_case("inside 'numbers/*/*/*/*' {  '5/6*.txt' } ", path("5", "6.txt"))
  run_test_case(" 'numbers/1/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/1/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/2/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/3/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/4/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case(" 'numbers/*/*/*/*/*' where isFile { this, size*2, name } ", lines(path("numbers","1","2","3","4","5.txt"), "10", "5"))
  run_test_case("inside 'numbers' {  '**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/*/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/*/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/**/**/*/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*.txt' where fullname = '5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*' where fullname = '5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/*.txt' where fullname = '5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/**/*5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/*/*5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/*5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/**/**/*5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/*/**/*5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/**/**/*//5*.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/**/*/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/**/**/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '*/*/**/**/6.txt' } ", path("1","2","3","4","5","6.txt"))
  run_test_case("inside 'numbers' {  '**/*/**/**/**/*/**/5.txt' } ", path("1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/*/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/*/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/**/**/*/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/*5*.tx*t' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/**/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/*/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/**/**/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/*/**/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/**/**/*/5*.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/**/*/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/**/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/*/*/**/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers' {  '../numbers/**/*/**/**/**/*/**/5.txt' } ", path("..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/*/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/*/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/**/**/*/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/4/*5.txt*' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/**/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/*/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/**/**/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/*/**/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/**/**/*/5*.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/**/*/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/**/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/*/*/**/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case("inside 'numbers///1/ ' {  '../../numbers/**/*/**/**/**/*/**/5.txt' } ", path("..","..","numbers","1","2","3","4","5.txt"))
  run_test_case(" 'numbers' { size } ", "21")
  run_test_case(" size ('numbers') ", "21")
  run_test_case(" size ('numbers') < -5", FALSE)
  run_test_case(" size ('numbers') < 5", FALSE)
  run_test_case(" size ('numbers') < 20.3", FALSE)
  run_test_case(" size ('numbers') < 21", FALSE)
  run_test_case(" size ('numbers') < 21.23", TRUE)
  run_test_case(" size ('numbers') < 234.234", TRUE)
  run_test_case(" size ('numbers') <= -5", FALSE)
  run_test_case(" size ('numbers') <= 5", FALSE)
  run_test_case(" size ('numbers') <= 20.3", FALSE)
  run_test_case(" size ('numbers') <= 21", TRUE)
  run_test_case(" size ('numbers') <= 21.23", TRUE)
  run_test_case(" size ('numbers') <= 234.234", TRUE)
  run_test_case(" size ('numbers') > -5", TRUE)
  run_test_case(" size ('numbers') > 5", TRUE)
  run_test_case(" size ('numbers') > 20.3", TRUE)
  run_test_case(" size ('numbers') > 21", FALSE)
  run_test_case(" size ('numbers') > 21.23", FALSE)
  run_test_case(" size ('numbers') > 234.234", FALSE)
  run_test_case(" size ('numbers') >= -5", TRUE)
  run_test_case(" size ('numbers') >= 5", TRUE)
  run_test_case(" size ('numbers') >= 20.3", TRUE)
  run_test_case(" size ('numbers') >= 21", TRUE)
  run_test_case(" size ('numbers') >= 21.23", FALSE)
  run_test_case(" size ('numbers') >= 234.234", FALSE)
  run_test_case(" size ('numbers') = -5", FALSE)
  run_test_case(" size ('numbers') = 5", FALSE)
  run_test_case(" size ('numbers') = 20.3", FALSE)
  run_test_case(" size ('numbers') = 21", TRUE)
  run_test_case(" size ('numbers') = 21.23", FALSE)
  run_test_case(" size ('numbers') = 234.234", FALSE)
  run_test_case(" size ('numbers') == -5", FALSE)
  run_test_case(" size ('numbers') == 5", FALSE)
  run_test_case(" size ('numbers') == 20.3", FALSE)
  run_test_case(" size ('numbers') == 21", TRUE)
  run_test_case(" size ('numbers') == 21.23", FALSE)
  run_test_case(" size ('numbers') == 234.234", FALSE)
  run_test_case(" size ('numbers') != -5", TRUE)
  run_test_case(" size ('numbers') != 5", TRUE)
  run_test_case(" size ('numbers') != 20.3", TRUE)
  run_test_case(" size ('numbers') != 21", FALSE)
  run_test_case(" size ('numbers') != 21.23", TRUE)
  run_test_case(" size ('numbers') != 234.234", TRUE)
  run_test_case(" inside 'numbers' { size (*) } ", "21")
  run_test_case(" inside 'numbers' { size (*) < -5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) < 5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) < 20.3 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) < 21 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) < 21.23 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) < 234.234 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) <= -5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) <= 5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) <= 20.3 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) <= 21 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) <= 21.23 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) <= 234.234 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) > -5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) > 5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) > 20.3 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) > 21 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) > 21.23 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) > 234.234 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) >= -5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) >= 5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) >= 20.3 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) >= 21 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) >= 21.23 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) >= 234.234 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) = -5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) = 5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) = 20.3 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) = 21 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) = 21.23 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) = 234.234 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) == -5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) == 5 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) == 20.3 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) == 21 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) == 21.23 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) == 234.234 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) != -5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) != 5 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) != 20.3 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) != 21 } ", FALSE)
  run_test_case(" inside 'numbers' { size (*) != 21.23 } ", TRUE)
  run_test_case(" inside 'numbers' { size (*) != 234.234 } ", TRUE)
  run_test_case(" inside 'numbers' { size ('not existing') } ", NAN)
  run_test_case(" inside 'numbers' { 'not existing' { size } } ", NAN)
  run_test_case(" inside 'numbers' { size ('not existing') < -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') < -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') < 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') < 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') <= -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') <= -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') <= 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') <= 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') > -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') > -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') > 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') > 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') >= -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') >= -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') >= 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') >= 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') = -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') = -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') = 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') = 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') != -2 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') != -1 } ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') != 0 }  ", FALSE)
  run_test_case(" inside 'numbers' { size ('not existing') != 1 }  ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  < -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  < -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  < 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  < 1 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  <= -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  <= -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  <= 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  <= 1 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  > -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  > -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  > 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  > 1 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  >= -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  >= -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  >= 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  >= 1 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  == -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  == -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  == 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  == 1 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  != -2 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  != -1 } } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  != 0 }  } ", FALSE)
  run_test_case(" inside 'numbers' { 'not existing' { size  != 1 }  } ", FALSE)
  run_test_case("inside 'numbers' { count(**) } ", "12")
  run_test_case("inside 'numbers' { count(**) < -2 }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) < 4  }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) < 12  }   ", FALSE)
  run_test_case("inside 'numbers' { count(**) < 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { count(**) < 122  }  ", TRUE)
  run_test_case("inside 'numbers' { count(**) <= -2 }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) <= 4  }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) <= 12  }   ", TRUE)
  run_test_case("inside 'numbers' { count(**) <= 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { count(**) <= 122  }  ", TRUE)
  run_test_case("inside 'numbers' { count(**) > -2 }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) > 4  }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) > 12  }   ", FALSE)
  run_test_case("inside 'numbers' { count(**) > 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { count(**) > 122  }  ", FALSE)
  run_test_case("inside 'numbers' { count(**) >= -2 }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) >= 4  }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) >= 12  }   ", TRUE)
  run_test_case("inside 'numbers' { count(**) >= 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { count(**) >= 122  }  ", FALSE)
  run_test_case("inside 'numbers' { count(**) = -2 }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) = 4  }    ", FALSE)
  run_test_case("inside 'numbers' { count(**) = 12  }   ", TRUE)
  run_test_case("inside 'numbers' { count(**) = 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { count(**) = 122  }  ", FALSE)
  run_test_case("inside 'numbers' { count(**) != -2 }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) != 4  }    ", TRUE)
  run_test_case("inside 'numbers' { count(**) != 12  }   ", FALSE)
  run_test_case("inside 'numbers' { count(**) != 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { count(**) != 122  }  ", TRUE)
  run_test_case(" 'numbers' { countInside(**) } ", "12")
  run_test_case(" 'numbers' { countInside(**) < -2 }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) < 4  }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) < 12  }   ", FALSE)
  run_test_case(" 'numbers' { countInside(**) < 12.02 } ", TRUE)
  run_test_case(" 'numbers' { countInside(**) < 122  }  ", TRUE)
  run_test_case(" 'numbers' { countInside(**) <= -2 }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) <= 4  }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) <= 12  }   ", TRUE)
  run_test_case(" 'numbers' { countInside(**) <= 12.02 } ", TRUE)
  run_test_case(" 'numbers' { countInside(**) <= 122  }  ", TRUE)
  run_test_case(" 'numbers' { countInside(**) > -2 }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) > 4  }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) > 12  }   ", FALSE)
  run_test_case(" 'numbers' { countInside(**) > 12.02 } ", FALSE)
  run_test_case(" 'numbers' { countInside(**) > 122  }  ", FALSE)
  run_test_case(" 'numbers' { countInside(**) >= -2 }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) >= 4  }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) >= 12  }   ", TRUE)
  run_test_case(" 'numbers' { countInside(**) >= 12.02 } ", FALSE)
  run_test_case(" 'numbers' { countInside(**) >= 122  }  ", FALSE)
  run_test_case(" 'numbers' { countInside(**) = -2 }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) = 4  }    ", FALSE)
  run_test_case(" 'numbers' { countInside(**) = 12  }   ", TRUE)
  run_test_case(" 'numbers' { countInside(**) = 12.02 } ", FALSE)
  run_test_case(" 'numbers' { countInside(**) = 122  }  ", FALSE)
  run_test_case(" 'numbers' { countInside(**) != -2 }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) != 4  }    ", TRUE)
  run_test_case(" 'numbers' { countInside(**) != 12  }   ", FALSE)
  run_test_case(" 'numbers' { countInside(**) != 12.02 } ", TRUE)
  run_test_case(" 'numbers' { countInside(**) != 122  }  ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) } ", "12")
  run_test_case("inside 'numbers' { countInside(**) < -2 }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) < 4  }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) < 12  }   ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) < 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) < 122  }  ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) <= -2 }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) <= 4  }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) <= 12  }   ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) <= 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) <= 122  }  ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) > -2 }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) > 4  }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) > 12  }   ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) > 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) > 122  }  ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) >= -2 }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) >= 4  }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) >= 12  }   ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) >= 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) >= 122  }  ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) = -2 }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) = 4  }    ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) = 12  }   ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) = 12.02 } ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) = 122  }  ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) != -2 }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) != 4  }    ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) != 12  }   ", FALSE)
  run_test_case("inside 'numbers' { countInside(**) != 12.02 } ", TRUE)
  run_test_case("inside 'numbers' { countInside(**) != 122  }  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) ", "5")
  run_test_case("a = 1,2,3,4,5; count(a) < -3 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) < 0  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) < 2  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) < 5  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) < 55 ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) <= -3 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) <= 0  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) <= 2  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) <= 5  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) <= 55 ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) > -3 ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) > 0  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) > 2  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) > 5  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) > 55 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) >= -3 ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) >= 0  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) >= 2  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) >= 5  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) >= 55 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) = -3 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) = 0  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) = 2  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) = 5  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) = 55 ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) != -3 ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) != 0  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) != 2  ", TRUE)
  run_test_case("a = 1,2,3,4,5; count(a) != 5  ", FALSE)
  run_test_case("a = 1,2,3,4,5; count(a) != 55 ", TRUE)
  run_test_case("inside 'dirsizes' {* order by fullname asc {fullname  + size }}", lines("1time22", "1time44", "20.txt20", "6times16", "6times212", "6times318"))
  run_test_case("inside 'dirsizes' {* order by size desc {size }}", lines("20", "18", "12", "6", "4", "2"))
  run_test_case("inside 'dirsizes' {* order by size asc {size }}", lines("2", "4", "6", "12", "18", "20"))
  run_test_case("inside 'dirsizes' {* order by size asc {name }}", lines("1time2", "1time4", "6times1", "6times2", "6times3", "20"))
  run_test_case("inside 'dirsizes' {* where size = 20}", "20.txt")
  run_test_case("inside 'dirsizes' {* where size = 18}", "6times3")
  run_test_case("inside 'dirsizes' {* where size = 12}", "6times2")
  run_test_case("inside 'dirsizes' {* where size == 4}", "1time4")
  run_test_case("inside 'dirsizes' {* where size = 5}", NOTHING)
  run_test_case("inside 'dirsizes' {* where size = 4 and false}", NOTHING)
  run_test_case("inside 'dirsizes' {* where size = 12 and size = 18}", NOTHING)
  run_test_case("inside 'dirsizes' {* where size != 18 order by name desc}", lines("6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size != 12 order by name desc}", lines("6times3", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size != 5 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size != 1 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size != -235 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size != 23435 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where size < 5 order by name desc }", lines("1time4","1time2"))
  run_test_case("inside 'dirsizes' {* where size < 5 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where size < 4 order by name desc }", "1time2")
  run_test_case("inside 'dirsizes' {* where size < 3.14 }", "1time2")
  run_test_case("inside 'dirsizes' {* where size <= 3.14 }", "1time2")
  run_test_case("inside 'dirsizes' {* where size <= 2 }", "1time2")
  run_test_case("inside 'dirsizes' {* where size <= 5 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where size <= 4 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where size <= 1.99 }", NOTHING)
  run_test_case("inside 'dirsizes' {* where size > 5 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where size > 4 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where size > 12 order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes' {* where size >= 12 order by name desc }", lines("6times3","6times2","20.txt"))
  run_test_case("inside 'dirsizes' {* where size >= 4 order by name desc }", lines("6times3","6times2","6times1","20.txt", "1time4"))
  run_test_case("inside 'dirsizes' {* where size >= 4.456 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where size >= 18 order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes' {directories order by countInside(files) desc {countInside(files)}}", lines("6","6","6","1","1"))
  run_test_case("inside 'dirsizes' {* where 20 = size }", "20.txt")
  run_test_case("inside 'dirsizes' {* where 18 = size }", "6times3")
  run_test_case("inside 'dirsizes' {* where 12 = size }", "6times2")
  run_test_case("inside 'dirsizes' {* where 4 == size }", "1time4")
  run_test_case("inside 'dirsizes' {* where 5 = size }", NOTHING)
  run_test_case("inside 'dirsizes' {* where 4 = size and false}", NOTHING)
  run_test_case("inside 'dirsizes' {* where 12 = size and size = 18}", NOTHING)
  run_test_case("inside 'dirsizes' {* where 18 != size order by name desc}", lines("6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where 12 != size order by name desc}", lines("6times3", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where 5 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where 1 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where -234 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where 23423 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes' {* where 5 > size order by name desc }", lines("1time4","1time2"))
  run_test_case("inside 'dirsizes' {* where 5 > size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where 4 > size order by name desc }", "1time2")
  run_test_case("inside 'dirsizes' {* where 3.23 > size }", "1time2")
  run_test_case("inside 'dirsizes' {* where 3.12 >= size }", "1time2")
  run_test_case("inside 'dirsizes' {* where 2 >= size }", "1time2")
  run_test_case("inside 'dirsizes' {* where 5 >= size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where 4 >= size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes' {* where 1.99 >= size }", NOTHING)
  run_test_case("inside 'dirsizes' {* where 5 < size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where 4 < size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where 12 < size order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes' {* where 12 <= size order by name desc }", lines("6times3","6times2","20.txt"))
  run_test_case("inside 'dirsizes' {* where 4 <= size order by name desc }", lines("6times3","6times2","6times1","20.txt", "1time4"))
  run_test_case("inside 'dirsizes' {* where 4.234 <= size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes' {* where 18 <= size order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes2' {* order by fullname asc {fullname  + size }}", lines("1time22", "1time44", "20.txt20", "6times16", "6times212", "6times318"))
  run_test_case("inside 'dirsizes2' {* order by size desc {size }}", lines("20", "18", "12", "6", "4", "2"))
  run_test_case("inside 'dirsizes2' {* order by size asc {size }}", lines("2", "4", "6", "12", "18", "20"))
  run_test_case("inside 'dirsizes2' {* order by size asc {name }}", lines("1time2", "1time4", "6times1", "6times2", "6times3", "20"))
  run_test_case("inside 'dirsizes2' {* where size = 20}", "20.txt")
  run_test_case("inside 'dirsizes2' {* where size = 18}", "6times3")
  run_test_case("inside 'dirsizes2' {* where size = 12}", "6times2")
  run_test_case("inside 'dirsizes2' {* where size == 4}", "1time4")
  run_test_case("inside 'dirsizes2' {* where size = 5}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where size = 4 and false}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where size = 12 and size = 18}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where size != 18 order by name desc}", lines("6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size != 12 order by name desc}", lines("6times3", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size != 5 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size != 1 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size != -235 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size != 23435 order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where size < 5 order by name desc }", lines("1time4","1time2"))
  run_test_case("inside 'dirsizes2' {* where size < 5 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where size < 4 order by name desc }", "1time2")
  run_test_case("inside 'dirsizes2' {* where size < 3.14 }", "1time2")
  run_test_case("inside 'dirsizes2' {* where size <= 3.14 }", "1time2")
  run_test_case("inside 'dirsizes2' {* where size <= 2 }", "1time2")
  run_test_case("inside 'dirsizes2' {* where size <= 5 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where size <= 4 order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where size <= 1.99 }", NOTHING)
  run_test_case("inside 'dirsizes2' {* where size > 5 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size > 4 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size > 12 order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size >= 12 order by name desc }", lines("6times3","6times2","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size >= 4 order by name desc }", lines("6times3","6times2","6times1","20.txt", "1time4"))
  run_test_case("inside 'dirsizes2' {* where size >= 4.456 order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size >= 18 order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes2' {* where size >= 183 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by countInside(files) desc {countInside(files)}}", lines("6","4","2","1","0"))
  run_test_case("inside 'dirsizes2' {directories order by countInside(directories) desc {countInside(directories)}}", lines("3","2","2","1","1"))
  run_test_case("inside 'dirsizes2' {directories order by countInside(*) desc {countInside(*)}}", lines("7","6","4","4","1"))
  run_test_case("inside 'dirsizes2' {* where size >= 183 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc {countInside(**)}}", lines("5", "5", "9", "10", "11"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = 5 }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = 9 }", "6times1")
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = 9.012 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = -2 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = 1231 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) = 4 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 5 }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 9 }", lines("1time2", "1time4", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 11 }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 13 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 1323 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != -2 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 0 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) != 1 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= -674 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < -4 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 1 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 5 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 1 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= -5 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 5.002 }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 5.002 }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 5 }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 10 }", lines("1time2", "1time4", "6times1"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 10 }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 10.4 }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 10.4 }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) <= 104 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) < 104 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 104 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 104 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 11 }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 11 }", "6times3")
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 9 }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 9.4 }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > =9.4 }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 9 }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 5 }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 5.004 }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 5 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 1 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 1 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= 0 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > 0 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) >= -20 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where countInside(**) > -20 }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {* where 20 = size}", "20.txt")
  run_test_case("inside 'dirsizes2' {* where 18 = size}", "6times3")
  run_test_case("inside 'dirsizes2' {* where 12 = size}", "6times2")
  run_test_case("inside 'dirsizes2' {* where 4 == size}", "1time4")
  run_test_case("inside 'dirsizes2' {* where 5 = size}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where 4 = size and false}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where 12 != size and 18 = -size}", NOTHING)
  run_test_case("inside 'dirsizes2' {* where 18 != size order by name desc}", lines("6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where 12 != size order by name desc}", lines("6times3", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where 5 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where 1 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where -235 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where 23456 != size order by name desc}", lines("6times3","6times2", "6times1", "20.txt", "1time4", "1time2"))
  run_test_case("inside 'dirsizes2' {* where 5 > size order by name desc }", lines("1time4","1time2"))
  run_test_case("inside 'dirsizes2' {* where 5 > size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where 4 > size order by name desc }", "1time2")
  run_test_case("inside 'dirsizes2' {* where 3.14 > size }", "1time2")
  run_test_case("inside 'dirsizes2' {* where 3.14 >= size }", "1time2")
  run_test_case("inside 'dirsizes2' {* where 2 >= size }", "1time2")
  run_test_case("inside 'dirsizes2' {* where 5 >= size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where 4 >= size order by size asc }", lines("1time2","1time4"))
  run_test_case("inside 'dirsizes2' {* where 1.99 >= size }", NOTHING)
  run_test_case("inside 'dirsizes2' {* where 5 < size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 4 < size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 12 < size order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 12 <= size order by name desc }", lines("6times3","6times2","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 4 <= size order by name desc }", lines("6times3","6times2","6times1","20.txt", "1time4"))
  run_test_case("inside 'dirsizes2' {* where 4.456 <= size order by name desc }", lines("6times3","6times2","6times1","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 18 <= size order by name desc }", lines("6times3","20.txt"))
  run_test_case("inside 'dirsizes2' {* where 183 <= size }", NOTHING)
  run_test_case("inside 'dirsizes2' {* where 183 <= size }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 = countInside(**) }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9 = countInside(**) }", "6times1")
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9.012 = countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where -2 == countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1231 = countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 4 = countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 != countInside(**) }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9 != countInside(**) }", lines("1time2", "1time4", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 11 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 13 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1323 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where -2 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 0 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1 != countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where -654 >= countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where -4 > countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1 > countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 > countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1 >= countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 3 >= countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5.045 > countInside(**) }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5.002 >= countInside(**) }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 >= countInside(**) }", lines("1time2", "1time4"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 10 > countInside(**) }", lines("1time2", "1time4", "6times1"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 10 >= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 10.4 > countInside(**) }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 10.4 >= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 104 >= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 104 > countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 104 < countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 104 <=countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 11 < countInside(**) }", NOTHING)
  run_test_case("inside 'dirsizes2' {directories order by name asc where 11 <= countInside(**) }", "6times3")
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9 < countInside(**) }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9.4 < countInside(**) }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9.4 <= countInside(**) }", lines("6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 9 <= countInside(**) }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 < countInside(**) }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5.004 <= countInside(**) }", lines("6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 5 <= countInside(**)}", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1 <= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 1 < countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 0 <= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where 0 < countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where -2 <= countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))
  run_test_case("inside 'dirsizes2' {directories order by name asc where -20 < countInside(**) }", lines("1time2", "1time4", "6times1", "6times2", "6times3"))

  expect_syntax_error("asdasd = 9; print asdasd")
  expect_syntax_error("print first()")
  expect_syntax_error("print first(2,3,4)")
  expect_syntax_error("print last()")
  expect_syntax_error("print first(2,'fgh')")
  expect_syntax_error("print first(56)")
  expect_syntax_error("print first(21 april 2007)")
  expect_syntax_error("print last(56*4)")
  expect_syntax_error("print last('thi')")
  expect_syntax_error("print any()")
  expect_syntax_error("a = 2,'aa',4; print contains(a, 'aA', 17)")
  expect_syntax_error("a = 2,'aa',4; print contains(a)")
  expect_syntax_error("print contains()")
  expect_syntax_error("print startswith()")
  expect_syntax_error("print startswith(2)")
  expect_syntax_error("print startswith(2,3,4)")
  expect_syntax_error("print endsWith()")
  expect_syntax_error("print endswith(2)")
  expect_syntax_error("print ENDSWITH(2,3,4)")
  expect_syntax_error("print ENDSWITHs(2,'3')")
  expect_syntax_error("print absolute('aa44 ')")
  expect_syntax_error("print absolute()")
  expect_syntax_error("print absolute(5 april)")
  expect_syntax_error("print ceil(3,6 ,8)")
  expect_syntax_error("print ceil('5')")
  expect_syntax_error("print ceil(3, 5.3)")
  expect_syntax_error("print ceil(april 1996)")
  expect_syntax_error("print ceil()")
  expect_syntax_error("print count()")
  expect_syntax_error("print floor(3,6 ,8)")
  expect_syntax_error("print floor(3, 5.3)")
  expect_syntax_error("print floor(april 1996)")
  expect_syntax_error("print floor()")
  expect_syntax_error("print length()")
  expect_syntax_error("print length(5, 8)")
  expect_syntax_error("a = 2,4,5,6; print length(a)")
  expect_syntax_error("print number()")
  expect_syntax_error("print number('a', 8)")
  expect_syntax_error("print number(2,4,5,6)")
  expect_syntax_error("print power()")
  expect_syntax_error("print power(2)")
  expect_syntax_error("print power(2,4,5)")
  expect_syntax_error("print power(2,'4')")
  expect_syntax_error("print round()")
  expect_syntax_error("print round('2')")
  expect_syntax_error("print round(2,3)")
  expect_syntax_error("print sign()")
  expect_syntax_error("print sign(4 years)")
  expect_syntax_error("print sign(5, 8.3)")
  expect_syntax_error("print sqrt()")
  expect_syntax_error("print sqrt(2, 5)")
  expect_syntax_error("print sqrt(april 2005)")
  expect_syntax_error("print truncate()")
  expect_syntax_error("print truncate('truncate')")
  expect_syntax_error("print truncate(3, 2*9)")
  expect_syntax_error("print average()")
  expect_syntax_error("print average('t')")
  expect_syntax_error("print average(3,2,4,'g')")
  expect_syntax_error("print average(7 days, 8 april 1999)")
  expect_syntax_error("print christmas()")
  expect_syntax_error("print christmas('gh')")
  expect_syntax_error("print christmas(now)")
  expect_syntax_error("print christmas(2 days)")
  expect_syntax_error("print easter()")
  expect_syntax_error("print easter('gh')")
  expect_syntax_error("print easter(now)")
  expect_syntax_error("print easter(2 days)")
  expect_syntax_error("print date()")
  expect_syntax_error("print date(2, 6)")
  expect_syntax_error("print date(5,3,2010,7)")
  expect_syntax_error("print date(5,'thy',2010)")
  expect_syntax_error("print date(5 years,2,2011)")
  expect_syntax_error("print date(0,12,3 seconds)")
  expect_syntax_error("print date(5,55,'2012')")
  expect_syntax_error("print newyear()")
  expect_syntax_error("print newyear('fgh')")
  expect_syntax_error("print newyear(3, 7)")
  expect_syntax_error("print newyear(3 years)")
  expect_syntax_error("print time(3)")
  expect_syntax_error("print time(3, 7,7,6,5,4,4)")
  expect_syntax_error("print time(3, 7,7,6,5,4,4, 5)")
  expect_syntax_error("print time(3, 7,7,'ab',5,4)")
  expect_syntax_error("print time(5 days, 0,2010,0,5)")
  expect_syntax_error("print time(3, 3,3 april 2010,0,58)")
  expect_syntax_error("print time(33, 100 years,2010,0,0)")
  expect_syntax_error("print time(25, 4, 2045,0)")
  expect_syntax_error("print time(25, 4, 2045,0, '4')")
  expect_syntax_error("print time(25, 4, 2045,0, 4,4,2,1,1)")
  expect_syntax_error("print after()")
  expect_syntax_error("print after('f')")
  expect_syntax_error("print after('f', 'g', 'h')")
  expect_syntax_error("print after(files)")
  expect_syntax_error("print after(files, 'gh')")
  expect_syntax_error("print after((2,3,4), 'gh')")
  expect_syntax_error("print afterDigits()")
  expect_syntax_error("print afterDigits('123a') / afterDigits(23)")
  expect_syntax_error("print afterDigits('abce', 'a')")
  expect_syntax_error("print afterDigits(4,5,3)")
  expect_syntax_error("print afterLetters()")
  expect_syntax_error("print afterLetters(directories)")
  expect_syntax_error("print afterLetters('45k8', 5)")
  expect_syntax_error("print afterLetters('a', 'b', 'v')")
  expect_syntax_error("print before()")
  expect_syntax_error("print before('sdf')")
  expect_syntax_error("print before('sdf', 'hjghj', '56')")
  expect_syntax_error("print before(**)")
  expect_syntax_error("print before('fgh', '*.txt')")
  expect_syntax_error("print beforeDigits()")
  expect_syntax_error("print beforeDigits(recursiveDirectories)")
  expect_syntax_error("print beforeDigits('abce', 'a')")
  expect_syntax_error("print beforeDigits(4,5,3)")
  expect_syntax_error("print beforeDigits(5, files where empty)")
  expect_syntax_error("print beforeLetters()")
  expect_syntax_error("print beforeLetters(files)")
  expect_syntax_error("print beforeLetters('fdg', 'dfg')")
  expect_syntax_error("print beforeLetters(4 days, 5 days, 1 day)")
  expect_syntax_error("print binary()")
  expect_syntax_error("print binary(files)")
  expect_syntax_error("print binary(4 years)")
  expect_syntax_error("print binary(4, 5)")
  expect_syntax_error("print binary(4, 5,7)")
  expect_syntax_error("print binary(now)")
  expect_syntax_error("print binary('56')")
  expect_syntax_error("print capitalize()")
  expect_syntax_error("print capitalize(files)")
  expect_syntax_error("print capitalize(4, 5)")
  expect_syntax_error("print capitalize('sdf', 'dfg', 'jk')")
  expect_syntax_error("print concatenate()")
  expect_syntax_error("print concatenate(2 3 2)")
  expect_syntax_error("print digits()")
  expect_syntax_error("print digits(files)")
  expect_syntax_error("print digits('gh', 'pol')")
  expect_syntax_error("print digits(3,2,1,3,2)")
  expect_syntax_error("print fill()")
  expect_syntax_error("print fill('a')")
  expect_syntax_error("print fill(4)")
  expect_syntax_error("print fill(4)")
  expect_syntax_error("print fill('a', 'b')")
  expect_syntax_error("print fill(5, 'b')")
  expect_syntax_error("print fill(5, 2,1)")
  expect_syntax_error("print fill(5, 2,1,67)")
  expect_syntax_error("print hex()")
  expect_syntax_error("print hex(12,45)")
  expect_syntax_error("print hex(12,45,5)")
  expect_syntax_error("print hex('sd')")
  expect_syntax_error("print hex('2')")
  expect_syntax_error("print hex(6 weeks)")
  expect_syntax_error("print hex(2 february 2021)")
  expect_syntax_error("print hex(files where extension != 'txt')")
  expect_syntax_error("print join()")
  expect_syntax_error("print join(files)")
  expect_syntax_error("print join((2,3,4),(2,3,4) )")
  expect_syntax_error("print join((2,3,4), directories )")
  expect_syntax_error("print join((2,3,4), 6, 8 )")
  expect_syntax_error("print left()")
  expect_syntax_error("print left('df')")
  expect_syntax_error("print left('df', 'ho')")
  expect_syntax_error("print left(2, 'ho')")
  expect_syntax_error("print left(files, 2)")
  expect_syntax_error("print left('df', 2, 4)")
  expect_syntax_error("print left('df', 2 days)")
  expect_syntax_error("print letters()")
  expect_syntax_error("print letters(45, 1)")
  expect_syntax_error("print letters(files)")
  expect_syntax_error("print letters('fg','54h', 'pol')")
  expect_syntax_error("print lower()")
  expect_syntax_error("print lower(435, 11)")
  expect_syntax_error("print lower(*)")
  expect_syntax_error("print lower('fg','54h')")
  expect_syntax_error("print monthname()")
  expect_syntax_error("print monthname(3 days)")
  expect_syntax_error("print monthname('april')")
  expect_syntax_error("print monthname(files)")
  expect_syntax_error("print monthname(3, 4)")
  expect_syntax_error("print path()")
  expect_syntax_error("print path(recursiveDirectories)")
  expect_syntax_error("print path('this', files)")
  expect_syntax_error("print repeat()")
  expect_syntax_error("print repeat('sd')")
  expect_syntax_error("print repeat('sd', 'ui')")
  expect_syntax_error("print repeat('sd', 2, 2)")
  expect_syntax_error("print repeat(files, 2)")
  expect_syntax_error("print repeat(2, files)")
  expect_syntax_error("print replace()")
  expect_syntax_error("print replace('a')")
  expect_syntax_error("print replace('a', 'b')")
  expect_syntax_error("print replace('a', files)")
  expect_syntax_error("print replace('a', 'b', 'c', 'd')")
  expect_syntax_error("print replace('a', 'b', 'c', 'd', 'e')")
  expect_syntax_error("print replace('a', 'b', files)")
  expect_syntax_error("print replace(directories, 'b', 'c')")
  expect_syntax_error("print replace('a', *, 'c')")
  expect_syntax_error("print reverse()")
  expect_syntax_error("print reverse(3, 2)")
  expect_syntax_error("print reverse(directories)")
  expect_syntax_error("print right()")
  expect_syntax_error("print right('df')")
  expect_syntax_error("print right('df', 'ho')")
  expect_syntax_error("print right(2, 'ho')")
  expect_syntax_error("print right(files, 2)")
  expect_syntax_error("print right('df', 2, 4)")
  expect_syntax_error("print right('df', 2 days)")
  expect_syntax_error("print roman()")
  expect_syntax_error("print roman('tj')")
  expect_syntax_error("print roman(4 years)")
  expect_syntax_error("print roman(4, 2)")
  expect_syntax_error("print roman(4, 2, 8, 22)")
  expect_syntax_error("print roman(directories)")
  expect_syntax_error("print string()")
  expect_syntax_error("print string(files)")
  expect_syntax_error("print string(4 days, 1 year)")
  expect_syntax_error("print string(2,3,5)")
  expect_syntax_error("print string((2,3,5))")
  expect_syntax_error("print substring()")
  expect_syntax_error("print substring('sd')")
  expect_syntax_error("print substring('sd', 'hgh')")
  expect_syntax_error("print substring('sd', 'hgh', 'hj')")
  expect_syntax_error("print substring(2, 'hgh', 'hj')")
  expect_syntax_error("print substring(2, 'hgh', files)")
  expect_syntax_error("print substring(6 days, 2, 'hgh', files)")
  expect_syntax_error("print substring(2, directories where hidden, 67)")
  expect_syntax_error("print substring(files, '12', 67)")
  expect_syntax_error("print substring('gh', '12', 67, 5)")
  expect_syntax_error("print substring('gh', '12', 67, 5,8, 3)")
  expect_syntax_error("print trim()")
  expect_syntax_error("print trim(files limit 6)")
  expect_syntax_error("print trim(5,2)")
  expect_syntax_error("print upper()")
  expect_syntax_error("print upper(435, 11)")
  expect_syntax_error("print upper((435, 11))")
  expect_syntax_error("print upper(*)")
  expect_syntax_error("print upper('fg','54h')")
  expect_syntax_error("print weekDayName()")
  expect_syntax_error("print weekDayName('gh')")
  expect_syntax_error("print weekDayName(files)")
  expect_syntax_error("print weekDayName(2, 6)")
  expect_syntax_error("print weekDayName(now, today)")
  expect_syntax_error("print characters()")
  expect_syntax_error("print characters(2,4)")
  expect_syntax_error("print characters(('a', 'b'))")
  expect_syntax_error("print characters(files)")
  expect_syntax_error("print numbers()")
  expect_syntax_error("print numbers(2,4)")
  expect_syntax_error("print numbers(('a', 'b'))")
  expect_syntax_error("print numbers(files)")
  expect_syntax_error("print split()")
  expect_syntax_error("print split('a')")
  expect_syntax_error("print split('a', 'ho', 'kl')")
  expect_syntax_error("print split('a', files)")
  expect_syntax_error("print split(directories, 'kl')")
  expect_syntax_error("print words()")
  expect_syntax_error("print words(2,4)")
  expect_syntax_error("print words(('a', 'b'))")
  expect_syntax_error("print words(directories)")
  expect_syntax_error("print shiftmonth()")
  expect_syntax_error("print shiftweekday()")
  expect_syntax_error("print shiftmonth(now)")
  expect_syntax_error("print shiftweekday(now)")
  expect_syntax_error("print shiftmonth(now, 'hjk' )")
  expect_syntax_error("print shiftweekday(now, 'hjk')")
  expect_syntax_error("print shiftmonth(now, 1, 4)")
  expect_syntax_error("print shiftweekday(now, 3, 2)")
  expect_syntax_error("print shiftmonth(now, 4 years)")
  expect_syntax_error("print shiftweekday(now, 2 months)")
  expect_syntax_error("print isnan()")
  expect_syntax_error("print isnan('3')")
  expect_syntax_error("print isnan(files)")
  expect_syntax_error("print isnan(4 days)")
  expect_syntax_error("print isnan(2, 5)")
  expect_syntax_error("print isnan(today)")
  expect_syntax_error("print isnever()")
  expect_syntax_error("print isnever(true)")
  expect_syntax_error("print isnever(23)")
  expect_syntax_error("print isnever(-23.5)")
  expect_syntax_error("print isnever(7 years)")
  expect_syntax_error("print isnever((7,4))")
  expect_syntax_error("print isnever(*)")
  expect_syntax_error("print isnever(never, never)")
  expect_syntax_error("print clock()")
  expect_syntax_error("print clock(3)")
  expect_syntax_error("print clock(3,4,3,2)")
  expect_syntax_error("print clock(4, now)")
  expect_syntax_error("print clock('sdf', 'gh')")
  expect_syntax_error("print clock(4, files)")
  expect_syntax_error("print clock(*, 7, 8)")
  expect_syntax_error("print raw() ")
  expect_syntax_error("print raw('ghj', 'ghj') ")
  expect_syntax_error("print raw(files) ")
  expect_syntax_error("print resemblance() ")
  expect_syntax_error("print resemblance('hgj') ")
  expect_syntax_error("print resemblance('hgj', 'jkl', 'hjk') ")
  expect_syntax_error("print resemblance('hgj', files) ")
  expect_syntax_error("print resemblance(*, 'files') ")
  expect_syntax_error("print resemblance('56', (2,4)) ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u skip")
  expect_syntax_error("u = 6,1,2,4,3,5; print u limit")
  expect_syntax_error("u = 6,1,2,4,3,5; print u where")
  expect_syntax_error("u = 6,1,2,4,3,5; print u order")
  expect_syntax_error("u = 6,1,2,4,3,5; print u final")
  expect_syntax_error("u = 6,1,2,4,3,5; print u final files")
  expect_syntax_error("u = 6,1,2,4,3,5; print u skip 'g' ")
  expect_syntax_error("u = 6,1,2,'4',3,5; print u skip 'g' ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u final 'f' ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u where true limit 'g' ")
  expect_syntax_error("u = 6,1,2,'4',3,5; print u limit 3 every 'g' ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u final name != 'g' ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u where 3 days ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u skip 4 where 18 ")
  expect_syntax_error("u = 6,1,2,4,3,5; print u limit order")
  expect_syntax_error("u = 6,1,2,4,3,5; print u where true final '12' ")
  expect_syntax_error("a = 5; b = '3'; print a * b")
  expect_syntax_error("a = 5; print a[0]")
  expect_syntax_error("a = 5,2; print a 0]")
  expect_syntax_error("a = 5,2; print a [0]]")
  expect_syntax_error("3 times { print } ; print index  ")
  expect_syntax_error("  'ha' { this 3 times { print this } this }  ")
  expect_syntax_error("3 times { h = 5 } print h  ")
  expect_syntax_error("while false { h = 5 } print h  ")
  expect_syntax_error("4.88 times { if index != 2  }   ")
  expect_syntax_error("4.88 times { if index {print index * 10} } ")
  expect_syntax_error("4.88 times { if {print index * 10} } ")
  expect_syntax_error("4.88 times { while {print index * 10} } ")
  expect_syntax_error("k = 'abcde'; k[] = '89'; k  ")
  expect_syntax_error("k = 'abcde'; k[k] = 'hj'; k  ")
  expect_syntax_error("k = 'abcde'; k[3 years] = '3'; k  ")
  expect_syntax_error("k = 'abcde'; k[3, 4] = '2'; k  ")
  expect_syntax_error("i = 'jut'; i -= 't'; i")
  expect_syntax_error("i = 'jut'; i++; i")
  expect_syntax_error("i = 'jut'; i-- ;i")
  expect_syntax_error("i = 'jut'; i *= 2; i")
  expect_syntax_error("i = 'jut'; i /= 2; i")
  expect_syntax_error("i = 'jut'; i -= 2; i")
  expect_syntax_error("i = 'jut'; i %= 2; i")
  expect_syntax_error("k = 'abcde'; k[2] += 89; k  ")
  expect_syntax_error("k = 'abcde'; k[2] --; k  ")
  expect_syntax_error("b = false; b = false not or b; b")
  expect_syntax_error("b = false; b = false not; b")
  expect_syntax_error("b = false; b = 3; b")
  expect_syntax_error("b = false; b = 3,4,7; b")
  expect_syntax_error("b = false; b = 8 years; b")
  expect_syntax_error("b = false; b = 8 april 2014; b")
  expect_syntax_error("b = false; b = january 2010, 8 april 2014; b")
  expect_syntax_error("b = false; b = 'ba'; b")
  expect_syntax_error("b = false; b = 'ba', 'lo'; b")
  expect_syntax_error("b = false; b = files; b")
  expect_syntax_error("b = false; b++")
  expect_syntax_error("b = false; b /= 45")
  expect_syntax_error("b = false; b *= 1")
  expect_syntax_error("b = false; b &= true")
  expect_syntax_error("b = false; b %= false")
  expect_syntax_error("b = false; b--")
  expect_syntax_error("if true { 43 ; 2; if} else { 3} 5 ")
  expect_syntax_error("3 times {if true {3;2} 1} else {3}")
  expect_syntax_error("3 times {if true {3;2} 4; else {} 1}")
  expect_syntax_error(" 'ta', 'ha', 'na' {if true {3;this} else {else {4}} this }")
  expect_syntax_error("if true {if false {else if true {67}} else {2}1} else {if true {3} else {5}}")
  expect_syntax_error("else {7}")
  expect_syntax_error("else if true {7}")
  expect_syntax_error("if { 7 }")
  expect_syntax_error("if true { 7")
  expect_syntax_error("if true 7")
  expect_syntax_error("if true 7 } ")
  expect_syntax_error("if 1 { 6} ")
  expect_syntax_error("if true or false { 6} else true { 4}")
  expect_syntax_error("if true or false { 6} 4; else { 4}")
  expect_syntax_error("if true { 6} else {} else if true { 4}")
  expect_syntax_error("3 times { if true or false { 6} 4; else { 4} }")
  expect_syntax_error("3 times { if true {1} } else {4}")
  expect_syntax_error("'a', 'b' { 9 } else {4}")
  expect_syntax_error("if true or false { 6} else else else { 4}")
  expect_syntax_error("if true or false { 6} else if { 4}")
  expect_syntax_error("if true or false { 6} else if 0 { 4}")
  expect_syntax_error("3,4,5 { if true {4}} else if true {43} ")
  expect_syntax_error("3,4,5 { 'hello' } else  {'world'} ")
  expect_syntax_error("if true {else {34}} ")
  expect_syntax_error("if true {else if true {34}} ")
  expect_syntax_error("if true {3} else 2 ")
  expect_syntax_error("if true {3} else ")
  expect_syntax_error("s = 'hello'; s = 3,2; s")
  expect_syntax_error("s = 'hello'; s = 'hello', 'world'; s")
  expect_syntax_error("s = 'hello'; s = files; s")
  expect_syntax_error("s = 'hello'; s[2] = files; s")
  expect_syntax_error("s = 'hello'; s[2] = 4,3; s")
  expect_syntax_error("s = 'hello'; s[2] = ; s")
  expect_syntax_error("s = 'hello'; s[4 years] = 'a'; s")
  expect_syntax_error("s = 'hello'; s['2'] = 4; s")
  expect_syntax_error("s = 'hello'; s--; s")
  expect_syntax_error("s = 'hello'; s++; s")
  expect_syntax_error("s = 'hello'; s-= 'he'; s")
  expect_syntax_error("s = 'hello'; s*= 2; s")
  expect_syntax_error("s = 'hello'; s /= 2; s")
  expect_syntax_error("s = 'hello'; s %= 2; s")
  expect_syntax_error("n = 2,3,4; n[0] = 5; print n")
  expect_syntax_error("n = 2,3,4; n[0] += 5; print n")
  expect_syntax_error("n = 2,3,4; n += 5; print n")
  expect_syntax_error("n = 2,3,4; n /= 5; print n")
  expect_syntax_error("n = 2,3,4; n *= 5; print n")
  expect_syntax_error("n = 2,3,4; n %= 5; print n")
  expect_syntax_error("n = 2,3,4; n++; print n")
  expect_syntax_error("n = 2,3,4; n--; print n")
  expect_syntax_error("li = 'b', 'c', 'd'; li[0] = 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li[0] += 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li += 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li /= 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li *= 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li %= 5; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li++; print li")
  expect_syntax_error("li = 'b', 'c', 'd'; li--; print li")
  expect_syntax_error("x = 17; true : x ? ")
  expect_syntax_error("x = 17; true ? x : ")
  expect_syntax_error("x = 17; true ? : 16")
  expect_syntax_error("x = 17; ? x : 16")
  expect_syntax_error("x = 17; ? x : ")
  expect_syntax_error("x = 17; true ? ")
  expect_syntax_error("x = 17; ? x")
  expect_syntax_error("x = 17; ? ")
  expect_syntax_error("x = 17; : ? ")
  expect_syntax_error("x = 17; true ? x : true : true ? 20 : 3")
  expect_syntax_error("x = 17; ? x : true ? 6 : true ? 20 : 3")
  expect_syntax_error("x = 17; x : true ? 6 : true ? 20 : 3")
  expect_syntax_error("x = 17; true ? x : ? 6 : true ? 20 : 3")
  expect_syntax_error("x = 17; true ? x : true ? 6 : true ?  : 3")
  expect_syntax_error("x = 17; true ? x : true ? :  ? 20 : 3")
  expect_syntax_error("x = 17; true ? x : true ? 6 : true ? 20 : ")
  expect_syntax_error("x = 17; true : true ? 6 : true ? 20 : 3")
  expect_syntax_error("x = 17; true : x ? true ? 5")
  expect_syntax_error("x = 17; ? x : true ? 5")
  expect_syntax_error("x = 17; true : true ? 5")
  expect_syntax_error("x = 17; true ? x : true ?")
  expect_syntax_error("x = 17; true ? : true ? 5")
  expect_syntax_error("x = 17; true ? x : ? 5")
  expect_syntax_error("x = 17; true ? x : true ?:? 5")
  expect_syntax_error("4, (6, 8, 5, 2+6) where false + 7 ")
  expect_syntax_error("a = 5; break")
  expect_syntax_error("a = 5; continue")
  expect_syntax_error("3 times { 6 +3}; break")
  expect_syntax_error("3 times { 6 +3}; continue")
  expect_syntax_error("files { print}; break")
  expect_syntax_error("files { print}; continue")
  expect_syntax_error("break; 3,5 { break }")
  expect_syntax_error("continue { 'hello world' }")
  expect_syntax_error(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {break}  } } this ")
  expect_syntax_error(" 2 april 2010, 21 june 2012, 21 july 2006, newYear(2005) { this.year - this.day } this.day ")
  expect_syntax_error("a = 0.4; while a < 3 { this; a++; }  ")
  expect_syntax_error("print 3K0000")
  expect_syntax_error("print 2K20.0")
  expect_syntax_error("print 2.k21")
  expect_syntax_error("print 2kk213")
  expect_syntax_error("print 25k213.")
  expect_syntax_error("print .25k3")
  expect_syntax_error("print 6625k3888")
  expect_syntax_error("print 6625k321090")
  expect_syntax_error("print 996625K210990")
  expect_syntax_error("print 9625.K210")
  expect_syntax_error("print 962.5K210")
  expect_syntax_error("print 962.5K21.0")
  expect_syntax_error("print 9625K21.0")
  expect_syntax_error("inside 'defchain' { 7*+4}")
  expect_syntax_error("inside 'defchain' { *+ }")
  expect_syntax_error("inside 'defchain' { *+* }")
  expect_syntax_error("inside 'defchain' { *** }")
  expect_syntax_error("inside 'defchain' { directories where anyInside() }")
  expect_syntax_error("inside 'defchain' { directories where anyInside('files') }")
  expect_syntax_error("inside 'defchain' { directories where anyInside(4 years) }")
  expect_syntax_error("inside 'defchain' { directories where existsInside() }")
  expect_syntax_error("inside 'defchain' { directories where existsInside(files) }")
  expect_syntax_error("inside 'defchain' { directories where existsInside(('h', 'h')) }")
  expect_syntax_error("inside 'defchain' { directories where existsInside() }")
  expect_syntax_error("stack inside 'ccc' { files }")
  expect_syntax_error("force inside 'ccc' { 4+2 }")
  expect_syntax_error("create")
  expect_syntax_error("create stack 4")
  expect_syntax_error("inside 'ccc' { createfile '0.js', '01.js' }")
  expect_syntax_error("inside 'ccc' { createdirectory '0.js', '01.js' }")
  expect_syntax_error("inside 'ccc' { createfile '*.js' }")
  expect_syntax_error("inside 'ccc' { createdirectory '*.js' }")
  expect_syntax_error("create 'gh' force")
  expect_syntax_error("create '*.gh' stack")
  expect_syntax_error("create force 'dur' ")
  expect_syntax_error("create  stack 'a.txt' ")
  expect_syntax_error("createfile")
  expect_syntax_error("createdirectory")
  expect_syntax_error("createfiles")
  expect_syntax_error("createdirectories")
  expect_syntax_error("inside 'ccc' { force createfile '0.js', '01.js' }")
  expect_syntax_error("inside 'ccc' { force createdirectory '0.js', '01.js' }")
  expect_syntax_error("force createfile")
  expect_syntax_error("force createdirectory")
  expect_syntax_error("force createfiles")
  expect_syntax_error("force createdirectories")
  expect_syntax_error("inside 'ccc' { stack createfile '0.js', '01.js' }")
  expect_syntax_error("inside 'ccc' { stack createdirectory '0.js', '01.js' }")
  expect_syntax_error("stack createfile")
  expect_syntax_error("stack createdirectory")
  expect_syntax_error("stack createfiles")
  expect_syntax_error("stack createdirectories")
  expect_syntax_error("inside 'ccc' {copy force } ")
  expect_syntax_error("inside 'ccc' {copy to } ")
  expect_syntax_error("inside 'ccc' {copy to 'fghfgh' as } ")
  expect_syntax_error("inside 'ccc' {move force } ")
  expect_syntax_error("inside 'ccc' {move to } ")
  expect_syntax_error("inside 'ccc' {move to 'fghfgh' as } ")
  expect_syntax_error("inside 'ccc' {move force 'a' to 'b' } ")
  expect_syntax_error("inside 'ccc' {move 'gfa' to directories } ")
  expect_syntax_error("stack select *")
  expect_syntax_error("select")
  expect_syntax_error("open")
  expect_syntax_error("with open 'notepad'")
  expect_syntax_error("force delete 'hjkhjkhj' ")
  expect_syntax_error("force drop 'hjkhjkhj' ")
  expect_syntax_error("stack delete 'hjkhjkhj' ")
  expect_syntax_error("stack drop 'hjkhjkhj' ")
  expect_syntax_error("delete")
  expect_syntax_error("drop")
  expect_syntax_error("force hide 'hjkhjkhj' ")
  expect_syntax_error("force unhide 'hjkhjkhj' ")
  expect_syntax_error("stack hide 'hjkhjkhj' ")
  expect_syntax_error("stack unhide 'hjkhjkhj' ")
  expect_syntax_error("hide")
  expect_syntax_error("unhide")
  expect_syntax_error("force lock 'hjkhjkhj' ")
  expect_syntax_error("force unlock 'hjkhjkhj' ")
  expect_syntax_error("stack lock 'hjkhjkhj' ")
  expect_syntax_error("stack unlock 'hjkhjkhj' ")
  expect_syntax_error("lock")
  expect_syntax_error("unlock")
  expect_syntax_error("recreate")
  expect_syntax_error("rechange")
  expect_syntax_error("reaccess")
  expect_syntax_error("remodify")
  expect_syntax_error("recreate 'a' to 'b' ")
  expect_syntax_error("rechange 'a' to 'b' ")
  expect_syntax_error("reaccess 'a' to 'b' ")
  expect_syntax_error("remodify 'a' to 'b' ")
  expect_syntax_error("recreate 'a' to ")
  expect_syntax_error("rechange 'a' to ")
  expect_syntax_error("reaccess 'a' to ")
  expect_syntax_error("remodify 'a' to ")
  expect_syntax_error("recreate to today ")
  expect_syntax_error("rechange to today ")
  expect_syntax_error("reaccess to today ")
  expect_syntax_error("remodify to today ")
  expect_syntax_error("stack recreate 'b' to 4 april 2021")
  expect_syntax_error("stack rechange 'b' to 4 april 2021")
  expect_syntax_error("stack reaccess 'b' to 4 april 2021")
  expect_syntax_error("stack remodify 'b' to 4 april 2021")
  expect_syntax_error("force recreate 'b' to 4 april 2021")
  expect_syntax_error("force rechange 'b' to 4 april 2021")
  expect_syntax_error("force reaccess 'b' to 4 april 2021")
  expect_syntax_error("force remodify 'b' to 4 april 2021")
  expect_syntax_error(":20")
  expect_syntax_error(":20:23")
  expect_syntax_error("20:")
  expect_syntax_error("120:3")
  expect_syntax_error("20:-5")
  expect_syntax_error("a = 4; a:a")
  expect_syntax_error("a = 4; a:a:a")
  expect_syntax_error("12:20:")
  expect_syntax_error("12:120:3")
  expect_syntax_error("12:20:-5")
  expect_syntax_error("a = 4; a:21:34")
  expect_syntax_error("a = 4; 12:a:2")
  expect_syntax_error("a = 4; 12:3:a")
  expect_syntax_error("print 'a' resembles ")
  expect_syntax_error("print resembles 'a' ")
  expect_syntax_error("print resembles")
  expect_syntax_error("print 'a' in ")
  expect_syntax_error("print in 'a' ")
  expect_syntax_error("print in")
  expect_syntax_error("print 'a' like ")
  expect_syntax_error("print like 'a' ")
  expect_syntax_error("print like")
  expect_syntax_error("print 'a' not resembles ")
  expect_syntax_error("print not resembles 'a' ")
  expect_syntax_error("print not resembles")
  expect_syntax_error("print 'a' not in ")
  expect_syntax_error("print not in 'a' ")
  expect_syntax_error("print not in")
  expect_syntax_error("print 'a' not like ")
  expect_syntax_error("print not like 'a' ")
  expect_syntax_error("print not like")
  expect_syntax_error("print 'a' resembles not")
  expect_syntax_error("print resembles not 'a' ")
  expect_syntax_error("print resembles not")
  expect_syntax_error("print 'a' in not ")
  expect_syntax_error("print in not 'a' ")
  expect_syntax_error("print in not")
  expect_syntax_error("print 'a' like not ")
  expect_syntax_error("print like not 'a' ")
  expect_syntax_error("print like not")
  expect_syntax_error("print 'a' resembles not 'b'")
  expect_syntax_error("print 'a' in not 'b' ")
  expect_syntax_error("print 'a' like not 'a%' ")
  expect_syntax_error("print 'a' resembles like 'b' ")
  expect_syntax_error("print 'a' in like 'b' ")
  expect_syntax_error("print 'a' like like 'b' ")
  expect_syntax_error("print 'a' resembles in 'b' ")
  expect_syntax_error("print 'a' in in 'b' ")
  expect_syntax_error("print 'a' like in 'b' ")
  expect_syntax_error("print 'a' resembles resembles 'b' ")
  expect_syntax_error("print 'a' in resembles 'b' ")
  expect_syntax_error("print 'a' like resembles 'b' ")
  expect_syntax_error("print 'a' not resembles like 'b' ")
  expect_syntax_error("print 'a' not in like 'b' ")
  expect_syntax_error("print 'a' not like like 'b' ")
  expect_syntax_error("print 'a' not resembles in 'b' ")
  expect_syntax_error("print 'a' not in in 'b' ")
  expect_syntax_error("print 'a' not like in 'b' ")
  expect_syntax_error("print 'a' not resembles resembles 'b' ")
  expect_syntax_error("print 'a' not in resembles 'b' ")
  expect_syntax_error("print 'a' not like resembles 'b' ")

  print ("BLACK-BOX TESTS END")
  print ("All tests have passed successfully if there is no error message above.")
  input("Press Enter to continue...")
