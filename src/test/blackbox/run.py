import subprocess
import os

EMPTY_STRING = ""
NOTHING = ""
NEW_LINE = "\n"
ENCODING = "utf-8"
SEPARATOR = os.path.sep
EXIT_CODE_OK = 0
EXIT_CODE_RUNTIME_ERROR = 1
EXIT_CODE_SYNTAX_ERROR = 2
EXIT_CODE_CMD_ERROR = 3

os.environ['PYTHONIOENCODING'] = ENCODING

def makeProcess(code):
  return subprocess.Popen(['uro', '-d', 'res', '-c', code], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

def runTestCase(code, expectedOutput):
  p = makeProcess(code)
  output = p.communicate()[0].decode(ENCODING)
  output = output.replace('\r\n', NEW_LINE).replace('\r', NEW_LINE)[:-1]
  if p.returncode != EXIT_CODE_OK:
    print("Test failed at running code: " + code)
    print("  Received exit code:" + NEW_LINE + str(p.returncode))
    print("  Received output:" + NEW_LINE + output)
    print("  Expected output:" + NEW_LINE + expectedOutput)
  elif output != expectedOutput:
    print("Test failed at running code: " + code)
    print("  Received output:" + NEW_LINE + output)
    print("  Expected output:" + NEW_LINE + expectedOutput)
    
def expectExitCode(code, exitCode, errorName):
  p = makeProcess(code)
  p.communicate()
  if p.returncode != exitCode:
    print("Test failed at expecting " + errorName + " from code: " + code)
    print("  Received exit code:" + NEW_LINE + str(p.returncode))

def expectSyntaxError(code):
  expectExitCode(code, EXIT_CODE_SYNTAX_ERROR, "syntax error")
    
def expectRuntimeError(code):
  expectExitCode(code, EXIT_CODE_RUNTIME_ERROR, "runtime error")

def lines(*args):
  return NEW_LINE.join(args)

def path(*args):
  return SEPARATOR.join(args)
  
  
if __name__ == '__main__':
  print ("BLACK-BOX TESTS START")
  
  runTestCase("print 'hello world'", "hello world")
  runTestCase(" 'hello world'   ", "hello world")
  runTestCase("print 'hello' + ' ' + 'worlds'", "hello worlds")
  runTestCase("print 'tą żółć'   ", "tą żółć")
  runTestCase("print 2 +2*2", "6")
  runTestCase("print 2 + '5' ", "25")
  runTestCase("print ((((3))+(((2)))*2)) ", "7")
  runTestCase("print (((((3))+(((2))))*2)) ", "10")
  runTestCase("a =2,32,1; print a[a[a[0]]] ", "32")
  runTestCase("a =2,34,4; print a[a[a[0]]-a[0]] ", "4")
  runTestCase("a =2,34,4; print a[((a[(a[0])]-a[0]))]", "4")
  runTestCase("print '2' + 75 ", "275")
  runTestCase("print '2' + 75 + 5 ", "280")
  runTestCase("print '2' + 75 days + 5 ", "275 days5")
  runTestCase("print '2' + 75 days + 2 days + 5 ", "277 days5")
  runTestCase("print '2' + 3 august 2010 + 2 ", "23 August 20102")
  runTestCase("print '2' + 3 august 2010 + 2 + 5 ", "23 August 20107")
  runTestCase("print '2' + 3 august 2010 + 2 days ", "25 August 2010")
  runTestCase("print '2' + 3 august 2010 + 2 days + 1 day ", "26 August 2010")
  runTestCase("print '2' + 3 august 2010 + 2 days + 1 day + 16 ", "26 August 201016")
  runTestCase("print 2, 5", lines("2", "5"))
  runTestCase("print 2, 2*25, 1", lines("2", "50", "1"))
  runTestCase("if true {   43} ", "43")
  runTestCase("if true {   43 } else {21 }", "43")
  runTestCase("if false {   43 } else if false{4} else {21 } ", "21")
  runTestCase("if false {   43 } else if false{} else {21 } ", "21")
  runTestCase("if false {   43 } else if true{5} else {21 } ", "5")
  runTestCase("if true and false {43 } else {  21}", "21")
  runTestCase("if false {   43} 5 ", "5")
  runTestCase("if true { 43 ; 2; 1} else { 3} 5 ", lines("43", "2", "1", "5"))
  runTestCase("3 times {if true {3;2} else {} 1}", lines("3", "2", "1", "3", "2", "1", "3", "2", "1"))
  runTestCase(" 'ta', 'ha', 'na' {if true {3;this} else {7} this }", lines("3", "ta", "ta", "3", "ha", "ha", "3", "na", "na"))
  runTestCase("if true {if false {4} else {2}1} else {if true {3} else {5}}", lines("2", "1"))
  runTestCase("a = 6; if false {if false {a--} else {a--}a+= 1500} else {if true {a+= 100} else {5}} a", "106")
  runTestCase("print true and true xor false", "1")
  runTestCase("print true and true xor not false", "0")
  runTestCase("print true or true xor true", "0")
  runTestCase("print not false and true xor false", "1")
  runTestCase("print not false or not true xor true", "0")
  runTestCase("print (2*4)+(6*8)", "56")
  runTestCase("print -((2*4)+(6*8))+156", "100")
  runTestCase("print 2*2+-3*3", "-5")
  runTestCase("print 2<3", "1")
  runTestCase("print 2 < 2 or 3 != 34", "1")
  runTestCase("print 2*2<3; 14 = 2*7", lines("0", "1"))
  runTestCase("print 2<=2; 2<2; 1>=3;10 > 16", lines("1", "0", "0", "0"))
  runTestCase("print 2+2 = 4", "1")
  runTestCase("print 2+2 = 4.00003", "0")
  runTestCase("print 2+2 = 3.5 + 0.5", "1")
  runTestCase("print 2+2 < 4 - 0.0", "0")
  runTestCase("print 2+2 = 4 - 0.0", "1")
  runTestCase("print 2+2 = 4 - 0.0", "1")
  runTestCase("print 2+2 < 4 - 0.0", "0")
  runTestCase("print 'abc' = 'abc' ", "1")
  runTestCase("print 'abc' = 'abd' ", "0")
  runTestCase("print 'abc' < 'abc' ", "0")
  runTestCase("print 'abc' <= 'abc' ", "1")
  runTestCase("print 'abc' < 'abd' ", "1")
  runTestCase("print 'abc' <= 'abd' ", "1")
  runTestCase("print 'abc' = 'ab' + 'c' ", "1")
  runTestCase("print 'abc' != 'abc' ", "0")
  runTestCase("print 'abc' != 'abd' ", "1")
  runTestCase("print 'Abc' != 'abc' ", "1")
  runTestCase("print 'Abc' = 'abc' ", "0")
  runTestCase("print 'a' = 'abc' ", "0")
  runTestCase("print 'a' != 'abc' ", "1")
  runTestCase("print 'a' > 'abc' ", "0")
  runTestCase("print 'a' >= 'abc' ", "0")
  runTestCase("print 'a' < 'abc' ", "1")
  runTestCase("print 'a' <= 'abc' ", "1")
  runTestCase("print (2, 3) = (2, 3)", "1")
  runTestCase("print (2, 3) = (3, 2)", "0")
  runTestCase("print (2, 3) <= (2, 3)", "1")
  runTestCase("print (3, 2) <= (2, 3)", "1")
  runTestCase("print (3, 2) <= (2, 3, 1)", "1")
  runTestCase("print (3, 2) < (2, 3, 1)", "1")
  runTestCase("print (3, 2) = (2, 3, 1)", "0")
  runTestCase("print (3, 2) != (2, 3, 1)", "1")
  runTestCase("print (3, 2) != (2, 3, 1)", "1")
  runTestCase("print (3, 2) >= (2, 3, 1)", "0")
  runTestCase("print (3, 2) > (2, 3, 1)", "0")
  runTestCase("print (1, 2, 3) > (2, 3, 1)", "0")
  runTestCase("print (1, 2, 3) >= (2, 3, 1)", "1")
  runTestCase("print (1, 2, 3) <= (2, 3, 1)", "1")
  runTestCase("print (1, 2, 3) != (2, 3, 1)", "1")
  runTestCase("print (1, 2, 3) = (1, 2, 3)", "1")
  runTestCase("print (1, 2, 3) = (1, 2, '3')", "1")
  runTestCase("print ('1', 2, 3) = (1, 2, '3')", "1")
  runTestCase("print (1, 2, 3) = (2, 3, 1)", "0")
  runTestCase("a = 5; print a", "5")
  runTestCase("a = 5; b = 3; print a", "5")
  runTestCase("a = 5; b = 3; print a * b", "15")
  runTestCase("a = 2,3,4; print a", lines("2", "3", "4"))
  runTestCase("a = 2,3,4; a { print index }", lines("0", "1", "2"))
  runTestCase("a = 2,3,4; print a, a", lines("2", "3", "4", "2", "3", "4"))
  runTestCase("a = 2,3,4; b = '4','123'; print a, 5, a", lines("2", "3", "4", "5","2", "3", "4"))
  runTestCase("a = 5; print a + 2", "7")
  runTestCase("a = '5'; print a + 2", "52")
  runTestCase("A = 5; a = 3; print A", "3")
  runTestCase("A = 5; a = true; print A", "1")
  runTestCase("a = true; a = a xor true; print a", "0")
  runTestCase("a = 'true'; a = 'tu'; print a", "tu")
  runTestCase("a = 'true'; a[1] = 't'; print a", "ttue")
  runTestCase("a = 'true'; a[1] = ''; print a", "tue")
  runTestCase("a = 'true'; a[1] = '234'; print a", "t234ue")
  runTestCase("a = 'true'; a += 'tu'; print a", "truetu")
  runTestCase("a = 1,2,3,4,5,6,7,8; print a limit 3", lines("1", "2", "3"))
  runTestCase("a = 1,2,3,4,5,6,7,8; print a skip 1 every 2 limit 3", lines("2", "4", "6"))
  runTestCase("a = 0,1,2,3,4,5,6,7,8; print a where this > 5", lines("6", "7", "8"))
  runTestCase("a = 3,4,5; print a where this != 4", lines("3", "5"))
  runTestCase("a = 3,4,5; print a where this = 4", "4")
  runTestCase("a = 5; b = a; print a; print b", lines("5", "5"))
  runTestCase("a = 3 DAys; print a", "3 days")
  runTestCase("a = 3 DAys; print a + a", "6 days")
  runTestCase("a = 3 DAys; print a - a", "no period")
  runTestCase("aa = 3 june 2010; print aa", "3 June 2010")
  runTestCase("a = 13; a++; print a", "14")
  runTestCase("a = 13; a--; print a", "12")
  runTestCase("a = -13; a++; print a", "-12")
  runTestCase("a = -13; a--; print a", "-14")
  runTestCase("a = 10.2; a++; print a", "11.2")
  runTestCase("a = 10.3; a--; print a", "9.3")
  runTestCase("a = -13.4; a++; print a", "-12.4")
  runTestCase("a = -108.24; a--; print a", "-109.24")
  runTestCase("a = 12 june 2004; a.day++; print a", "13 June 2004")
  runTestCase("a = 12 june 2004; a.day--; print a", "11 June 2004")
  runTestCase("a = 30 june 2004; a.day++; print a", "1 July 2004")
  runTestCase("a = 30 june 2004; a.day--; print a", "29 June 2004")
  runTestCase("a = 12 juNe 2004; a.year++; print a", "12 June 2005")
  runTestCase("a = 12 june 2004; a.year--; print a", "12 June 2003")
  runTestCase("a = 12 june 2004; a { this + 1 day}", "13 June 2004")
  runTestCase("a = 2,3,4; a{print }", lines("2", "3", "4"))
  runTestCase("a = 2,3,4; a{this }", lines("2", "3", "4"))
  runTestCase("a = 2,3,4; a{1 + this * 2 }", lines("5", "7", "9"))
  runTestCase("2,3,4{3 + this * 2 }", lines("7", "9", "11"))
  runTestCase("2,'3',4{3 + this }", lines("32", "33", "34"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order asc", lines("-2", "1", "3", "6", "23.3", "30"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order by this asc", lines("-2", "1", "3", "6", "23.3", "30"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order by this asc limit 5", lines("-2", "1", "3", "6", "23.3"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order desc", lines("30", "23.3", "6", "3", "1", "-2"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order by this desc", lines("30", "23.3", "6", "3", "1", "-2"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order asc limit 3", lines("-2", "1", "3"))
  runTestCase("gh = 30, -2, 6, 3,23.3,1; gh order by absolute(this) asc", lines("1", "-2", "3", "6", "23.3", "30"))
  runTestCase("3 times { print 'hello' }", lines("hello", "hello", "hello"))
  runTestCase("print 'g'; 3 times { print 'hello' } print 'h' ", lines("g", "hello", "hello", "hello", "h"))
  runTestCase("print 1kb", "1024")
  runTestCase("print -2kb", "-2048")
  runTestCase("print 11kb", "11264")
  runTestCase("print 10mb", "10485760")
  runTestCase("print 5GB", "5368709120")
  runTestCase("print 3tB", "3298534883328")
  runTestCase("print 6pb", "6755399441055744")
  runTestCase("a = 21 april 2011, 12:13;a", "21 April 2011, 12:13")
  runTestCase("a = 21 april 2011, 12:13, june 2021;a", lines("21 April 2011, 12:13", "June 2021"))
  runTestCase("a = 21 april 2011, 12:13, june 2021, 12 july 1999;a", lines("21 April 2011, 12:13", "June 2021", "12 July 1999"))
  runTestCase("a = 21 april 2011, 12:13, june 2021; 12 july 1999;a", lines("12 July 1999", "21 April 2011, 12:13", "June 2021"))
  runTestCase("a = (((21 april 2011, 12:13))), june 2021, 12 july 1999;a", lines("21 April 2011, 12:13", "June 2021", "12 July 1999"))
  runTestCase("a = (3 april 2011, 12:13, june 2021, 12 july 1999);a", lines("3 April 2011, 12:13", "June 2021", "12 July 1999"))
  runTestCase("a = 2,3,4; print first(a)", "2")
  runTestCase("a = 2,3,4; print first(a) + first(a)", "4")
  runTestCase("a = 'a6',3,0,'z'; print first(a) + first(a)", "a6a6")
  runTestCase("a = 2,3,4; print last(a)", "4")
  runTestCase("a = 2,3,4; print last(a) + last(a)", "8")
  runTestCase("a = 'a6',3,0,'5'; print last(a) + last(a)", "55")
  runTestCase("a = 2,3,4; print first(a) + last(a)", "6")
  runTestCase("a = 2,3,4; print first(a) * 2 + last(a)", "8")
  runTestCase("a = 2,3,7; print first(a) * last(a)", "14")
  runTestCase("a = 2,3,4; print any(a)", "1")
  runTestCase("a = 2,3,4; b = a where this < 5; print any(b)", "1")
  runTestCase("a = 2,3,4; b = a where this >= 5; print any(b)", "0")
  runTestCase("a = 'th', 'a'; b = a where length(this) < 3; print any(b)", "1")
  runTestCase("a = 'th', 'a'; b = a where length(this) >= 3; print any(b)", "0")
  runTestCase("a = 'th', 'a'; print any(a where length(this) = 2)", "1")
  runTestCase("a = 'th', 'a'; print any(a where length(this) = 3)", "0")
  runTestCase("a = 2,3,4; print contains(a, 3)", "1")
  runTestCase("a = 2,3,4; print contains(a, 3.5)", "0")
  runTestCase("a = 2,'aa',4; print contains(a, 'aa')", "1")
  runTestCase("a = 2,'aa',4; print contains(a, 'aA')", "0")
  runTestCase("a = 2 april 2012, 4 april 2012; print contains(a, 3 april 2012)", "0")
  runTestCase("a = 2 april 2012, 4 april 2012; print contains(a, 2 april 2012)", "1")
  runTestCase("a = 2 april 2012, april 2012; print contains(a, 3 april 2012)", "1")
  runTestCase("print contains('a', 'aA')", "0")
  runTestCase("print contains('ba', 'a')", "1")
  runTestCase("print contains('ba', 'A')", "0")
  runTestCase("print contains('baos', 'as')", "0")
  runTestCase("print contains('baos', 'a0')", "0")
  runTestCase("print contains('baos', 'ao')", "1")
  runTestCase("print CONTAINS ('baos', 'baos')", "1")
  runTestCase("print contains('baos', 'baost')", "0")
  runTestCase("print contains('', 'baost')", "0")
  runTestCase("print contains('', '')", "1")
  runTestCase("print contains('4', '')", "1")
  runTestCase("print endswith('a', 'aA')", "0")
  runTestCase("print endSWIth('ba', 'a')", "1")
  runTestCase("print endswith('ba', 'b')", "0")
  runTestCase("print endswith('ba', 'A')", "0")
  runTestCase("print endswith('baos', 'os')", "1")
  runTestCase("print endswith('baos', 'as')", "0")
  runTestCase("print endswith('baos', 'a0')", "0")
  runTestCase("print endswith('baos', 'ao')", "0")
  runTestCase("print endswith('baos', 'baos')", "1")
  runTestCase("print endswith('baos', 'baost')", "0")
  runTestCase("print endswith('', 'baost')", "0")
  runTestCase("print endswith('', '')", "1")
  runTestCase("print endswith('4', '')", "1")
  runTestCase("print startsWith('a', 'aA')", "0")
  runTestCase("print startswith('ba', 'a')", "0")
  runTestCase("print startswith('ba', 'b')", "1")
  runTestCase("print startswith('ba', 'B')", "0")
  runTestCase("print startswith('ba', 'A')", "0")
  runTestCase("print startswith('baos', 'os')", "0")
  runTestCase("print startswith('baos', 'as')", "0")
  runTestCase("print startswith('baos', 'a0')", "0")
  runTestCase("print startswith('baos', 'ao')", "0")
  runTestCase("print startswith('baos', 'baos')", "1")
  runTestCase("print startswith('baos', 'b')", "1")
  runTestCase("print startswith('baos', '')", "1")
  runTestCase("print startswith('baos', 'BA')", "0")
  runTestCase("print startswith('baos', 'bas')", "0")
  runTestCase("print startswith('baos', 'ba')", "1")
  runTestCase("print startsWIth('baos', 'baost')", "0")
  runTestCase("print startswith('', 'baost')", "0")
  runTestCase("print startswith('', '')", "1")
  runTestCase("print startswith('4', '')", "1")
  runTestCase("print startswith('7cat', length('catara'))", "0")
  runTestCase("print startswith('7cat', length('catarac'))", "1")
  runTestCase("print startswith('7cat', length('cataract'))", "0")
  runTestCase("print isBinary('')", "0")
  runTestCase("print isBinary('01')", "1")
  runTestCase("print isBinary('011002')", "0")
  runTestCase("print isBinary('0110010000')", "1")
  runTestCase("print isBinary(' 0110010000')", "0")
  runTestCase("print isBinary(' 110010000 ')", "0")
  runTestCase("print isBinary('011001a000')", "0")
  runTestCase("print isBinary('0000000000')", "1")
  runTestCase("print isBinary('11111111111')", "1")
  runTestCase("print isBinary('11111I11111')", "0")
  runTestCase("print isdigit('')", "0")
  runTestCase("print isdigit('1')", "1")
  runTestCase("print isdigit('a')", "0")
  runTestCase("print isdigit('003h6')", "0")
  runTestCase("print isdigit('534')", "1")
  runTestCase("print isHex('')", "0")
  runTestCase("print isHex('1234')", "1")
  runTestCase("print isHex('12v34')", "0")
  runTestCase("print isHex('AAbb')", "1")
  runTestCase("print isHex('AAEb')", "1")
  runTestCase("print isHex('AAGb')", "0")
  runTestCase("print isHex('00000')", "1")
  runTestCase("print isHex('aa 44')", "0")
  runTestCase("print isHex('aa44')", "1")
  runTestCase("print isHex('aa44 ')", "0")
  runTestCase("print absolute(3)", "3")
  runTestCase("print absolute(-4)", "4")
  runTestCase("print absolute(-3.2)", "3.2")
  runTestCase("print absolute(0)", "0")
  runTestCase("print absolute(-1567.76)", "1567.76")
  runTestCase("print absolute(2567.76)", "2567.76")
  runTestCase("print ceil(3.2)", "4")
  runTestCase("print ceil(3)", "3")
  runTestCase("print ceil(0.6)", "1")
  runTestCase("print ceil(0)", "0")
  runTestCase("print ceil(-0)", "0")
  runTestCase("print ceil(-0.2)", "0")
  runTestCase("print ceil(-23.56)", "-23")
  runTestCase("a = 2, 3; print count(a)", "2")
  runTestCase("a = 2, 3,1+2; b = 4,6,7,5,7,4; print count(a)", "3")
  runTestCase("a = 2, '3', 4; print count(a)", "3")
  runTestCase("a = 2, '3', 4; print count(a where this != 3)", "2")
  runTestCase("a = 2, '3', 4; print count(a where this = 23)", "0")
  runTestCase("a = april 2022, june 2022; print count(a)", "2")
  runTestCase("a = april 2022, april 2022; print count(a)", "2")
  runTestCase("print floor(1777)", "1777")
  runTestCase("print floor(3.2)", "3")
  runTestCase("print floor(3)", "3")
  runTestCase("print floor(0.6)", "0")
  runTestCase("print floor(0)", "0")
  runTestCase("print floor(-0)", "0")
  runTestCase("print floor(-0.2)", "-1")
  runTestCase("print floor(-23.56)", "-24")
  runTestCase("print floor(-230)", "-230")
  runTestCase("print frombinary('101')", "5")
  runTestCase("print frombinary('1')", "1")
  runTestCase("print frombinary(101.00)", "5")
  runTestCase("print frombinary('101df01')", "0")
  runTestCase("print length('abc')", "3")
  runTestCase("print length('')", "0")
  runTestCase("print length('wo')", "2")
  runTestCase("print length('3' + 105)", "4")
  runTestCase("print length(10*10)", "3")
  runTestCase("print length(1/2)", "3")
  runTestCase("print number('4')", "4")
  runTestCase("print number('4.32')", "4.32")
  runTestCase("print number('4.32kb')", "0")
  runTestCase("print number('-123')", "-123")
  runTestCase("print number('--123')", "0")
  runTestCase("print number('-45.5')", "-45.5")
  runTestCase("print number('')", "0")
  runTestCase("print number('10k')", "0")
  runTestCase("print number('2mb')", "0")
  runTestCase("print number('2045')", "2045")
  runTestCase("print number(' 2045')", "0")
  runTestCase("print number('33 ')", "0")
  runTestCase("print number('33')", "33")
  runTestCase("print power(2, 4)", "16")
  runTestCase("print power(2.5, 4)", "39.0625")
  runTestCase("print power(-2.5, 4)", "39.0625")
  runTestCase("print power(-2.5, 3)", "-15.625")
  runTestCase("print power(-2.5, 0)", "1")
  runTestCase("print power(-2.5, 1)", "-2.5")
  runTestCase("print power(2, 10)", "1024")
  runTestCase("print power(0.5, 2)", "0.25")
  runTestCase("print power(16, 0.5)", "4")
  runTestCase("print power(16, 0.25)", "2")
  runTestCase("print power(16, -0.25)", "0.5")
  runTestCase("print power(-16, -1)", "-0.0625")
  runTestCase("print power(-16, 1)", "-16")
  runTestCase("print round(0)", "0")
  runTestCase("print round(3)", "3")
  runTestCase("print round(3.14)", "3")
  runTestCase("print round(3.5)", "4")
  runTestCase("print round(3.7)", "4")
  runTestCase("print round(4)", "4")
  runTestCase("print round(223)", "223")
  runTestCase("print round(4.499999)", "4")
  runTestCase("print round(4.500001)", "5")
  runTestCase("print round(-4.499999)", "-4")
  runTestCase("print round(-4.500001)", "-5")
  runTestCase("print round(-0.2)", "0")
  runTestCase("print round(-0.5)", "-1")
  runTestCase("print round(-1.5)", "-2")
  runTestCase("print round(-0.7)", "-1")
  runTestCase("print round(-156)", "-156")
  runTestCase("print sign(1)", "1")
  runTestCase("print sign(13)", "1")
  runTestCase("print sign(-23)", "-1")
  runTestCase("print sign(0)", "0")
  runTestCase("print sign(0.001)", "1")
  runTestCase("print sign(-0.0005)", "-1")
  runTestCase("print sign(-12.45)", "-1")
  runTestCase("print sign(18.4)", "1")
  runTestCase("print sqrt(1)", "1")
  runTestCase("print sqrt(4)", "2")
  runTestCase("print sqrt(16)", "4")
  runTestCase("print sqrt(1024)", "32")
  runTestCase("print -sqrt(0.25)", "-0.5")
  runTestCase("print sqrt(0.16)", "0.4")
  runTestCase("print sqrt(289)", "17")
  runTestCase("print sqrt(114.49)", "10.7")
  runTestCase("print truncate(4)", "4")
  runTestCase("print truncate(0)", "0")
  runTestCase("print truncate(132)", "132")
  runTestCase("print truncate(-5)", "-5")
  runTestCase("print truncate(-375)", "-375")
  runTestCase("print truncate(4.2)", "4")
  runTestCase("print truncate(34.999)", "34")
  runTestCase("print truncate(35.01)", "35")
  runTestCase("print truncate(-2.4)", "-2")
  runTestCase("print truncate(-3.2)", "-3")
  runTestCase("print truncate(-56.2)", "-56")
  runTestCase("t = 1,2,3,4,5; average(t), min(t), max(t)", lines("3", "1", "5"))
  runTestCase("t = 1,2,3,4,5; sum(t), median(t)", lines("15", "3"))
  runTestCase("t = 1,2,3,4,5; sum(t, t), median(t, t)", lines("30", "3"))
  runTestCase("t = 1,2,3,4,5; average(t, t, t), min(t,t,t), max(t,t,t)", lines("3", "1", "5"))
  runTestCase("t = 34, 13, -8, 15, -12.4, 124; average(t), min(t), max(t)", lines("27.6", "-12.4", "124"))
  runTestCase("t = 34, 13, -8, 15, -12.4, 124; sum(t), median(t)", lines("165.6", "14"))
  runTestCase("t = 1,2,3,4,5; sum(t, 5), median(6, t, 6), median(6, t, 6, 6)", lines("20", "4", "4.5"))
  runTestCase("print numbers('7')", "7")
  runTestCase("print numbers('56.3')", lines("56", "3"))
  runTestCase("print numbers('tr5h7')", lines("5", "7"))
  runTestCase("print numbers('tr5.4 6')", lines("5", "4", "6"))
  runTestCase("print numbers('1uu5')", lines("1", "5"))
  runTestCase("print numbers('1uu5.')", lines("1", "5"))
  runTestCase("print christmas(2010)", "25 December 2010")
  runTestCase("print christmas(2013)", "25 December 2013")
  runTestCase("print christmas(1998)", "25 December 1998")
  runTestCase("print christmas(2150)", "25 December 2150")
  runTestCase("print christmas(1678)", "25 December 1678")
  runTestCase("print easter(2000)", "23 April 2000")
  runTestCase("print easter(2001)", "15 April 2001")
  runTestCase("print easter(2002)", "31 March 2002")
  runTestCase("print easter(1990)", "15 April 1990")
  runTestCase("print easter(2015)", "5 April 2015")
  runTestCase("print easter(2052)", "21 April 2052")
  runTestCase("print date(29,2,2012)", "29 February 2012")
  runTestCase("print date(3,6,2017)", "3 June 2017")
  runTestCase("print date(15,1,1996)", "15 January 1996")
  runTestCase("print date(20,11,2059)", "20 November 2059")
  runTestCase("print newyear(2010)", "1 January 2010, 00:00:00")
  runTestCase("print newyear(2018)", "1 January 2018, 00:00:00")
  runTestCase("print newyear(2002)", "1 January 2002, 00:00:00")
  runTestCase("print newyear(2071)", "1 January 2071, 00:00:00")
  runTestCase("print newyear(1956)", "1 January 1956, 00:00:00")
  runTestCase("print time(4, 2010)", "April 2010")
  runTestCase("print time(10, 2027)", "October 2027")
  runTestCase("print time(2, 6, 2012)", "2 June 2012")
  runTestCase("print time(30, 3, 2023)", "30 March 2023")
  runTestCase("print time(12, 7, 2015, 6, 9)", "12 July 2015, 06:09")
  runTestCase("print time(21, 9, 1996, 2, 9, 8)", "21 September 1996, 02:09:08")
  runTestCase("print time(20-10, 18/2, 1990+23, 2, 4*2, 12+14)", "10 September 2013, 02:08:26")
  runTestCase("print after('', '')", EMPTY_STRING)
  runTestCase("print after('', 'tak')", EMPTY_STRING)
  runTestCase("print after('tak', '')", EMPTY_STRING)
  runTestCase("print after(2103, 1)", "03")
  runTestCase("print after('tak', 'a')", "k")
  runTestCase("print after('tak', 't')", "ak")
  runTestCase("print after('tak', 'A')", EMPTY_STRING)
  runTestCase("print after('tak', 'k')", EMPTY_STRING)
  runTestCase("print after('tak', 'g')", EMPTY_STRING)
  runTestCase("print after('mistreats', 't')", "reats")
  runTestCase("print after('mistreatrs', 'tr')", "eatrs")
  runTestCase("print after('mistreats', 'am')", EMPTY_STRING)
  runTestCase("print after('10 5 0', 2 + 2*2 - 1)", " 0")
  runTestCase("print afterDigits('')", EMPTY_STRING)
  runTestCase("print afterDigits('mistreats')", EMPTY_STRING)
  runTestCase("print afterDigits('mistreats1')", EMPTY_STRING)
  runTestCase("print afterDigits('1mistreats')", "mistreats")
  runTestCase("print afterDigits('1234mistreats')", "mistreats")
  runTestCase("print afterDigits('trs 1234far')", "far")
  runTestCase("print afterDigits('up7')", EMPTY_STRING)
  runTestCase("print afterDigits(45+12)", EMPTY_STRING)
  runTestCase("print afterDigits(45+12 + 'j')", "j")
  runTestCase("print afterDigits(7 years + 1 year)", " years")
  runTestCase("print afterDigits(1 day + 7 years)", " years 1 day")
  runTestCase("print afterLetters('')", EMPTY_STRING)
  runTestCase("print afterLetters('up7')", "7")
  runTestCase("print afterLetters('up7a6')", "7a6")
  runTestCase("print afterLetters('u7a8')", "7a8")
  runTestCase("print afterLetters('     thank')", EMPTY_STRING)
  runTestCase("print afterLetters(beforeDigits('tha&_&6j'))", "&_&")
  runTestCase("print afterLetters('85ą17')", "17")
  runTestCase("print afterLetters('___Штиль=')", "=")
  runTestCase("print afterLetters('Штиль Тихий')", " Тихий")
  runTestCase("print afterLetters(`%^@д*(`) ", "*(")
  runTestCase("print afterLetters('15पवनव17पवनव')", "17पवनव")
  runTestCase("print afterLetters('234 78 بدیلی ' + 'h')", " h")
  runTestCase("print afterLetters('9Άεμς8')", "8")
  runTestCase("print before('', '')", EMPTY_STRING)
  runTestCase("print before('a', '')", EMPTY_STRING)
  runTestCase("print before('', 'a')", EMPTY_STRING)
  runTestCase("print before(2103, 1)", "2")
  runTestCase("print before('tak', 'a')", "t")
  runTestCase("print before('tak', 't')", EMPTY_STRING)
  runTestCase("print before('tak', 'A')", EMPTY_STRING)
  runTestCase("print before('tak', 'k')", "ta")
  runTestCase("print before('tak', 'g')", EMPTY_STRING)
  runTestCase("print before('mistreats', 't')", "mis")
  runTestCase("print before('mistreatrs', 'tr')", "mis")
  runTestCase("print before('mistreats', 'am')", EMPTY_STRING)
  runTestCase("print before('20 5 0', 2 + 2*2 - 1)", "20 ")
  runTestCase("print beforeDigits('')", EMPTY_STRING)
  runTestCase("print beforeDigits('12345')", EMPTY_STRING)
  runTestCase("print beforeDigits('g12345')", "g")
  runTestCase("print beforeDigits('gij12345')", "gij")
  runTestCase("print beforeDigits('noway')", EMPTY_STRING)
  runTestCase("print beforeDigits('Вітер634Вітер')", "Вітер")
  runTestCase("print beforeDigits('1gh')", EMPTY_STRING)
  runTestCase("print beforeDigits(' 6 4 2 4')", " ")
  runTestCase("print beforeLetters('before letters')", EMPTY_STRING)
  runTestCase("print beforeLetters(' before letters')", " ")
  runTestCase("print beforeLetters('21hu')", "21")
  runTestCase("print beforeLetters('_________')", EMPTY_STRING)
  runTestCase("print beforeLetters('пристань')", EMPTY_STRING)
  runTestCase("print beforeLetters('32 пристань')", "32 ")
  runTestCase("print beforeLetters('126,45')", EMPTY_STRING)
  runTestCase("print binary(10)", "1010")
  runTestCase("print binary(0)", "0")
  runTestCase("print binary(-10)", "-1010")
  runTestCase("print binary(1024)", "10000000000")
  runTestCase("print binary(1025)", "10000000001")
  runTestCase("print binary(518)", "1000000110")
  runTestCase("print binary(23)", "10111")
  runTestCase("print binary(23.99)", "10111")
  runTestCase("print binary(-23.99)", "-10111")
  runTestCase("print binary(0.45)", "0")
  runTestCase("print binary(-0.12)", "0")
  runTestCase("print binary(-1.12)", "-1")
  runTestCase("print binary(2312312)", "1000110100100001111000")
  runTestCase("print capitalize(23)", "23")
  runTestCase("print capitalize('23u45a')", "23U45A")
  runTestCase("print capitalize('')", EMPTY_STRING)
  runTestCase("print capitalize('join')", "Join")
  runTestCase("print capitalize('This')", "This")
  runTestCase("print capitalize('a long seNtence')", "A Long Sentence")
  runTestCase("print capitalize('capi talize')", "Capi Talize")
  runTestCase("print capitalize('CAPI TALIZE')", "Capi Talize")
  runTestCase("print capitalize('CaPi tALizE')", "Capi Talize")
  runTestCase("print capitalize('56go_to4')", "56Go_To4")
  runTestCase("print concatenate('hy')", "hy")
  runTestCase("print concatenate('hy', 'lo')", "hylo")
  runTestCase("print concatenate('hy', 4+3, 'ko')", "hy7ko")
  runTestCase("a = 3,2,1,4; print concatenate(a)", "3214")
  runTestCase("a = 3,2,1,4; print concatenate(a, 'i', a)", "3214i3214")
  runTestCase("a = 3,'h',1,4; print concatenate(a, 'i', a)", "3h14i3h14")
  runTestCase("a = 3,2,1,april 2020; print concatenate(a, 5 days - 1 day, a)", "321April 20204 days321April 2020")
  runTestCase("print digits('')", EMPTY_STRING)
  runTestCase("print digits('f56')", "56")
  runTestCase("print digits(10*0.15)", "15")
  runTestCase("print digits('76mb + 8 mb')", "768")
  runTestCase("print digits('j9_4n4m9 ?201')", "9449201")
  runTestCase("print digits('56пристань1')", "561")
  runTestCase("print digits('there is no digit')", EMPTY_STRING)
  runTestCase("print digits('hhhhhhhhh9')", "9")
  runTestCase("print digits('4______?')", "4")
  runTestCase("print digits('пристань')", EMPTY_STRING)
  runTestCase("print digits(4 june 2021)", "42021")
  runTestCase("print digits(4 june 2021 - 5 days)", "302021")
  runTestCase("print fill('word', 2)", "word")
  runTestCase("print fill('word', 1)", "word")
  runTestCase("print fill('word', 0)", "word")
  runTestCase("print fill('word', -12)", "word")
  runTestCase("print fill('word', -12)", "word")
  runTestCase("print fill('word', 5)", "0word")
  runTestCase("print fill('word', 7)", "000word")
  runTestCase("print fill('', 2)", "00")
  runTestCase("print fill('', 1)", "0")
  runTestCase("print fill('', 0)", EMPTY_STRING)
  runTestCase("print fill('', -1)", EMPTY_STRING)
  runTestCase("print fill('word', 6.99)", "00word")
  runTestCase("print hex(0)", "0")
  runTestCase("print hex(3)", "3")
  runTestCase("print hex(12)", "c")
  runTestCase("print hex(121)", "79")
  runTestCase("print hex(-151)", "-97")
  runTestCase("print hex(-151.1)", "-97")
  runTestCase("print hex(-151.87)", "-97")
  runTestCase("print hex(50)", "32")
  runTestCase("print hex(-567334745.71)", "-21d0d759")
  runTestCase("print join(2, ', ')", "2")
  runTestCase("print join('', ', ')", EMPTY_STRING)
  runTestCase("a = 3,'h',1,4; print join(a, '')", "3h14")
  runTestCase("a = 3,'h',1,4; print join(a, ',')", "3,h,1,4")
  runTestCase("a = 3,'h',1,4; print join(a, ', ')", "3, h, 1, 4")
  runTestCase("a = 3,'h',1,4; print join(a, 2+2*12)", "326h261264")
  runTestCase("a = '', '', ''; print join(a, 4)", "44")
  runTestCase("a = '', 1, '', ''; print join(a, 4)", "4144")
  runTestCase("print left('leftest', 0)", EMPTY_STRING)
  runTestCase("print left('leftest', -3)", EMPTY_STRING)
  runTestCase("print left('leftest', 1)", "l")
  runTestCase("print left('leftest', 2)", "le")
  runTestCase("print left('leftest', 6)", "leftes")
  runTestCase("print left('leftest', 6.23 + 1 - 1)", "leftes")
  runTestCase("print left('leftest', 7)", "leftest")
  runTestCase("print left('leftest', 12)", "leftest")
  runTestCase("print left(312, 2)", "31")
  runTestCase("print left(312, 1)", "3")
  runTestCase("print left(312, 4)", "312")
  runTestCase("print left(312, -3)", EMPTY_STRING)
  runTestCase("print left('', -3)", EMPTY_STRING)
  runTestCase("print left('', 1)", EMPTY_STRING)
  runTestCase("print left('', 3)", EMPTY_STRING)
  runTestCase("print left('', 6)", EMPTY_STRING)
  runTestCase("print letters('')", EMPTY_STRING)
  runTestCase("print letters('1256.34')", EMPTY_STRING)
  runTestCase("print letters('a______b_e')", "abe")
  runTestCase("print letters('This&That')", "ThisThat")
  runTestCase("print letters('12&12')", EMPTY_STRING)
  runTestCase("print letters('12пристань12')", "пристань")
  runTestCase("print letters('12 пристань 12aст')", "пристаньaст")
  runTestCase("print letters(',,,,,,,,h9o')", "ho")
  runTestCase("print lower('')", EMPTY_STRING)
  runTestCase("print lower('12')", "12")
  runTestCase("print lower('1BVR2')", "1bvr2")
  runTestCase("print lower('feW WORds')", "few words")
  runTestCase("print lower('feW 77WORds')", "few 77words")
  runTestCase("print lower('??AND THIS IS__')", "??and this is__")
  runTestCase("print lower('12')", "12")
  runTestCase("print lower('3 ДЕрЕВЬЯ')", "3 деревья")
  runTestCase("print monthName(1)", "January")
  runTestCase("print monthName(2)", "February")
  runTestCase("print monthName(3.2)", "March")
  runTestCase("print monthName(4+0.2)", "April")
  runTestCase("print monthName(7-2)", "May")
  runTestCase("print monthName(6.0001)", "June")
  runTestCase("print monthName(7)", "July")
  runTestCase("print monthName(8)", "August")
  runTestCase("print monthName(9)", "September")
  runTestCase("print monthName(10)", "October")
  runTestCase("print monthName(11)", "November")
  runTestCase("print monthName(12)", "December")
  runTestCase("print monthName(13)", EMPTY_STRING)
  runTestCase("print monthName(0)", EMPTY_STRING)
  runTestCase("print monthName(-2)", EMPTY_STRING)
  runTestCase("print monthName(25)", EMPTY_STRING)
  runTestCase("print monthName(12325)", EMPTY_STRING)
  runTestCase("print monthName(4 april 2012)", "April")
  runTestCase("print monthName(21 june 2012 - 5 days)", "June")
  runTestCase("print monthName(21 june 2012 - 27 days)", "May")
  runTestCase("print monthName(21 june 2012 + 10 days + 80 hours)", "July")
  runTestCase("print path(0, 1)", path("0", "1"))
  runTestCase("print path(3, 4, 5, 6, 7)", path("3", "4", "5", "6", "7"))
  runTestCase("print path('some', 'relative', 'path')", path("some", "relative", "path"))
  runTestCase("print path('c:/', 'absolute', 'path')", path("c:", "absolute", "path"))
  runTestCase("print path('another', 'c:/', 'path')", path("c:", "path"))
  runTestCase("print path('another', 'another', 'c:/', 'path')", path("c:", "path"))
  runTestCase("print path('another', 'another', 'c:/') ", "c:")
  runTestCase("print repeat('', 0)", EMPTY_STRING)
  runTestCase("print repeat('', 1)", EMPTY_STRING)
  runTestCase("print repeat('', -20)", EMPTY_STRING)
  runTestCase("print repeat('', -10.67)", EMPTY_STRING)
  runTestCase("print repeat('', 10)", EMPTY_STRING)
  runTestCase("print repeat('a', 1)", "a")
  runTestCase("print repeat('a', 3)", "aaa")
  runTestCase("print repeat('a', 7)", "aaaaaaa")
  runTestCase("print repeat('a', 0)", EMPTY_STRING)
  runTestCase("print repeat('a', -3)", EMPTY_STRING)
  runTestCase("print repeat('aB', 3)", "aBaBaB")
  runTestCase("print repeat('aB', -3)", EMPTY_STRING)
  runTestCase("print repeat('при', 5.5)", "приприприприпри")
  runTestCase("print repeat('при', -3)", EMPTY_STRING)
  runTestCase("print replace(1234, 2, 4)", "1434")
  runTestCase("print replace(1234, 2, 700)", "170034")
  runTestCase("print replace(1234, '', 4)", "1234")
  runTestCase("print replace(1234, '', '')", "1234")
  runTestCase("print replace(1234, 2, '')", "134")
  runTestCase("print replace('', 2, 4)", EMPTY_STRING)
  runTestCase("print replace('', 2, '')", EMPTY_STRING)
  runTestCase("print replace('', '', 2)", EMPTY_STRING)
  runTestCase("print replace('', '', '')", EMPTY_STRING)
  runTestCase("print replace('thing', 'i', 'o')", "thong")
  runTestCase("print replace('thing', 'i', 'out')", "thoutng")
  runTestCase("print replace('thing', 'hi', 'i')", "ting")
  runTestCase("print replace('thing hi', 'hi', 'mi')", "tming mi")
  runTestCase("print replace('thing Hi', 'hi', 'mi')", "tming Hi")
  runTestCase("print replace('thing Hi', 'Hi', 'miu')", "thing miu")
  runTestCase("print replace('thing', 'hij', 'i')", "thing")
  runTestCase("print replace('thing', 'w', '')", "thing")
  runTestCase("print replace('thing in minside', 'in', '')", "thg  mside")
  runTestCase("print replace('thing in minside', 'inu', '')", "thing in minside")
  runTestCase("print replace('thing in miNside', 'iN', '')", "thing in mside")
  runTestCase("print replace('thing in miNside', 'th', '')", "ing in miNside")
  runTestCase("print reverse('')", EMPTY_STRING)
  runTestCase("print reverse('a')", "a")
  runTestCase("print reverse('abc')", "cba")
  runTestCase("print reverse(1456)", "6541")
  runTestCase("print reverse(4 days)", "syad 4")
  runTestCase("print reverse('a long Sentence')", "ecnetneS gnol a")
  runTestCase("print right('righty', 0)", EMPTY_STRING)
  runTestCase("print right('righty', -3)", EMPTY_STRING)
  runTestCase("print right('righty', 1)", "y")
  runTestCase("print right('righty', 2)", "ty")
  runTestCase("print right('righty', 5)", "ighty")
  runTestCase("print right('righty', 5.23 + 1 - 1)", "ighty")
  runTestCase("print right('righty', 6)", "righty")
  runTestCase("print right('righty', 7)", "righty")
  runTestCase("print right('righty', 12)", "righty")
  runTestCase("print right(312, 2)", "12")
  runTestCase("print right(312, 1)", "2")
  runTestCase("print right(312, 4)", "312")
  runTestCase("print right(312, -3)", EMPTY_STRING)
  runTestCase("print right('', -3)", EMPTY_STRING)
  runTestCase("print right('', 1)", EMPTY_STRING)
  runTestCase("print right('', 3)", EMPTY_STRING)
  runTestCase("print right('', 6)", EMPTY_STRING)
  runTestCase("print roman(0)", "N")
  runTestCase("print roman(1)", "I")
  runTestCase("print roman(2)", "II")
  runTestCase("print roman(3)", "III")
  runTestCase("print roman(4)", "IV")
  runTestCase("print roman(5)", "V")
  runTestCase("print roman(6)", "VI")
  runTestCase("print roman(13)", "XIII")
  runTestCase("print roman(21)", "XXI")
  runTestCase("print roman(34)", "XXXIV")
  runTestCase("print roman(59)", "LIX")
  runTestCase("print roman(88)", "LXXXVIII")
  runTestCase("print roman(99)", "XCIX")
  runTestCase("print roman(100)", "C")
  runTestCase("print roman(117)", "CXVII")
  runTestCase("print roman(166)", "CLXVI")
  runTestCase("print roman(203)", "CCIII")
  runTestCase("print roman(209)", "CCIX")
  runTestCase("print roman(311)", "CCCXI")
  runTestCase("print roman(562)", "DLXII")
  runTestCase("print roman(712.5)", "DCCXIIS")
  runTestCase("print roman(888.75)", "DCCCLXXXVIIIS···")
  runTestCase("print roman(1012.11)", "MXII·")
  runTestCase("print roman(1999)", "MCMXCIX")
  runTestCase("print roman(2000)", "MM")
  runTestCase("print roman(2021)", "MMXXI")
  runTestCase("print roman(3456.78)", "MMMCDLVIS···")
  runTestCase("print roman(4456.78)", "I̅V̅CDLVIS···")
  runTestCase("print roman(1231212)", "M̅C̅C̅X̅X̅X̅I̅CCXII")
  runTestCase("print roman(678344)", "D̅C̅L̅X̅X̅V̅I̅I̅I̅CCCXLIV")
  runTestCase("print roman(-453123.5)", "-C̅D̅L̅I̅I̅I̅CXXIIIS")
  runTestCase("print roman(657231.999)", "D̅C̅L̅V̅I̅I̅CCXXXIS·····")
  runTestCase("print roman(0.25)", "···")
  runTestCase("print roman(-0.25)", "-···")
  runTestCase("print roman(1.5)", "IS")
  runTestCase("print roman(25)", "XXV")
  runTestCase("print roman(7)", "VII")
  runTestCase("print roman(-7)", "-VII")
  runTestCase("print roman(-17.5)", "-XVIIS")
  runTestCase("print string(7)", "7")
  runTestCase("print string(2-3)", "-1")
  runTestCase("print string(7 days - 1 day)", "6 days")
  runTestCase("print string(4 june 2020)", "4 June 2020")
  runTestCase("print string(true)", "1")
  runTestCase("print string(false)", "0")
  runTestCase("print 3+7", "10")
  runTestCase("print 3 + string(7)", "37")
  runTestCase("print 1 day + 4 days", "5 days")
  runTestCase("print 1 day + string(4 days)", "1 day4 days")
  runTestCase("print true + true", "2")
  runTestCase("print true + string(false)", "10")
  runTestCase("print 3 april 2021 + 3 weeks", "24 April 2021")
  runTestCase("print 3 april 2021 + string(3 weeks)", "3 April 20213 weeks")
  runTestCase("print string(3 april 2021) + string(3 weeks)", "3 April 20213 weeks")
  runTestCase("print string(3 april 2021) + 3 weeks", "3 April 20213 weeks")
  runTestCase("print substring('example', 0)", "example")
  runTestCase("print substring('example', 1)", "xample")
  runTestCase("print substring('example', 4)", "ple")
  runTestCase("print substring('example', 6)", "e")
  runTestCase("print substring('example', 7)", EMPTY_STRING)
  runTestCase("print substring('example', 12)", EMPTY_STRING)
  runTestCase("print substring('example', -1)", "e")
  runTestCase("print substring('example', -2)", "le")
  runTestCase("print substring('example', -5)", "ample")
  runTestCase("print substring('example', -7)", "example")
  runTestCase("print substring('example', -70.45)", "example")
  runTestCase("print substring('example', 0, 1)", "e")
  runTestCase("print substring('example', 0, 2)", "ex")
  runTestCase("print substring('example', 0, 5)", "examp")
  runTestCase("print substring('example', 0, 50)", "example")
  runTestCase("print substring('example', 1, 2)", "xa")
  runTestCase("print substring('example', 1, 4)", "xamp")
  runTestCase("print substring('example', 1, 5)", "xampl")
  runTestCase("print substring('example', 1, 6)", "xample")
  runTestCase("print substring('example', 1, 84)", "xample")
  runTestCase("print substring('example', 1, 0)", EMPTY_STRING)
  runTestCase("print substring('example', 1, -1)", EMPTY_STRING)
  runTestCase("print substring('example', 1, -2)", EMPTY_STRING)
  runTestCase("print substring('example', 1, -13)", EMPTY_STRING)
  runTestCase("print substring('example', 0, -13)", EMPTY_STRING)
  runTestCase("print substring('example', 5, -13)", EMPTY_STRING)
  runTestCase("print substring('example', -1, -13)", EMPTY_STRING)
  runTestCase("print substring('example', -3, -13)", EMPTY_STRING)
  runTestCase("print substring('example', -654, -13)", EMPTY_STRING)
  runTestCase("print substring('example', -1, 1)", "e")
  runTestCase("print substring('example', -1, 14)", "e")
  runTestCase("print substring('example', -2, 1)", "l")
  runTestCase("print substring('example', -2, 2)", "le")
  runTestCase("print substring('example', -4, 2)", "mp")
  runTestCase("print substring('example', -4, 3)", "mpl")
  runTestCase("print substring('example', -6, 3)", "xam")
  runTestCase("print substring('example', -7, 3)", "exa")
  runTestCase("print substring('example', -8, 3)", "ex")
  runTestCase("print substring('example', -9, 3)", "e")
  runTestCase("print substring('example', -10, 3)", EMPTY_STRING)
  runTestCase("print substring('example', -119, 113)", "e")
  runTestCase("print substring('example', -119, 115)", "exa")
  runTestCase("print substring('example', -119, -115)", EMPTY_STRING)
  runTestCase("print substring('example', -3, 0)", EMPTY_STRING)
  runTestCase("print substring('example', 1, 0)", EMPTY_STRING)
  runTestCase("print substring('example', 3, 0)", EMPTY_STRING)
  runTestCase("print substring('example', 124, 0)", EMPTY_STRING)
  runTestCase("print trim('')", EMPTY_STRING)
  runTestCase("print trim('  ')", EMPTY_STRING)
  runTestCase("print trim('  7')", "7")
  runTestCase("print trim('4   6')", "4   6")
  runTestCase("print trim('   6')", "6")
  runTestCase("print trim('  3 6')", "3 6")
  runTestCase("print trim('  ,?')", ",?")
  runTestCase("print trim('  word ')", "word")
  runTestCase("print trim('  two wordS ')", "two wordS")
  runTestCase("print upper('')", EMPTY_STRING)
  runTestCase("print upper('12')", "12")
  runTestCase("print upper('1bvr2')", "1BVR2")
  runTestCase("print upper('feW WORds')", "FEW WORDS")
  runTestCase("print upper('feW 77WORds')", "FEW 77WORDS")
  runTestCase("print upper('??and this is__')", "??AND THIS IS__")
  runTestCase("print upper('12')", "12")
  runTestCase("print upper('3 ДЕрЕВЬЯ')", "3 ДЕРЕВЬЯ")
  runTestCase("print weekDayName(1)", "Monday")
  runTestCase("print weekDayName(2.001)", "Tuesday")
  runTestCase("print weekDayName(3.888)", "Wednesday")
  runTestCase("print weekDayName(4+1-1)", "Thursday")
  runTestCase("print weekDayName(2*2+1)", "Friday")
  runTestCase("print weekDayName(6/2 + 3)", "Saturday")
  runTestCase("print weekDayName(7)", "Sunday")
  runTestCase("print weekDayName(8)", EMPTY_STRING)
  runTestCase("print weekDayName(0)", EMPTY_STRING)
  runTestCase("print weekDayName(-2)", EMPTY_STRING)
  runTestCase("print weekDayName(-123.32)", EMPTY_STRING)
  runTestCase("print weekDayName(10)", EMPTY_STRING)
  runTestCase("print weekDayName(1231235)", EMPTY_STRING)
  runTestCase("print weekDayName(23 march 2021)", "Tuesday")
  runTestCase("print weekDayName(2 february 2012)", "Thursday")
  runTestCase("print weekDayName((1 february 2012, 23:15:02))", "Wednesday")
  runTestCase("print weekDayName(9 november 1996)", "Saturday")
  runTestCase("print weekDayName(november 1996)", EMPTY_STRING)
  runTestCase("print weekDayName(15 december 2034)", "Friday")
  runTestCase("print weekDayName(november 1996)", EMPTY_STRING)
  runTestCase("print weekDayName((15 december 2034, 12:15))", "Friday")
  runTestCase("print characters(''); print 6", "6")
  runTestCase("print characters('a')", "a")
  runTestCase("print characters('8')", "8")
  runTestCase("print characters('óó')", lines("ó", "ó"))
  runTestCase("print characters('try')", lines("t", "r", "y"))
  runTestCase("print characters('long words')", lines("l", "o", "n", "g", " ", "w", "o", "r", "d", "s"))
  runTestCase("print numbers(3 november 1996)", lines("3", "1996"))
  runTestCase("numbers(3 november 1996) { print this - 1000 }", lines("-997", "996"))
  runTestCase("print numbers('5 june 1 1996')", lines("5", "1", "1996"))
  runTestCase("print numbers('a')", NOTHING)
  runTestCase("print numbers(';;')", NOTHING)
  runTestCase("print numbers('')", NOTHING)
  runTestCase("print numbers('2')", "2")
  runTestCase("print numbers('9')", "9")
  runTestCase("print numbers('0')", "0")
  runTestCase("print numbers('23')", "23")
  runTestCase("print numbers('09')", "9")
  runTestCase("print numbers('17')", "17")
  runTestCase("print numbers('a7')", "7")
  runTestCase("print numbers('?0')", "0")
  runTestCase("print numbers('2u')", "2")
  runTestCase("print numbers('8u')", "8")
  runTestCase("print numbers('trait')", NOTHING)
  runTestCase("print numbers('m>y mu> ?ki k__fg s?')", NOTHING)
  runTestCase("print numbers('3,4,5,6')", lines("3", "4", "5", "6"))
  runTestCase("print numbers('3.4.5.6')", lines("3", "4", "5", "6"))
  runTestCase("print numbers('3.4 5.6')", lines("3", "4", "5", "6"))
  runTestCase("print numbers('a3.4.5 6.7v')", lines("3", "4", "5", "6", "7"))
  runTestCase("print numbers('53ko7;6;4 ')", lines("53", "7", "6", "4"))
  runTestCase("print numbers('  53  k o?7>6;4 ')", lines("53", "7", "6", "4"))
  runTestCase("print split('', '')", NOTHING)
  runTestCase("print split('', 'a')", NOTHING)
  runTestCase("print split('', 'bgf')", NOTHING)
  runTestCase("print split('', 'bgfdfgdf')", NOTHING)
  runTestCase("print split('a', '')", "a")
  runTestCase("print split(1000 * 12, '')", lines("1", "2", "0", "0", "0"))
  runTestCase("print split('b', 'a')", "b")
  runTestCase("print split('bowe', 'a')", "bowe")
  runTestCase("print split('two trees', 'a')", "two trees")
  runTestCase("print split('high', 'ha')", "high")
  runTestCase("print split('high', 'higher')", "high")
  runTestCase("print split('a', 'a')", lines(EMPTY_STRING, EMPTY_STRING))
  runTestCase("print split('aa', 'a')", lines(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING))
  runTestCase("print split('aba', 'a')", lines(EMPTY_STRING, "b", EMPTY_STRING))
  runTestCase("print split('ba', 'a')", lines("b", EMPTY_STRING))
  runTestCase("print split('bay', 'a')", lines("b", "y"))
  runTestCase("print split('treetr', 'tr')", lines(EMPTY_STRING, "ee", EMPTY_STRING))
  runTestCase("print split('treete', 'tr')", lines(EMPTY_STRING, "eete"))
  runTestCase("print split('trertetretr', 'tr')", lines(EMPTY_STRING, "erte", "e", EMPTY_STRING))
  runTestCase("print split('ertetretr', 'tr')", lines("erte", "e", EMPTY_STRING))
  runTestCase("print split('monmonmomonmo', 'monmo')", lines(EMPTY_STRING, "nmo", EMPTY_STRING))
  runTestCase("print split('montmonmomotnmo', 'monmo')", lines("mont", "motnmo"))
  runTestCase("print split('movmove', 'move')", lines("mov", EMPTY_STRING))
  runTestCase("print words('')", NOTHING)
  runTestCase("print words('<<<<<')", NOTHING)
  runTestCase("print words(167+ 5)", NOTHING)
  runTestCase("print words('a')", "a")
  runTestCase("print words('45a32')", "a")
  runTestCase("print words('a b')", lines("a", "b"))
  runTestCase("print words('78_gaPs in')", lines("gaPs", "in"))
  runTestCase("print words(',h,j,r,d')", lines("h", "j", "r", "d"))
  runTestCase("print words('пристань')", "пристань")
  runTestCase("print words('this<<<<пристань  ')", lines("this", "пристань"))
  runTestCase("print words('21jj{aa  ? bb}')", lines("jj", "aa", "bb"))

  runTestCase("u = 6,1,2,4,3,5; print u", lines("6", "1", "2", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 1", lines("1", "2", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 1 + 1", lines("2", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u every 1", lines("6", "1", "2", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u every 2", lines("6", "2", "3"))
  runTestCase("u = 6,1,2,4,3,5; print u every 2 skip 1", lines("2", "3"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 1 every 2", lines("1", "4", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u every 1 limit 3", lines("6", "1", "2"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 1 every 2 limit 2", lines("1", "4"))
  runTestCase("u = 6,1,2,4,3,5; print u final 4 every 2 limit 2", lines("2", "3"))
  runTestCase("u = 6,1,2,4,3,5; print u final true every 2 limit 2", "5")
  runTestCase("u = 6,1,2,4,3,5; print u where true xor false", lines("6", "1", "2", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u where this < 3.2", lines("1", "2", "3"))
  runTestCase("u = 6,1,2,4,3,5; print u where this >= 3", lines("6", "4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u where this % 2 = 1", lines("1", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u where this + index = 7", lines("4", "3"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 1 where this + index = 9", "5")
  runTestCase("u = 6,1,2,4,3,5; print u limit 1 where this + index != 7", "6")
  runTestCase("u = 6,1,2,4,3,5; print u final 3 where this < 4", "3")
  runTestCase("u = 6,1,2,4,3,5; print u skip 3 where true", lines("4", "3", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u order desc", lines("6", "5", "4", "3", "2", "1"))
  runTestCase("u = 6,1,2,4,3,5; print u order asc", lines("1", "2", "3", "4", "5", "6"))
  runTestCase("u = 6,1,2,4,3,5; print u order by this", lines("1", "2", "3", "4", "5", "6"))
  runTestCase("u = 6,1,2,4,3,5; print u order by this asc", lines("1", "2", "3", "4", "5", "6"))
  runTestCase("u = 6,1,2,4,3,5; print u order by this desc", lines("6", "5", "4", "3", "2", "1"))
  runTestCase("u = 6,1,2,4,3,5; print u order by -this asc", lines("6", "5", "4", "3", "2", "1"))
  runTestCase("u = 6,1,2,4,3,5; print u skip 2 order asc", lines("2", "3", "4", "5"))
  runTestCase("u = 6,1,2,4,3,5; print u order asc skip 2", lines("3", "4", "5", "6"))
  runTestCase("x = -123.5, -2, 5000100, 3 ; print x order asc", lines("-123.5", "-2", "3", "5000100"))
  runTestCase("x = -123.5, -2, 5000770, 3 ; print x order by length(this) desc", lines("5000770","-123.5", "-2", "3"))
  runTestCase("x = -123.5, 18, -2, 50000, 3, 2.5, 100, -1500 ; print x order by length(this) desc, this asc", lines("-123.5", "-1500", "50000", "2.5", "100", "-2", "18", "3"))
  runTestCase("x = -123.5, 18, -2, 50000, 3, 2.5, 100, -1500 ; print x order by this desc, length(this) asc", lines("50000", "100", "18", "3", "2.5", "-2", "-123.5", "-1500"))
  (runTestCase("x = 'auf','ghy','kuk', 'tgi', 'yuo', 'zzq', 'xua'; print x order by this[1] asc, this[0] desc",
  lines("tgi", "ghy", "yuo", "xua", "kuk", "auf", "zzq")))
  (runTestCase("x = 'auf','ghy','kuk', 'tgi', 'kuo', 'zzq', 'kua'; print x order by this[1] asc, this[0] desc, this[2] asc",
  lines("tgi", "ghy" ,"kua" ,"kuk" ,"kuo" ,"auf" ,"zzq")))
  (runTestCase("x = 'auf','ghy','kuk', 'tgi', 'kuo', 'zzq', 'kua'; print x order by this[1] asc, this[0] desc, this[2] asc skip 1 every 3-1 where this != 'kuk' ",
  lines("ghy", "auf")))
  (runTestCase("x = 2 april 2008, 1 june 2022, 6 june 2007, 19 january 2015, 11 june 2007; print x order desc",
  lines("1 June 2022", "19 January 2015", "2 April 2008", "11 June 2007", "6 June 2007")))
  (runTestCase("x = 2 april 2008, 1 june 2022, 6 june 2007, 19 january 2015, 11 june 2007; print x order by this.month desc, this desc",
  lines("1 June 2022", "11 June 2007", "6 June 2007", "2 April 2008", "19 January 2015")))
  (runTestCase("x = 2 april 2008, 1 june 2022, 6 june 2007, 19 january 2015, 11 june 2007; print x order by this.month desc, this.year asc, this.day desc",
  lines("11 June 2007", "6 June 2007", "1 June 2022", "2 April 2008", "19 January 2015")))
  runTestCase("a = 5,3; print a[0]", "5")
  runTestCase("a = 5,3; print a[1]", "3")
  runTestCase("a = 5,3; print a[1.25]", "3")
  runTestCase("a = 5,3; print a[2]", "0")
  runTestCase("a = 5,3; print a[0]", "5")
  runTestCase("a = 5,3; print a[0] * a[1]", "15")
  runTestCase("a = 5,3; print a[0] - a[1] / a[1]", "4")
  runTestCase("a = 2, 12, 4; print a[a[0]] * 11", "44")
  runTestCase("a = 2, 11, 4, 8; print ( a[a[0]] * 16) / a[3] - a[1]  " , "-3")
  runTestCase("a = 2, 11, 4, 8; print 'start ' + ( a[a[0]] * 16) / a[3] - a[1] + ' end' " , "start -3 end")
  runTestCase("3 times { print index }   ", lines("0", "1", "2"))
  runTestCase("9 { 3 times { print index } index }  ", lines("0", "1", "2", "0"))
  runTestCase("7.5 { 3 times { print this } this }  ", lines("7.5", "7.5", "7.5", "7.5"))
  runTestCase("  'ha' { this; 3 times { print this } this }  ", lines("ha", "ha", "ha", "ha", "ha"))
  runTestCase("  'ha', 'o' { this; 2 times { print this + index } index }  ", lines("ha", "ha0", "ha1", "0", "o", "o0", "o1", "1"))
  runTestCase("h = 8; 0 times { h = 5 } print h  ", "8")
  runTestCase("h = 8; 3 times { h += 5 } print h  ", "23")
  runTestCase("4.88 times { if index != 2 {print index * 10} }   ", lines("0", "10", "30"))
  runTestCase("u = 'abcde'; 3 times { print u; u = substring(u, 2) }   ", lines("abcde", "cde", "e"))
  runTestCase("k = 'abcde'; k[2] = 'g'; k  ", "abgde")
  runTestCase("k = 'abcde'; k[2] = ''; k  ", "abde")
  runTestCase("k = 'abcde'; k[2] = 89; k  ", "ab89de")
  runTestCase("i = 'abcde'; i += 22; i", "abcde22")
  runTestCase("i = 'abcde'; i += 'a'; i", "abcdea")
  runTestCase("b = true; b = false; b", "0")
  runTestCase("b = true; b = b; b", "1")
  runTestCase("b = true; b = b xor b; b", "0")
  runTestCase("b = true; b = false or not b; b", "0")
  runTestCase("b = false; b = false or not b; b", "1")
  runTestCase("n = 13; n++; print n", "14")
  runTestCase("n = 13; n--; print n", "12")
  runTestCase("n = 13; n+ = 1.4; print n", "14.4")
  runTestCase("n = 13; n -= 50; print n", "-37")
  runTestCase("n = 12.4; n *= -2; print n", "-24.8")
  runTestCase("n = 12.6; n /= 3; print n", "4.2")
  runTestCase("n = 12.6; n %= 4; print n", "0.6")
  runTestCase("n = 12.6; n += false or true; print n", "13.6")
  runTestCase("n = 10; n = 4 < 5; print n", "1")
  runTestCase("s = 'hello'; s[0] = 4+3; print s", "7ello")
  runTestCase("s = 'hello'; s[0] = 4+30; print s", "34ello")
  runTestCase("s = 'hello'; s = true; print s", "1")
  runTestCase("s = 'hello'; s = 3/2; print s", "1.5")
  runTestCase("s = 'hello'; s += 17; print s", "hello17")
  runTestCase("s = 'hello'; s += 'kuo'; print s", "hellokuo")
  runTestCase("s = 'hello'; 4 times { s += 'ka' }; print s", "hellokakakaka")
  runTestCase("s = 'hello'; s[4] = 4 months; print s", "hell4 months")
  runTestCase("nl = 2,3,4; nl = nl, 6; print nl", lines("2", "3", "4", "6"))
  runTestCase("nl = 2,3,4; nl = nl, nl; print nl", lines("2", "3", "4", "2", "3", "4"))
  runTestCase("nl = 2,3,4; nl = nl, nl; print nl where this != 3", lines("2", "4", "2", "4"))
  runTestCase("nl = 2,3,4; nl = nl, nl; print nl where index != 3", lines("2", "3", "4", "3", "4"))
  runTestCase("li = 'b', 'c', 'd' ; print li[0], li[2]", lines("b", "d"))
  runTestCase("li = 'b', 'c', 'd' ; print li, 'just' ", lines("b", "c", "d", "just"))
  runTestCase("li = 'b', 'c', 'd' ; print 'just', li, 3+4 ", lines("just", "b", "c", "d", "7"))
  runTestCase("x = 17; true ? x : 6", "17")
  runTestCase("x = 17; false ? x : 6", "6")
  runTestCase("x = 17; true ? x", "17")
  runTestCase("x = 17; false ? x", "0")
  runTestCase("x = 17; true ? x : true ? 6 : 8", "17")
  runTestCase("x = 17; true ? x : false ? 6 : 8", "17")
  runTestCase("x = 17; false ? x : true ? 6 : 8", "6")
  runTestCase("x = 17; false ? x : false ? 6 : 8", "8")
  runTestCase("x = 17; true ? x : true ? 6 : true ? 20 : 3", "17")
  runTestCase("x = 17; false ? x : false ? 6 : false ? 20 : 3", "3")
  runTestCase("x = 17; false ? x : true ? 6 : true ? 20 : 3", "6")
  runTestCase("x = 17; true ? x : false ? 6 : true ? 20 : 3", "17")
  runTestCase("x = 17; true ? x : true ? 6 : false ? 20 : 3", "17")
  runTestCase("x = 17; false ? x : false ? 6 : true ? 20 : 3", "20")
  runTestCase("x = 17; false ? x : true ? 6 : false ? 20 : 3", "6")
  runTestCase("x = 17; false ? x : true ? 6 : false ? 20 : 3", "6")
  runTestCase("x = 17; true ? x : true ? 5", "17")
  runTestCase("x = 17; true ? x : false ? 5", "17")
  runTestCase("x = 17; false ? x : true ? 5", "5")
  runTestCase("x = 17; false ? x : false ? 5", "0")
  runTestCase("x = 17; b = 3.21,4,5; b[false ? x : false ? 5]", "3.21")
  runTestCase("x = 4,7,9; true and false ? 6 : true ? x skip 1+1 ", "9")
  runTestCase("'b', 'c', 'd' where this != 'c' ", lines("b", "d"))
  runTestCase("4, 6, 8, 5, 2+6 where this = 5+3 ", lines("8", "8"))
  runTestCase("4, 6, 8, 5, 2+6 where false; 8, 6 ", lines("8", "6"))
  runTestCase("4, (6, 8, 5, 2+6 where false); 8, 6 ", lines("4", "8", "6"))
  runTestCase("4, (6, 8, 5, 2+6) where false; 8, 6 ", lines("8", "6"))
  runTestCase("h = 2,3,4; h[1], h[2] where not false order desc", lines("4", "3"))
  runTestCase("3, false ? 4:56, 8 where true", lines("3", "56", "8"))
  runTestCase("4 times { index; if index = 2 {break} }  ", lines("0", "1", "2"))
  runTestCase("4 times { index; if index = 2 {continue} }  ", lines("0", "1", "2", "3"))
  runTestCase("4 times { if index = 2 {continue} index }  ", lines("0", "1", "3"))
  runTestCase("7 times { if index % 2 = 1 {continue} index }  ", lines("0", "2", "4", "6"))
  runTestCase("7 times { if index % 2 = 1 {break} index }  ", "0")
  runTestCase("2 times {index; 4 times { index; if index = 2 {break} } index} ", lines("0", "0", "1", "2", "0", "1", "0", "1", "2", "1"))
  runTestCase("2 times {index; 4 times { index; if index = 1 {continue} } index} ", lines("0", "0", "1", "2", "3", "0", "1", "0", "1", "2", "3", "1"))
  runTestCase(" 5 times {if index % 2 = 0 { continue} index} ", lines("1", "3"))
  runTestCase(" 5 times {if index % 2 = 0 { continue} else if index = 4 {break; } index} ", lines("1", "3"))
  runTestCase(" 5 times {if index % 2 = 0 { continue} else if index = 3 {break; } index} ", "1")
  runTestCase(" 34 times { break; 3} 22", "22")
  runTestCase(" 34 times { continue; 3} 21", "21")
  runTestCase("2,3, 4{ this; if this = 3 {break}  }  ", lines("2", "3"))
  runTestCase("2,3, 4{ if this = 3 {continue} this }  ", lines("2", "4"))
  runTestCase(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {break}  } } ", lines("g", "2", "3", "i", "2", "3"))
  runTestCase(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {continue}  } } ", lines("g", "2", "3", "4",  "i", "2", "3", "4"))
  runTestCase(" 'g', 'i' { this; 2,3, 4{ if this = 3 {continue} this } } ", lines("g", "2", "4", "i", "2", "4"))
  runTestCase(" 2 april 2010, 21 june 2012, 21 july 2006, newYear(2005) { this.year - this.day } ", lines("2008", "1991", "1985", "2004"))
  runTestCase(" 2 april 2010, 21 june 2012, 21 july 2006, newYear(2005) { if this.day = 21 {continue} this.year;  } ", lines("2010", "2005"))
  runTestCase(" 2 april 2010, 21 june 2012, 21 july 2006, newYear(2005) { if this.month = july {break} this.month;  } ", lines("4", "6"))
  runTestCase("3,5, 7 { 2,4, 6,8 { if this >= 5.5 and this <= 6.23 { break} this }  }  ", lines("2", "4", "2", "4","2", "4"))
  runTestCase("3,5, 7 { 2,4, 6,8 { this; if this >= 5.5 and this <= 6.23 { break} }  }  ", lines("2", "4", "6", "2", "4", "6","2", "4", "6"))
  runTestCase("3,5, 7 { 2,4, 6,8 { if this >= 5.5 and this <= 6.23 { continue} this }  }  ", lines("2", "4", "8", "2", "4", "8","2", "4", "8"))
  runTestCase("3,5 { 2,4, 6,8 { this; if this >= 5.5 and this <= 6.23 { continue} }  }  ", lines("2", "4", "6", "8", "2", "4","6", "8"))
  runTestCase("a = 0.4; while a < 3 { a; a++; }  ", lines("0.4", "1.4", "2.4"))
  runTestCase("a = 0.4; while a < 3 { index; a++; }  ", lines("0", "1", "2"))
  runTestCase("a = 1; while a < 3 { a; a++; }  ", lines("1", "2"))
  runTestCase("a = 1; while a < 6 { a++; a}  ", lines("2", "3", "4", "5", "6"))
  runTestCase("a = 1; while a < 6 { a++; if a = 4 {break} a}  ", lines("2", "3"))
  runTestCase("a = 1; while a < 6 { a++; if a = 4 {continue } a}  ", lines("2", "3", "5", "6"))
  runTestCase("a = 'c'; while a != 'caaaa' { a += 'a' ; a}  ", lines("ca", "caa", "caaa", "caaaa"))
  runTestCase("a = 'c'; while a != 'caaaa' { a += 'a' ; if index = 1{ continue} a}  ", lines("ca", "caaa", "caaaa"))
  runTestCase("a = 'c'; while a != 'caaaa' { a += 'a' ; if index = 1{ break} a}  ", "ca")
  runTestCase("a = 'c'; while a != 'caaaa' { a += 'a' ; if length(a) = 3 { continue} a}  ", lines("ca", "caaa", "caaaa"))
  runTestCase("a = 'c'; while a != 'caaaa' { a += 'a' ; if length(a) % 2 = 0 { continue} a}  ", lines("caa", "caaaa"))

  runTestCase("inside 'defchain' { recursivefiles order by name asc { name } }", lines("a", "b", "c", "gg", "i", "ko", "z"))
  runTestCase("inside 'defchain' { index; recursivefiles order by name asc { index }; index }", lines("0", "0", "1", "2", "3", "4", "5", "6", "0"))
  runTestCase("inside 'defchain' { recursivefiles order by name desc {name + ' ' +  depth} }", lines("z 2", "ko 1", "i 3", "gg 2", "c 0", "b 0", "a 0"))
  runTestCase("inside 'defchain' { recursivefiles order by name desc where depth % 2 = 1{name + ' ' +  depth} }", lines("ko 1", "i 3"))
  runTestCase("inside 'defchain' { recursivefiles where depth in 2, 3 order by name desc {name + ' ' +  depth} }", lines("z 2", "i 3", "gg 2"))
  runTestCase("inside 'defchain' { recursivefiles order by depth desc, name desc {name} }", lines("i", "z", "gg", "ko", "c", "b", "a"))
  runTestCase("inside 'defchain' { recursivefiles order by depth desc, name desc {index} }", lines("0", "1", "2", "3", "4", "5", "6"))
  runTestCase("inside 'defchain' { recursivefiles order by depth desc, name desc {depth} }", lines("3", "2", "2", "1", "0", "0", "0"))
  runTestCase("inside 'defchain' { recursivedirectories order by depth desc, name desc {name[0]} }", lines("u", "a", "d"))
  runTestCase("inside 'defchain' { recursivedirectories order by depth desc, name desc {index} }", lines("0", "1", "2"))
  runTestCase("inside 'defchain' { recursivedirectories order by depth desc, name desc {depth} }", lines("2", "1", "0"))
  runTestCase("inside 'defchain' { ** order by depth desc, name desc {name} }", lines("i", "z", "u", "gg", "ko", "aa", "ddd", "c", "b", "a"))
  runTestCase("inside 'defchain' { ** order by depth desc, name desc {index} }", lines("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
  runTestCase("inside 'defchain' { ** order by depth desc, name desc {depth} }", lines("3", "2", "2", "2", "1", "1", "0", "0", "0", "0"))
  runTestCase("inside 'defchain' { * order by depth desc, name desc {name} }", lines("ddd", "c", "b", "a"))
  runTestCase("inside 'defchain' { * order by depth desc, name desc {index} }", lines("0", "1", "2", "3"))
  runTestCase("inside 'defchain' { * order by depth desc, name desc {depth} }", lines("0", "0", "0", "0"))
  runTestCase("inside 'defchain' { recursivefiles where length(this) = 12 {fullname} }", "z.txt")
  runTestCase("inside 'defchain' { recursivefiles where length(this) = 14 and isDirectory {fullname}  } 0", "0")
  runTestCase("inside 'defchain' { recursivefiles where length(this) = 14 and isFile {fullname} } ", "i.txt")
  runTestCase("inside 'defchain' { ** where length(this) = 14 and isFile {fullname} } ", "i.txt")
  runTestCase("inside 'defchain' { ** where length(this) = 8 and isFile {fullname};7 } ", "7")
  runTestCase("inside 'defchain' { ** where length(this) = 8 and isDirectory {fullname} } ", "u")
  runTestCase("inside 'defchain' { ** where length(this) = 8 and isDirectory {name(parent)} } ", "aa")
  runTestCase("inside 'defchain' { * where length(this) = 3 {name+name} } ", "dddddd")
  runTestCase("inside 'defchain' { ** where length(this) = 3 {repeat(name + ' ', 3)} } ", "ddd ddd ddd ")
  runTestCase("inside 'defchain' { recursivefiles where length(name) = 2 and name[1] != 'g' { name} }", "ko")
  runTestCase("inside 'defchain' { recursiveDirectories order by name asc { name } }", lines("aa", "ddd", "u"))
  runTestCase("inside 'defchain' { recursiveDirectories where depth = 1 { name   } }", "aa")
  runTestCase("inside 'defchain' { recursiveFiles where depth = 1 { name} }", "ko")
  runTestCase("inside 'defchain' { count(** where depth = 1) }", "2")
  runTestCase("inside 'defchain' { count(** where depth != 1) }", "8")
  runTestCase("inside 'defchain' { count(**) }", "10")
  runTestCase("inside 'defchain' { count((recursiveFiles, recursiveDirectories)) }", "10")
  runTestCase("inside 'defchain' { count(*) }", "4")
  runTestCase("inside 'defchain' { count(** where depth = 0) }", "4")
  runTestCase("inside 'defchain' { count(** where depth = 2) }", "3")
  runTestCase("inside 'defchain' { count(** where depth >= 2) }", "4")
  runTestCase("inside 'defchain' { directories where anyInside(files); name }", lines("ddd", "defchain"))
  runTestCase("inside 'defchain' { * where anyInside(files); name }", lines("ddd", "defchain"))
  runTestCase("inside 'defchain' { directories where anyInside(directories where empty); name }", "defchain")
  runTestCase("inside 'defchain' { directories where anyInside(files where extension = 'pdf'); name }", "defchain")
  runTestCase("inside 'defchain' { directories where anyInside(recursiveFiles where fullname = 'i' + '.txt') }", "ddd")
  runTestCase("inside 'defchain' { directories where anyInside(directories where not empty); name }", lines("ddd", "defchain"))
  runTestCase("inside 'defchain' { recursivedirectories where not anyInside(files where length(name) = 1) }", "ddd")
  runTestCase("inside 'defchain' { recursivedirectories where not anyInside(directories ) { name} }", "u")
  runTestCase("inside 'defchain' { recursivedirectories where anyInside(directories) order by name {name} }", lines("aa", "ddd"))
  runTestCase("inside 'defchain' { ** where anyInside(directories) order by name {name} }", lines("aa", "ddd"))
  runTestCase("inside 'defchain' { ** where anyInside(files where name = 'z') limit 8 skip -3 { name} }", "aa")
  runTestCase("inside 'defchain' { ** where existsInside('z.txt') { name[0] + name[1] } }", "aa")
  runTestCase("inside 'defchain' { ** where existsInside('i.txt') { name } }", "u")
  runTestCase("inside 'defchain' { ** where existsInside('aa') { name } }", "ddd")
  runTestCase("inside 'defchain' { ** where existsInside('aaj') { name } 77 } ", "77")
  runTestCase("inside 'defchain' { recursivedirectories where existInside(('aa', 'ko.txt')) { name } }", "ddd")
  runTestCase("inside 'defchain' { recursivedirectories where existInside(('aa', 'ko')) { name } ; 7 }", "7")
  runTestCase("inside 'defchain' { size(recursivefiles) }", "41")
  runTestCase("inside 'defchain' { size(directories) }", "23")
  runTestCase("inside 'defchain' { size(files) }", "18")
  runTestCase("inside 'defchain' { size(recursiveDirectories where name = 'aa') }", "19")
  runTestCase("inside 'defchain' { count(recursiveFiles where size = 6 ) }", "3")
  runTestCase("inside 'defchain' { 'juy.png', (files order asc) }", lines("juy.png", "a.txt", "b.txt", "c.txt"))
  runTestCase("inside 'defchain' { 'juy.png', (files order desc) }", lines("juy.png", "c.txt", "b.txt", "a.txt"))
  runTestCase("inside 'defchain' { 'juy.png', (files order asc) { index } }", lines("0", "1", "2", "3"))
  runTestCase("inside 'defchain' { 'juy.png', files { index } }", lines("0", "1", "2", "3"))
  runTestCase("inside 'defchain' { files, 'juy.png' { index } }", lines("0", "1", "2", "3"))
  runTestCase("inside 'defchain' { (files order asc), 'juy.png', (files order desc) }", lines("a.txt", "b.txt", "c.txt", "juy.png", "c.txt", "b.txt", "a.txt"))
  runTestCase("inside 'defchain' { (files order asc), 'juy.png', (files order desc) { index } }", lines("0", "1", "2", "3", "4", "5", "6"))
  runTestCase("inside 'defchain' { (files order asc), 'juy.png', (files order desc) { depth } }", lines("0", "0", "0", "0", "0", "0", "0"))
  runTestCase("inside 'defchain' { directories, directories, 'joo' }", lines("ddd", "ddd", "joo"))
  runTestCase("inside 'defchain' { directories, directories, 'joo' {index +1000.5} }", lines("1000.5", "1001.5", "1002.5"))
  runTestCase("inside 'defchain' { 3, (recursiveDirectories where name = 'aa'), 4 {depth } }", lines("0", "1", "0"))
  runTestCase("inside 'defchain' { recursiveDirectories where name = 'aa'{depth; 'a.txt' {depth }; depth} }", lines("1", "0", "1"))
  runTestCase("inside 'defchain' { recursiveDirectories where name = 'aa'{depth; directories {depth }; depth} }", lines("1", "0", "1"))
  runTestCase("inside 'defchain' { recursiveDirectories where name = 'aa'{index; 'a.txt', 'b.txt' { index}; index} }", lines("0", "0", "1", "0"))
  runTestCase("inside 'defchain' { recursiveDirectories where name = 'aa'{name; 'a.txt', 'b.txt' { name}; name} }", lines("aa", "a", "b", "aa"))
  runTestCase("inside 'defchain' { inside recursiveDirectories where name = 'aa'{depth; 'a.txt' {depth }; depth} }", lines("1", "0", "1"))
  runTestCase("inside 'defchain' { inside recursiveDirectories where name = 'aa'{index; 'a.txt', 'b.txt' { index}; index} }", lines("0", "0", "1", "0"))
  runTestCase("inside 'defchain' { inside recursiveDirectories where name = 'aa'{name; 'a.txt', 'b.txt' { name}; name} }", lines("aa", "a", "b", "aa"))
  runTestCase(" inside 'defchain' { files { if index = 1 { break } print index}  } ", "0")
  runTestCase(" inside 'defchain' { files { if index = 1 { continue } print index}  } ", lines("0", "2"))
  runTestCase("6; inside 'defchain' { break; files { if index = 1 { break } print index}  } ", "6")
  runTestCase("2; inside 'defchain' { continue; files { if index = 1 { break } print index}  } ", "2")
  runTestCase(" inside 'defchain' { files order asc skip 1  } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc skip 0  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { 'nothing';  files order asc skip 3  } ", "nothing")
  runTestCase(" inside 'defchain' { 'nothing';  files order asc skip 32  } ", "nothing")
  runTestCase(" inside 'defchain' { 'nothing';  files order asc skip 323232  } ", "nothing")
  runTestCase(" inside 'defchain' { files order asc skip 1.5  } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc skip 1.999999  } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc skip -2  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc skip -0.01  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc limit 10  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc limit 3  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc limit 2  } ", lines("a.txt", "b.txt"))
  runTestCase(" inside 'defchain' { files order asc limit 2.9999  } ", lines("a.txt", "b.txt"))
  runTestCase(" inside 'defchain' { files order asc limit 0.87  } 'nada' ", "nada")
  runTestCase(" inside 'defchain' { files order asc limit 0  } 'nada' ", "nada")
  runTestCase(" inside 'defchain' { files order asc limit -23  } 'nada' ", "nada")
  runTestCase(" inside 'defchain' { files order asc every 2  } ", lines("a.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every 3  } ", lines("a.txt"))
  runTestCase(" inside 'defchain' { files order asc every 12345  } ", lines("a.txt"))
  runTestCase(" inside 'defchain' { files order asc skip 1 every 12345  } ", lines("b.txt"))
  runTestCase(" inside 'defchain' { files order asc skip -123 every -125  } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every 1 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every 0.3 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every 0 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every -3 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc every -4 skip 0.5 * 2 } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 3 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 4 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 6.8 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 20000 } ", lines("a.txt", "b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 2 } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 2.001 } ", lines("b.txt", "c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 1 } ", lines("c.txt"))
  runTestCase(" inside 'defchain' { files order asc skip 1 final 1 } ", lines("c.txt"))
  runTestCase(" inside 'defchain' { files order asc final 0 } 'nothing' ", lines("nothing"))
  runTestCase(" inside 'defchain' { files order asc final 2-12 } 'nothing2' ", lines("nothing2"))
  runTestCase(" inside 'defchain' { files order asc final 2 limit 1 } ", lines("b.txt"))
  runTestCase(" inside 'defchain' { files order asc final 3 limit 2 } ", lines("a.txt", "b.txt"))

  runTestCase(" 'a.txt' {  exists; size }  ", lines("1", "47"))
  runTestCase("countInside(files, 'many texts') ", "30")
  runTestCase("inside 'many texts' { count (files) } ", "30")
  runTestCase("inside 'many texts' { count (files where extension = 'txt') }", "30")
  runTestCase("inside 'many texts' { count (files where extension != 'txt') }", "0")
  runTestCase("inside 'many texts' { count (files where extension = 'jpg') }", "0")
  runTestCase("inside 'many texts' { size (files) } ", "810")
  runTestCase("inside 'many texts' { size (directories) } ", "0")
  runTestCase("inside 'many texts' { files order by name asc limit 5 } ", lines("ex_01.txt", "ex_02.txt", "ex_03.txt", "ex_04.txt", "ex_05.txt"))
  runTestCase("inside 'many texts' { files order by name asc limit 3 } ", lines("ex_01.txt", "ex_02.txt", "ex_03.txt"))
  runTestCase("inside 'many texts' { files order by name desc limit 5 } ", lines("ex_30.txt", "ex_29.txt", "ex_28.txt", "ex_27.txt", "ex_26.txt"))
  runTestCase("inside 'many texts' { files order by name desc limit 3 } ", lines("ex_30.txt", "ex_29.txt", "ex_28.txt"))
  runTestCase("inside 'many texts' { files order by name desc every 4 limit 5 } ", lines("ex_30.txt", "ex_26.txt", "ex_22.txt", "ex_18.txt", "ex_14.txt"))
  runTestCase("inside 'many texts' { files order by name desc skip 2 every 4 limit 5 } ", lines("ex_28.txt", "ex_24.txt", "ex_20.txt", "ex_16.txt", "ex_12.txt"))
  runTestCase("inside 'many texts' { files order by name desc skip 1 every 4 limit 5 } ", lines("ex_29.txt", "ex_25.txt", "ex_21.txt", "ex_17.txt", "ex_13.txt"))
  runTestCase("inside 'many texts' { files order by name desc every 4 limit 5 skip 1 } ", lines("ex_26.txt", "ex_22.txt", "ex_18.txt", "ex_14.txt"))
  runTestCase("inside 'many texts' { files order by name desc where right(name, 1) = 5 } ", lines("ex_25.txt", "ex_15.txt", "ex_05.txt"))
  runTestCase("inside 'many texts' { files order by name desc limit 1 { name, fullname, extension } }", lines("ex_30", "ex_30.txt", "txt"))
  runTestCase("inside 'many texts' { files order by name desc limit 1 { name(parent) } } ", "many texts")
  runTestCase("inside 'many texts' { files order by name desc limit 1 { length(name) } }", "5")
  runTestCase("inside 'many texts' { files order by name desc where name[3] = 1 and name[4] = 2 } ", "ex_12.txt")
  runTestCase("inside 'many texts' { files order by name asc final 5 }", lines("ex_26.txt", "ex_27.txt", "ex_28.txt", "ex_29.txt", "ex_30.txt"))
  runTestCase("inside 'many texts' { files order by name asc final 5 limit 4 }", lines("ex_26.txt", "ex_27.txt", "ex_28.txt", "ex_29.txt"))
  runTestCase("inside 'many texts' { files order by name asc final 5 every 2 }", lines("ex_26.txt", "ex_28.txt", "ex_30.txt"))
  runTestCase("inside 'many texts' { files order by name asc every 2 final 5 }", lines("ex_21.txt", "ex_23.txt", "ex_25.txt", "ex_27.txt", "ex_29.txt"))
  runTestCase("inside 'many texts' { files order by name asc skip 1 every 2 final 5 }", lines("ex_22.txt", "ex_24.txt", "ex_26.txt", "ex_28.txt", "ex_30.txt"))
  runTestCase("inside 'many texts' { files order by name asc skip 1 every 2 final 5 {index}}", lines("0", "1", "2", "3", "4"))
  runTestCase("inside 'many texts' { files order by name asc skip 1 every 2 final 5 {depth}}", lines("0", "0", "0", "0", "0"))
  runTestCase("inside 'many texts' { a= 0; files {if name[3] in 0,3 {a++}}; print a } ", "10")

  runTestCase("inside 'tree' { print '*.py' }", "test.py")
  runTestCase("print 'tree/*.py'", path("tree", "test.py"))
  runTestCase("inside 'tree' { print '*.js' order asc }", lines('038566.js', '274688.js', '483413.js', '593214.js', '646362.js', '917112.js'))
  (runTestCase("inside 'tree' { print '*.txt' order asc}", lines('012480.txt', '020217.txt', '047909.txt', '088310.txt', '105252.txt', 
  '210226.txt', '362312.txt', '449147.txt', '532624.txt', '558639.txt', '581940.txt', '917707.txt', '960542.txt', '987875.txt')))
  runTestCase("inside 'tree' { print '2*' order asc }", lines('210226.txt', '257953', '264026', '274688.js'))
  runTestCase("inside 'tree' { print '2*' order by isFile desc, name desc }", lines('274688.js', '210226.txt', '264026', '257953'))
  runTestCase("inside 'tree' { print '2*' order by isDirectory desc, name desc }", lines('264026', '257953', '274688.js', '210226.txt'))
  runTestCase("inside 'tree' { print '2*6' order asc }", '264026')
  runTestCase("inside 'tree' { print '012480.t*xt' order asc }", '012480.txt')
  runTestCase("inside 'tree' { print '2*0*6' order asc }", '264026')
  runTestCase("inside 'tree' { print '2*02*6' order asc }", '264026')
  runTestCase("inside 'tree' { print '2*4*6' order asc }", "264026")
  runTestCase("inside 'tree' { print '2*02*6.*txt' order asc }", "210226.txt")
  print("4")
  runTestCase("inside 'tree' { print '*2.*' order asc }", lines("105252.txt", "362312.txt", "646362.js", "917112.js", "960542.txt"))
  runTestCase("inside 'tree' { print '*14.*' order asc }", "593214.js")
  (runTestCase("inside 'tree' { print '*4*' order asc}", lines("012480.txt", "047909.txt", "264026", "274688.js", "449147.txt", 
  "483413.js", "532624.txt", "561442", "581940.txt", "593214.js", "646362.js", "674295", "960542.txt")))
  print("5")
  runTestCase("inside 'tree' { print '*4*7*' order asc }", lines("047909.txt", "449147.txt"))
  runTestCase("inside 'tree' { print '4*7*' order asc} ", "449147.txt")
  runTestCase("inside 'tree' { print '029719\*' order asc }", lines(path("029719", "011952.js"), path("029719", "636110.txt"), path("029719", "743013.txt")))
  runTestCase("inside 'tree' { print '029719\*.txt' order asc }", lines(path("029719", "636110.txt"), path("029719", "743013.txt")))
  runTestCase("inside 'tree' { print '029719\*.js' order asc }", path("029719", "011952.js"))
  print("6")
  runTestCase("inside 'tree' { print '029719/7*.txt' order asc }", path("029719", "743013.txt"))
  (runTestCase("inside 'tree' { print '029719\*\*7*' order asc }", lines(path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "877639", "057239.cpp"), path("029719", "877639", "690072.js"))))
  (runTestCase("inside 'tree' { print '029719\*\*' order asc } ", lines(path("029719", "286109", "080295"), path("029719", "286109", "215429.txt"), 
  path("029719", "286109", "626654.cpp"), path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "286109", "687411"), path("029719", "559227", "438292.txt"), path("029719", "559227", "488903"), 
  path("029719", "559227", "539553"), path("029719", "877639", "057239.cpp"), 
  path("029719", "877639", "402318"), path("029719", "877639", "690072.js"))))
  print("7")
  (runTestCase("inside 'tree' { print '029719\*\*' where isFile order asc }", lines(path("029719", "286109", "215429.txt"), 
  path("029719", "286109", "626654.cpp"), path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "559227", "438292.txt"), path("029719", "877639", "057239.cpp"), path("029719", "877639", "690072.js"))))
  (runTestCase("inside 'tree' { print '029719\*\*' where isDirectory order asc }", lines(path("029719", "286109", "080295"),
  path("029719", "286109", "687411"), path("029719", "559227", "488903"), 
  path("029719", "559227", "539553"), path("029719", "877639", "402318"),)))
  (runTestCase("inside 'tree' { print '029719\*\*2*' order asc }", lines(path("029719", "286109", "080295"), 
  path("029719", "286109", "215429.txt"), path("029719", "286109", "626654.cpp"), path("029719", "559227", "438292.txt"), 
  path("029719", "877639", "057239.cpp"), path("029719", "877639", "402318"), path("029719", "877639", "690072.js"))))
  print("8")
  (runTestCase("print 'tree/029719\*\*2*' order asc", lines(path("tree", "029719", "286109", "080295"), 
  path("tree", "029719", "286109", "215429.txt"), path("tree", "029719", "286109", "626654.cpp"), path("tree", "029719", "559227", "438292.txt"), 
  path("tree", "029719", "877639", "057239.cpp"), path("tree", "029719", "877639", "402318"), path("tree", "029719", "877639", "690072.js"))))
  runTestCase("inside 'tree' { print '*7*/*7*.cpp' order asc }", path("674295", "415734.cpp"))
  (runTestCase("inside 'tree' { print '*7*/*7*.txt' order asc }", lines(path("029719", "743013.txt"),path("674295", "486275.txt"),
  path("674295", "744449.txt"), path("674295", "757628.txt"), path("702035", "473853.txt"), path("702035", "711036.txt"), path("702035", "981307.txt"))))
  (runTestCase("inside 'tree' { print '*/*/*6*7*' order asc }", lines(path("029719", "286109", "660170.js"), path("029719", "286109", "677910.txt"), 
  path("029719", "286109", "687411"), path("029719", "877639", "690072.js"), path("264026", "786669", "396758"), path("561442", "413938", "560857.txt"))))
  (runTestCase("inside 'tree' { print '*/*/6*7*' order asc }", lines(path("029719", "286109", "660170.js"), 
  path("029719", "286109", "677910.txt"), path("029719", "286109", "687411"), path("029719", "877639", "690072.js"))))

  print("9")
  runTestCase("inside 'modificables' { 'existing_empty_dir' {exists } }", "1")
  runTestCase("inside 'modificables' { 'non_existing_empty_dir' {exists } }", "0")
  runTestCase("inside 'modificables' { 'existing_empty_dir' {isDirectory } }", "1")
  runTestCase("inside 'modificables' { 'existing_empty_dir' {isFile } }", "0")
  runTestCase("inside 'modificables' { 'non_existing_empty_dir' {isDirectory } }", "1")
  runTestCase("inside 'modificables' { 'non_existing_empty_dir' {isFile } }", "0")
  runTestCase("inside 'modificables' { '' {exists, isFile, isDirectory, length(path) } }", lines("0", "0", "0", "0"))
  runTestCase("inside 'modificables' { '?/?' {exists, isFile, isDirectory, length(path) } }", lines("0", "0", "0", "0"))
  runTestCase("inside 'modificables' { 'non_existing_dir' {exists, isFile, isDirectory } }", lines("0", "0", "1"))
  runTestCase("inside 'modificables' { 'non_existing_file.txt' {exists, isFile, isDirectory } }", lines("0", "1", "0"))
  runTestCase("inside 'modificables' { create 'existing_empty_dir'}", "Failed to create 'existing_empty_dir'")
  runTestCase("inside 'modificables' { force create 'existing_empty_dir'}", "Create directory 'existing_empty_dir'")
# runTestCase("inside 'modificables' { create 'non_existing_empty_dir'; delete 'non_existing_empty_dir'}", \
# lines("Create directory 'non_existing_empty_dir'", "Delete 'non_existing_empty_dir'"))
# runTestCase("inside 'modificables' { recreate 'rainbow.png' to 3 june 2020, 10:11:12 } inside 'modificables' { 'rainbow.png' {print creation}}", \
# lines("Recreate 'rainbow.png' to 3 June 2020, 10:11:12", "3 June 2020, 10:11:12"))
# runTestCase("inside 'modificables' { reaccess 'rainbow.png' to 4 june 2019, 9:05:01 } inside 'modificables' { 'rainbow.png' {print access}}", \
# lines("Reaccess 'rainbow.png' to 4 June 2019, 09:05:01", "4 June 2019, 09:05:01"))
# runTestCase("inside 'modificables' { remodify 'rainbow.png' to 12 april 2017, 14:12:34 } inside 'modificables' { 'rainbow.png' {print modification }}", \
# lines("Remodify 'rainbow.png' to 12 April 2017, 14:12:34", "12 April 2017, 14:12:34"))
# runTestCase("inside 'modificables' { 'a.txt' { print parent(path) = location }}", "1")





  expectSyntaxError("print first()")
  expectSyntaxError("print first(2,3,4)")
  expectSyntaxError("print last()")
  expectSyntaxError("print first(2,'fgh')")
  expectSyntaxError("print first(56)")
  expectSyntaxError("print first(21 april 2007)")
  expectSyntaxError("print last(56*4)")
  expectSyntaxError("print last('thi')")
  expectSyntaxError("print any(5 january 2011, 13:42)")
  expectSyntaxError("print any(5 years)")
  expectSyntaxError("print any(56)")
  expectSyntaxError("print any('56')")
  expectSyntaxError("print any('')")
  expectSyntaxError("print any()")
  expectSyntaxError("a = 2,'aa',4; print contains(a, 'aA', 17)")
  expectSyntaxError("a = 2,'aa',4; print contains(a)")
  expectSyntaxError("print contains()")
  expectSyntaxError("print startswith()")
  expectSyntaxError("print startswith(2)")
  expectSyntaxError("print startswith(2,3,4)")
  expectSyntaxError("print endsWith()")
  expectSyntaxError("print endswith(2)")
  expectSyntaxError("print ENDSWITH(2,3,4)")
  expectSyntaxError("print ENDSWITHs(2,'3')")
  expectSyntaxError("print absolute('aa44 ')")
  expectSyntaxError("print absolute()")
  expectSyntaxError("print absolute(5 april)")
  expectSyntaxError("print ceil(3,6 ,8)")
  expectSyntaxError("print ceil('5')")
  expectSyntaxError("print ceil(3, 5.3)")
  expectSyntaxError("print ceil(april 1996)")
  expectSyntaxError("print ceil()")
  expectSyntaxError("print count()")
  expectSyntaxError("print count(3)")
  expectSyntaxError("print count(3 days)")
  expectSyntaxError("print count(1 january 2000)")
  expectSyntaxError("print count('hey')")
  expectSyntaxError("print count('hey', 4)")
  expectSyntaxError("print count(2,3,4,5,6)")
  expectSyntaxError("print floor(3,6 ,8)")
  expectSyntaxError("print floor(3, 5.3)")
  expectSyntaxError("print floor(april 1996)")
  expectSyntaxError("print floor()")
  expectSyntaxError("print length()")
  expectSyntaxError("print length(5, 8)")
  expectSyntaxError("a = 2,4,5,6; print length(a)")
  expectSyntaxError("print number()")
  expectSyntaxError("print number('a', 8)")
  expectSyntaxError("print number(2,4,5,6)")
  expectSyntaxError("print power()")
  expectSyntaxError("print power(2)")
  expectSyntaxError("print power(2,4,5)")
  expectSyntaxError("print power(2,'4')")
  expectSyntaxError("print round()")
  expectSyntaxError("print round('2')")
  expectSyntaxError("print round(2,3)")
  expectSyntaxError("print sign()")
  expectSyntaxError("print sign(4 years)")
  expectSyntaxError("print sign(5, 8.3)")
  expectSyntaxError("print sqrt()")
  expectSyntaxError("print sqrt(2, 5)")
  expectSyntaxError("print sqrt(april 2005)")
  expectSyntaxError("print truncate()")
  expectSyntaxError("print truncate('truncate')")
  expectSyntaxError("print truncate(3, 2*9)")
  expectSyntaxError("print average()")
  expectSyntaxError("print average('t')")
  expectSyntaxError("print average(3,2,4,'g')")
  expectSyntaxError("print average(7 days, 8 april 1999)")
  expectSyntaxError("print christmas()")
  expectSyntaxError("print christmas('gh')")
  expectSyntaxError("print christmas(now)")
  expectSyntaxError("print christmas(2 days)")
  expectSyntaxError("print easter()")
  expectSyntaxError("print easter('gh')")
  expectSyntaxError("print easter(now)")
  expectSyntaxError("print easter(2 days)")
  expectSyntaxError("print date()")
  expectSyntaxError("print date(2, 6)")
  expectSyntaxError("print date(5,3,2010,7)")
  expectSyntaxError("print date(5,'thy',2010)")
  expectSyntaxError("print date(5 years,2,2011)")
  expectSyntaxError("print date(0,12,3 seconds)")
  expectSyntaxError("print date(5,55,'2012')")
  expectSyntaxError("print newyear()")
  expectSyntaxError("print newyear('fgh')")
  expectSyntaxError("print newyear(3, 7)")
  expectSyntaxError("print newyear(3 years)")
  expectSyntaxError("print time(3)")
  expectSyntaxError("print time(3, 7,7,6,5,4,4)")
  expectSyntaxError("print time(3, 7,7,6,5,4,4, 5)")
  expectSyntaxError("print time(3, 7,7,'ab',5,4)")
  expectSyntaxError("print time(5 days, 0,2010,0,5)")
  expectSyntaxError("print time(3, 3,3 april 2010,0,58)")
  expectSyntaxError("print time(33, 100 years,2010,0,0)")
  expectSyntaxError("print time(25, 4, 2045,0)")
  expectSyntaxError("print time(25, 4, 2045,0, '4')")
  expectSyntaxError("print time(25, 4, 2045,0, 4,4,2,1,1)")
  expectSyntaxError("print after()")
  expectSyntaxError("print after('f')")
  expectSyntaxError("print after('f', 'g', 'h')")
  expectSyntaxError("print after(files)")
  expectSyntaxError("print after(files, 'gh')")
  expectSyntaxError("print after((2,3,4), 'gh')")
  expectSyntaxError("print afterDigits()")
  expectSyntaxError("print afterDigits('123a') / afterDigits(23)")
  expectSyntaxError("print afterDigits('abce', 'a')")
  expectSyntaxError("print afterDigits(4,5,3)")
  expectSyntaxError("print afterLetters()")
  expectSyntaxError("print afterLetters(directories)")
  expectSyntaxError("print afterLetters('45k8', 5)")
  expectSyntaxError("print afterLetters('a', 'b', 'v')")
  expectSyntaxError("print before()")
  expectSyntaxError("print before('sdf')")
  expectSyntaxError("print before('sdf', 'hjghj', '56')")
  expectSyntaxError("print before(**)")
  expectSyntaxError("print before('fgh', '*.txt')")
  expectSyntaxError("print beforeDigits()")
  expectSyntaxError("print beforeDigits(recursiveDirectories)")
  expectSyntaxError("print beforeDigits('abce', 'a')")
  expectSyntaxError("print beforeDigits(4,5,3)")
  expectSyntaxError("print beforeDigits(5, files where empty)")
  expectSyntaxError("print beforeLetters()")
  expectSyntaxError("print beforeLetters(files)")
  expectSyntaxError("print beforeLetters('fdg', 'dfg')")
  expectSyntaxError("print beforeLetters(4 days, 5 days, 1 day)")
  expectSyntaxError("print binary()")
  expectSyntaxError("print binary(files)")
  expectSyntaxError("print binary(4 years)")
  expectSyntaxError("print binary(4, 5)")
  expectSyntaxError("print binary(4, 5,7)")
  expectSyntaxError("print binary(now)")
  expectSyntaxError("print binary('56')")
  expectSyntaxError("print capitalize()")
  expectSyntaxError("print capitalize(files)")
  expectSyntaxError("print capitalize(4, 5)")
  expectSyntaxError("print capitalize('sdf', 'dfg', 'jk')")
  expectSyntaxError("print concatenate()")
  expectSyntaxError("print concatenate(2 3 2)")
  expectSyntaxError("print digits()")
  expectSyntaxError("print digits(files)")
  expectSyntaxError("print digits('gh', 'pol')")
  expectSyntaxError("print digits(3,2,1,3,2)")
  expectSyntaxError("print fill()")
  expectSyntaxError("print fill('a')")
  expectSyntaxError("print fill(4)")
  expectSyntaxError("print fill(4)")
  expectSyntaxError("print fill('a', 'b')")
  expectSyntaxError("print fill(5, 'b')")
  expectSyntaxError("print fill(5, 2,1)")
  expectSyntaxError("print fill(5, 2,1,67)")
  expectSyntaxError("print hex()")
  expectSyntaxError("print hex(12,45)")
  expectSyntaxError("print hex(12,45,5)")
  expectSyntaxError("print hex('sd')")
  expectSyntaxError("print hex('2')")
  expectSyntaxError("print hex(6 weeks)")
  expectSyntaxError("print hex(2 february 2021)")
  expectSyntaxError("print hex(files where extension != 'txt')")
  expectSyntaxError("print join()")
  expectSyntaxError("print join(files)")
  expectSyntaxError("print join((2,3,4),(2,3,4) )")
  expectSyntaxError("print join((2,3,4), directories )")
  expectSyntaxError("print join((2,3,4), 6, 8 )")
  expectSyntaxError("print left()")
  expectSyntaxError("print left('df')")
  expectSyntaxError("print left('df', 'ho')")
  expectSyntaxError("print left(2, 'ho')")
  expectSyntaxError("print left(files, 2)")
  expectSyntaxError("print left('df', 2, 4)")
  expectSyntaxError("print left('df', 2 days)")
  expectSyntaxError("print letters()")
  expectSyntaxError("print letters(45, 1)")
  expectSyntaxError("print letters(files)")
  expectSyntaxError("print letters('fg','54h', 'pol')")
  expectSyntaxError("print lower()")
  expectSyntaxError("print lower(435, 11)")
  expectSyntaxError("print lower(*)")
  expectSyntaxError("print lower('fg','54h')")
  expectSyntaxError("print monthname()")
  expectSyntaxError("print monthname(3 days)")
  expectSyntaxError("print monthname('april')")
  expectSyntaxError("print monthname(files)")
  expectSyntaxError("print monthname(3, 4)")
  expectSyntaxError("print path()")
  expectSyntaxError("print path(recursiveDirectories)")
  expectSyntaxError("print path('this', files)")
  expectSyntaxError("print repeat()")
  expectSyntaxError("print repeat('sd')")
  expectSyntaxError("print repeat('sd', 'ui')")
  expectSyntaxError("print repeat('sd', 2, 2)")
  expectSyntaxError("print repeat(files, 2)")
  expectSyntaxError("print repeat(2, files)")
  expectSyntaxError("print replace()")
  expectSyntaxError("print replace('a')")
  expectSyntaxError("print replace('a', 'b')")
  expectSyntaxError("print replace('a', files)")
  expectSyntaxError("print replace('a', 'b', 'c', 'd')")
  expectSyntaxError("print replace('a', 'b', 'c', 'd', 'e')")
  expectSyntaxError("print replace('a', 'b', files)")
  expectSyntaxError("print replace(directories, 'b', 'c')")
  expectSyntaxError("print replace('a', *, 'c')")
  expectSyntaxError("print reverse()")
  expectSyntaxError("print reverse(3, 2)")
  expectSyntaxError("print reverse(directories)")
  expectSyntaxError("print right()")
  expectSyntaxError("print right('df')")
  expectSyntaxError("print right('df', 'ho')")
  expectSyntaxError("print right(2, 'ho')")
  expectSyntaxError("print right(files, 2)")
  expectSyntaxError("print right('df', 2, 4)")
  expectSyntaxError("print right('df', 2 days)")
  expectSyntaxError("print roman()")
  expectSyntaxError("print roman('tj')")
  expectSyntaxError("print roman(4 years)")
  expectSyntaxError("print roman(4, 2)")
  expectSyntaxError("print roman(4, 2, 8, 22)")
  expectSyntaxError("print roman(directories)")
  expectSyntaxError("print string()")
  expectSyntaxError("print string(files)")
  expectSyntaxError("print string(4 days, 1 year)")
  expectSyntaxError("print string(2,3,5)")
  expectSyntaxError("print string((2,3,5))")
  expectSyntaxError("print substring()")
  expectSyntaxError("print substring('sd')")
  expectSyntaxError("print substring('sd', 'hgh')")
  expectSyntaxError("print substring('sd', 'hgh', 'hj')")
  expectSyntaxError("print substring(2, 'hgh', 'hj')")
  expectSyntaxError("print substring(2, 'hgh', files)")
  expectSyntaxError("print substring(6 days, 2, 'hgh', files)")
  expectSyntaxError("print substring(2, directories where hidden, 67)")
  expectSyntaxError("print substring(files, '12', 67)")
  expectSyntaxError("print substring('gh', '12', 67, 5)")
  expectSyntaxError("print substring('gh', '12', 67, 5,8, 3)")
  expectSyntaxError("print trim()")
  expectSyntaxError("print trim(files limit 6)")
  expectSyntaxError("print trim(5,2)")
  expectSyntaxError("print upper()")
  expectSyntaxError("print upper(435, 11)")
  expectSyntaxError("print upper((435, 11))")
  expectSyntaxError("print upper(*)")
  expectSyntaxError("print upper('fg','54h')")
  expectSyntaxError("print weekDayName()")
  expectSyntaxError("print weekDayName('gh')")
  expectSyntaxError("print weekDayName(files)")
  expectSyntaxError("print weekDayName(2, 6)")
  expectSyntaxError("print weekDayName(now, today)")
  expectSyntaxError("print characters()")
  expectSyntaxError("print characters(2,4)")
  expectSyntaxError("print characters(('a', 'b'))")
  expectSyntaxError("print characters(files)")
  expectSyntaxError("print numbers()")
  expectSyntaxError("print numbers(2,4)")
  expectSyntaxError("print numbers(('a', 'b'))")
  expectSyntaxError("print numbers(files)")
  expectSyntaxError("print split()")
  expectSyntaxError("print split('a')")
  expectSyntaxError("print split('a', 'ho', 'kl')")
  expectSyntaxError("print split('a', files)")
  expectSyntaxError("print split(directories, 'kl')")
  expectSyntaxError("print words()")
  expectSyntaxError("print words(2,4)")
  expectSyntaxError("print words(('a', 'b'))")
  expectSyntaxError("print words(directories)")
  expectSyntaxError("u = 6,1,2,4,3,5; print u skip")
  expectSyntaxError("u = 6,1,2,4,3,5; print u limit")
  expectSyntaxError("u = 6,1,2,4,3,5; print u where")
  expectSyntaxError("u = 6,1,2,4,3,5; print u order")
  expectSyntaxError("u = 6,1,2,4,3,5; print u final")
  expectSyntaxError("u = 6,1,2,4,3,5; print u final files")
  expectSyntaxError("u = 6,1,2,4,3,5; print u skip 'g' ")
  expectSyntaxError("u = 6,1,2,'4',3,5; print u skip 'g' ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u final 'f' ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u where true limit 'g' ")
  expectSyntaxError("u = 6,1,2,'4',3,5; print u limit 3 every 'g' ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u where name != 'g' ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u where 3 days ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u skip 4 where 18 ")
  expectSyntaxError("u = 6,1,2,4,3,5; print u limit order")
  expectSyntaxError("u = 6,1,2,4,3,5; print u where true final '12' ")
  expectSyntaxError("a = 5; b = '3'; print a * b")
  expectSyntaxError("a = 5; print a[0]")
  expectSyntaxError("a = 5,2; print a 0]")
  expectSyntaxError("a = 5,2; print a [0]]")
  expectSyntaxError("3 times { print } ; print index  ")
  expectSyntaxError("  'ha' { this 3 times { print this } this }  ")
  expectSyntaxError("3 times { h = 5 } print h  ")
  expectSyntaxError("while false { h = 5 } print h  ")
  expectSyntaxError("4.88 times { if index != 2  }   ")
  expectSyntaxError("4.88 times { if index {print index * 10} } ")
  expectSyntaxError("4.88 times { if {print index * 10} } ")
  expectSyntaxError("4.88 times { while {print index * 10} } ")
  expectSyntaxError("k = 'abcde'; k[] = '89'; k  ")
  expectSyntaxError("k = 'abcde'; k[k] = 'hj'; k  ")
  expectSyntaxError("k = 'abcde'; k[3 years] = '3'; k  ")
  expectSyntaxError("k = 'abcde'; k[3, 4] = '2'; k  ")
  expectSyntaxError("i = 'jut'; i -= 't'; i")
  expectSyntaxError("i = 'jut'; i++; i")
  expectSyntaxError("i = 'jut'; i-- ;i")
  expectSyntaxError("i = 'jut'; i *= 2; i")
  expectSyntaxError("i = 'jut'; i /= 2; i")
  expectSyntaxError("i = 'jut'; i -= 2; i")
  expectSyntaxError("i = 'jut'; i %= 2; i")
  expectSyntaxError("k = 'abcde'; k[2] += 89; k  ")
  expectSyntaxError("k = 'abcde'; k[2] --; k  ")
  expectSyntaxError("b = false; b = false not or b; b")
  expectSyntaxError("b = false; b = false not; b")
  expectSyntaxError("b = false; b = 3; b")
  expectSyntaxError("b = false; b = 3,4,7; b")
  expectSyntaxError("b = false; b = 8 years; b")
  expectSyntaxError("b = false; b = 8 april 2014; b")
  expectSyntaxError("b = false; b = january 2010, 8 april 2014; b")
  expectSyntaxError("b = false; b = 'ba'; b")
  expectSyntaxError("b = false; b = 'ba', 'lo'; b")
  expectSyntaxError("b = false; b = files; b")
  expectSyntaxError("b = false; b++")
  expectSyntaxError("b = false; b /= 45")
  expectSyntaxError("b = false; b *= 1")
  expectSyntaxError("b = false; b &= true")
  expectSyntaxError("b = false; b %= false")
  expectSyntaxError("b = false; b--")
  expectSyntaxError("if true { 43 ; 2; if} else { 3} 5 ")
  expectSyntaxError("3 times {if true {3;2} 1} else {3}")
  expectSyntaxError("3 times {if true {3;2} 4; else {} 1}")
  expectSyntaxError(" 'ta', 'ha', 'na' {if true {3;this} else {else {4}} this }")
  expectSyntaxError("if true {if false {else if true {67}} else {2}1} else {if true {3} else {5}}")
  expectSyntaxError("else {7}")
  expectSyntaxError("else if true {7}")
  expectSyntaxError("if { 7 }")
  expectSyntaxError("if true { 7")
  expectSyntaxError("if true 7")
  expectSyntaxError("if true 7 } ")
  expectSyntaxError("if 1 { 6} ")
  expectSyntaxError("if true or false { 6} else true { 4}")
  expectSyntaxError("if true or false { 6} 4; else { 4}")
  expectSyntaxError("if true { 6} else {} else if true { 4}")
  expectSyntaxError("3 times { if true or false { 6} 4; else { 4} }")
  expectSyntaxError("3 times { if true {1} } else {4}")
  expectSyntaxError("'a', 'b' { 9 } else {4}")
  expectSyntaxError("if true or false { 6} else else else { 4}")
  expectSyntaxError("if true or false { 6} else if { 4}")
  expectSyntaxError("if true or false { 6} else if 0 { 4}")
  expectSyntaxError("3,4,5 { if true {4}} else if true {43} ")
  expectSyntaxError("3,4,5 { 'hello' } else  {'world'} ")
  expectSyntaxError("if true {else {34}} ")
  expectSyntaxError("if true {else if true {34}} ")
  expectSyntaxError("if true {3} else 2 ")
  expectSyntaxError("if true {3} else ")
  expectSyntaxError("s = 'hello'; s = 3,2; s")
  expectSyntaxError("s = 'hello'; s = 'hello', 'world'; s")
  expectSyntaxError("s = 'hello'; s = files; s")
  expectSyntaxError("s = 'hello'; s[2] = files; s")
  expectSyntaxError("s = 'hello'; s[2] = 4,3; s")
  expectSyntaxError("s = 'hello'; s[2] = ; s")
  expectSyntaxError("s = 'hello'; s[4 years] = 'a'; s")
  expectSyntaxError("s = 'hello'; s['2'] = 4; s")
  expectSyntaxError("s = 'hello'; s--; s")
  expectSyntaxError("s = 'hello'; s++; s")
  expectSyntaxError("s = 'hello'; s-= 'he'; s")
  expectSyntaxError("s = 'hello'; s*= 2; s")
  expectSyntaxError("s = 'hello'; s /= 2; s")
  expectSyntaxError("s = 'hello'; s %= 2; s")
  expectSyntaxError("nl = 2,3,4; nl[0] = 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl[0] += 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl += 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl /= 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl *= 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl %= 5; print nl")
  expectSyntaxError("nl = 2,3,4; nl++; print nl")
  expectSyntaxError("nl = 2,3,4; nl--; print nl")
  expectSyntaxError("li = 'b', 'c', 'd'; li[0] = 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li[0] += 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li += 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li /= 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li *= 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li %= 5; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li++; print li")
  expectSyntaxError("li = 'b', 'c', 'd'; li--; print li")
  expectSyntaxError("x = 17; true : x ? ")
  expectSyntaxError("x = 17; true ? x : ")
  expectSyntaxError("x = 17; true ? : 16")
  expectSyntaxError("x = 17; ? x : 16")
  expectSyntaxError("x = 17; ? x : ")
  expectSyntaxError("x = 17; true ? ")
  expectSyntaxError("x = 17; ? x")
  expectSyntaxError("x = 17; ? ")
  expectSyntaxError("x = 17; : ? ")
  expectSyntaxError("x = 17; true ? x : true : true ? 20 : 3")
  expectSyntaxError("x = 17; ? x : true ? 6 : true ? 20 : 3")
  expectSyntaxError("x = 17; x : true ? 6 : true ? 20 : 3")
  expectSyntaxError("x = 17; true ? x : ? 6 : true ? 20 : 3")
  expectSyntaxError("x = 17; true ? x : true ? 6 : true ?  : 3")
  expectSyntaxError("x = 17; true ? x : true ? :  ? 20 : 3")
  expectSyntaxError("x = 17; true ? x : true ? 6 : true ? 20 : ")
  expectSyntaxError("x = 17; true : true ? 6 : true ? 20 : 3")
  expectSyntaxError("x = 17; true : x ? true ? 5")
  expectSyntaxError("x = 17; ? x : true ? 5")
  expectSyntaxError("x = 17; true : true ? 5")
  expectSyntaxError("x = 17; true ? x : true ?")
  expectSyntaxError("x = 17; true ? : true ? 5")
  expectSyntaxError("x = 17; true ? x : ? 5")
  expectSyntaxError("x = 17; true ? x : true ?:? 5")
  expectSyntaxError("4, (6, 8, 5, 2+6) where false + 7 ")
  expectSyntaxError("a = 5; break")
  expectSyntaxError("a = 5; continue")
  expectSyntaxError("3 times { 6 +3}; break")
  expectSyntaxError("3 times { 6 +3}; continue")
  expectSyntaxError("files { print}; break")
  expectSyntaxError("files { print}; continue")
  expectSyntaxError("break; 3,5 { break }")
  expectSyntaxError("continue { 'hello world' }")
  expectSyntaxError(" 'g', 'i' { this; 2,3, 4{ this; if this = 3 {break}  } } this ")
  expectSyntaxError(" 2 april 2010, 21 june 2012, 21 july 2006, newYear(2005) { this.year - this.day } this.day ")
  expectSyntaxError("a = 0.4; while a < 3 { this; a++; }  ")

  expectSyntaxError("inside 'defchain' { 7*+4}")
  expectSyntaxError("inside 'defchain' { *+ }")
  expectSyntaxError("inside 'defchain' { *+* }")
  expectSyntaxError("inside 'defchain' { *** }")
  expectSyntaxError("inside 'defchain' { directories where anyInside() }")
  expectSyntaxError("inside 'defchain' { directories where anyInside('files') }")
  expectSyntaxError("inside 'defchain' { directories where anyInside(4 years) }")
  expectSyntaxError("inside 'defchain' { directories where existsInside() }")
  expectSyntaxError("inside 'defchain' { directories where existsInside(files) }")
  expectSyntaxError("inside 'defchain' { directories where existsInside(('h', 'h')) }")
  expectSyntaxError("inside 'defchain' { directories where existsInside() }")

print ("BLACK-BOX TESTS END")
print ("All tests have passed successfully if there is no error message above.")
input("Press Enter to continue...")
